import ccxt
import pandas as pd
import numpy as np
import time
from datetime import datetime
import logging
import asyncio
import talib
import warnings
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger('FuturesBot')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram –±–æ—Ç–∞
TELEGRAM_BOT_TOKEN = "8328135138:AAE5mLIWG59kM8STODbfPoLkd19iykbOmcM"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
TELEGRAM_CHAT_ID = "1167694150", "7916502470", "5381553894"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à chat ID


class FuturesTradingBot:
    def __init__(self):
        self.exchanges = self.initialize_exchanges()
        self.telegram_app = None
        self.last_analysis_time = None
        self.last_signals = []

        self.config = {
            'timeframes': ['15m', '1h'],  # –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
            'min_volume_24h': 1000000,  # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            'max_symbols_per_exchange': 50,  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä —Å –±–∏—Ä–∂–∏
            'analysis_interval': 150,  # –∏–Ω—Ç–µ—Ä–≤–∞–ª –∞–Ω–∞–ª–∏–∑–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            'risk_per_trade': 0.02,  # —Ä–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É (2% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞)
            'virtual_balance': 10000,  # –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–∑–∏—Ü–∏–∏
            'timeout': 10000,
            'min_confidence': 0.50,  # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞
            'risk_reward_ratio': 2.0,  # —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ
            'atr_multiplier_sl': 1.5,  # –º–Ω–æ–∂–∏—Ç–µ–ª—å ATR –¥–ª—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
            'atr_multiplier_tp': 2.0,  # –º–Ω–æ–∂–∏—Ç–µ–ª—å ATR –¥–ª—è —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
            'blacklist': ['USDC/USDT', 'USDC/USD', 'USDCE/USDT', 'USDCB/USDT'],  # —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–∞—Ä
            'signal_validity_seconds': 30  # –≤—Ä–µ–º—è –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        }

        self.top_symbols = []
        self.signals = []

        logger.info("–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def initialize_telegram(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞"""
        try:
            self.telegram_app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            self.telegram_app.add_handler(CommandHandler("start", self.telegram_start))
            self.telegram_app.add_handler(CommandHandler("signals", self.telegram_signals))
            self.telegram_app.add_handler(MessageHandler(filters.Text(["üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã"]), self.telegram_signals))

            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
            await self.telegram_app.initialize()
            await self.telegram_app.start()
            await self.telegram_app.updater.start_polling()

            logger.info("Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞: {e}")

    async def telegram_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        keyboard = [["üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        welcome_text = (
            "üöÄ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –±–∏—Ä–∂–∏: Bybit, MEXC, OKX, Gate.io, Bitget, KuCoin, Huobi, Phemex, BingX\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤:"
        )

        await update.message.reply_text(welcome_text, reply_markup=reply_markup)

    def escape_markdown(self, text: str) -> str:
        """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown"""
        escape_chars = r'_*[]()~`>#+-=|{}.!'
        return ''.join(['\\' + char if char in escape_chars else char for char in text])

    async def telegram_signals(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ Telegram"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–æ–≤
            current_time = datetime.now()
            if (self.last_analysis_time is None or
                    (current_time - self.last_analysis_time).total_seconds() > self.config['signal_validity_seconds']):
                await update.message.reply_text("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä—ã–Ω–æ–∫...")
                await self.run_analysis()
                self.last_analysis_time = current_time
                self.last_signals = self.signals.copy()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª—ã
            if not self.last_signals:
                await update.message.reply_text("üìä –°–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return

            message = "üìà *–ê–ö–¢–£–ê–õ–¨–ù–´–ï –¢–û–†–ì–û–í–´–ï –°–ò–ì–ù–ê–õ–´*\n\n"

            for i, signal in enumerate(self.last_signals[:10]):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 —Å–∏–≥–Ω–∞–ª–∞–º–∏
                escaped_symbol = self.escape_markdown(signal['symbol'])
                escaped_exchange = self.escape_markdown(signal['exchange'])
                escaped_reasons = self.escape_markdown(', '.join(signal['reasons']))

                message += (
                    f"*–°–∏–≥–Ω–∞–ª #{i + 1}:* {escaped_symbol} –Ω–∞ {escaped_exchange}\n"
                    f"*–°–∏–≥–Ω–∞–ª:* {self.escape_markdown(signal['signal'])} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal['confidence']:.2f})\n"
                    f"*–¶–µ–Ω–∞:* {signal['price']:.8f}\n"
                    f"*–°—Ç–æ–ø-–ª–æ—Å—Å:* {signal['stop_loss']:.8f}\n"
                    f"*–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç:* {signal['take_profit']:.8f}\n"
                    f"*–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏:* {signal['recommended_size']:.6f}\n"
                    f"*–ü—Ä–∏—á–∏–Ω—ã:* {escaped_reasons}\n\n"
                )

            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞
            message += f"*–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞:* {self.escape_markdown(self.last_analysis_time.strftime('%Y-%m-%d %H:%M:%S'))}\n"
            message += "*–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è*"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await update.message.reply_text(message, parse_mode='Markdown')

        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}"
            await update.message.reply_text(error_msg)
            logger.error(error_msg)

    def initialize_exchanges(self) -> dict:
        exchanges = {}

        exchange_configs = {
            'bybit': {'options': {'defaultType': 'swap'}, 'timeout': 10000},
            'mexc': {'options': {'defaultType': 'swap'}, 'timeout': 10000},
            'okx': {'options': {'defaultType': 'swap'}, 'timeout': 10000},
            'gateio': {'options': {'defaultType': 'swap'}, 'timeout': 10000},
            'bitget': {'options': {'defaultType': 'swap'}, 'timeout': 10000},
            'kucoin': {'options': {'defaultType': 'future'}, 'timeout': 10000},
            'huobi': {'options': {'defaultType': 'swap'}, 'timeout': 10000},
            'phemex': {'options': {'defaultType': 'swap'}, 'timeout': 10000},
        }

        for exchange_name, config in exchange_configs.items():
            try:
                exchange_class = getattr(ccxt, exchange_name)
                exchange_instance = exchange_class({
                    'timeout': config['timeout'],
                    'enableRateLimit': True,
                    'options': config['options']
                })

                exchange_instance.load_markets()
                exchanges[exchange_name] = exchange_instance
                logger.info(f"–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {exchange_name}")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {exchange_name}: {e}")
                exchanges[exchange_name] = None

        # –î–æ–±–∞–≤–ª—è–µ–º BingX —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        exchanges['bingx'] = self.initialize_bingx()

        return exchanges

    def initialize_bingx(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BingX —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–±—Ö–æ–¥–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤"""
        try:
            # –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
            bingx = ccxt.bingx({
                'timeout': 10000,
                'enableRateLimit': True,
            })

            # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä—ã–Ω–∫–∏
            bingx.load_markets()
            logger.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ BingX")
            return bingx

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ BingX: {e}")

            # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –¥–ª—è BingX
            try:
                # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å –¥—Ä—É–≥–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                bingx = ccxt.bingx({
                    'timeout': 15000,
                    'enableRateLimit': True,
                    'options': {
                        'defaultType': 'swap',
                        'adjustForTimeDifference': True,
                    }
                })

                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä—ã
                markets = bingx.load_markets()
                logger.info(f"BingX: –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(markets)} —Ä—ã–Ω–∫–æ–≤")
                return bingx

            except Exception as e2:
                logger.error(f"–í—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ BingX —Ç–∞–∫–∂–µ failed: {e2}")
                return None

    def is_blacklisted(self, symbol: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Å–∏–º–≤–æ–ª –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ"""
        for blacklisted_symbol in self.config['blacklist']:
            if blacklisted_symbol in symbol:
                return True
        return False

    def get_futures_symbols(self, exchange, exchange_name: str) -> list:
        futures_symbols = []

        try:
            markets = exchange.load_markets()

            for symbol, market in markets.items():
                try:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—ã –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
                    if self.is_blacklisted(symbol):
                        continue

                    # –û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –±–∏—Ä–∂
                    if (market.get('swap', False) or market.get('future', False) or
                            'swap' in symbol.lower() or 'future' in symbol.lower() or
                            '/USDT:' in symbol or symbol.endswith('USDT')):

                        if 'USDT' in symbol and not symbol.startswith('.'):
                            futures_symbols.append(symbol)

                except Exception:
                    continue

            logger.info(f"–° {exchange_name} –Ω–∞–π–¥–µ–Ω–æ {len(futures_symbols)} —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –ø–∞—Ä")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä —Å {exchange_name}: {e}")

        return futures_symbols[:self.config['max_symbols_per_exchange']]

    async def fetch_exchange_volume_data(self, exchange, exchange_name: str, symbols: list) -> dict:
        volume_map = {}

        try:
            if exchange_name == 'bybit':
                for symbol in symbols:
                    try:
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—ã –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
                        if self.is_blacklisted(symbol):
                            continue

                        ticker = exchange.fetch_ticker(symbol)
                        volume = ticker.get('quoteVolume', 0)
                        if volume and volume > self.config['min_volume_24h']:
                            normalized_symbol = symbol.replace(':', '/').replace('-', '/')
                            volume_map[normalized_symbol] = volume
                        await asyncio.sleep(0.02)
                    except Exception:
                        continue
            elif exchange_name == 'bingx':
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è BingX
                for symbol in symbols:
                    try:
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—ã –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
                        if self.is_blacklisted(symbol):
                            continue

                        ticker = exchange.fetch_ticker(symbol)
                        volume = ticker.get('quoteVolume', ticker.get('baseVolume', 0))
                        if volume and volume > self.config['min_volume_24h']:
                            volume_map[symbol] = volume
                        await asyncio.sleep(0.03)
                    except Exception:
                        continue
            else:
                try:
                    tickers = exchange.fetch_tickers(symbols)
                    for symbol, ticker in tickers.items():
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—ã –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
                        if self.is_blacklisted(symbol):
                            continue

                        volume = ticker.get('quoteVolume', 0)
                        if volume and volume > self.config['min_volume_24h']:
                            normalized_symbol = symbol.replace(':', '/').replace('-', '/')
                            volume_map[normalized_symbol] = volume
                except Exception:
                    for symbol in symbols:
                        try:
                            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—ã –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
                            if self.is_blacklisted(symbol):
                                continue

                            ticker = exchange.fetch_ticker(symbol)
                            volume = ticker.get('quoteVolume', 0)
                            if volume and volume > self.config['min_volume_24h']:
                                normalized_symbol = symbol.replace(':', '/').replace('-', '/')
                                volume_map[normalized_symbol] = volume
                            await asyncio.sleep(0.02)
                        except Exception:
                            continue

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–º–∞ —Å {exchange_name}: {e}")

        return volume_map

    async def fetch_top_symbols(self) -> list:
        all_volume_map = {}

        for exchange_name, exchange in self.exchanges.items():
            if exchange is None:
                continue

            try:
                futures_symbols = self.get_futures_symbols(exchange, exchange_name)

                if not futures_symbols:
                    continue

                volume_map = await self.fetch_exchange_volume_data(exchange, exchange_name, futures_symbols)
                all_volume_map.update(volume_map)

                logger.info(f"–° {exchange_name} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(volume_map)} –ø–∞—Ä —Å –æ–±—ä–µ–º–æ–º")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å {exchange_name}: {e}")
                continue

        sorted_symbols = sorted(all_volume_map.items(), key=lambda x: x[1], reverse=True)
        top_symbols = [symbol for symbol, volume in sorted_symbols[:70]]

        logger.info(f"–û—Ç–æ–±—Ä–∞–Ω–æ —Ç–æ–ø {len(top_symbols)} –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return top_symbols

    async def fetch_ohlcv_data(self, exchange_name: str, symbol: str, timeframe: str, limit: int = 50) -> pd.DataFrame:
        exchange = self.exchanges.get(exchange_name)
        if exchange is None:
            return None

        try:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—ã –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
            if self.is_blacklisted(symbol):
                return None

            normalized_symbol = self.normalize_symbol_for_exchange(symbol, exchange_name)
            if not normalized_symbol:
                return None

            await asyncio.sleep(np.random.uniform(0.01, 0.03))

            ohlcv = exchange.fetch_ohlcv(normalized_symbol, timeframe, limit=limit)

            if not ohlcv or len(ohlcv) < 20:
                return None

            df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            df.set_index('timestamp', inplace=True)
            return df

        except Exception:
            return None

    def normalize_symbol_for_exchange(self, symbol: str, exchange_name: str) -> str:
        exchange = self.exchanges.get(exchange_name)
        if not exchange:
            return None

        try:
            if symbol in exchange.symbols:
                return symbol

            variations = [
                symbol,
                symbol.replace('/', ''),
                symbol.replace('/', ':'),
                symbol.replace('/', '-'),
                symbol + 'USDT',
                symbol.replace('USDT', ''),
                symbol.replace('/', '') + 'T',
            ]

            for variation in variations:
                if variation in exchange.symbols:
                    return variation

            # –î–ª—è BingX –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ —Å–∏–º–≤–æ–ª—ã
            if exchange_name == 'bingx':
                for exchange_symbol in exchange.symbols:
                    if symbol.replace('/', '').replace('-', '').replace(':', '') in exchange_symbol:
                        return exchange_symbol

            return None

        except Exception:
            return None

    def calculate_technical_indicators(self, df: pd.DataFrame) -> pd.DataFrame:
        if df is None or len(df) < 20:
            return df

        try:
            df['rsi'] = talib.RSI(df['close'], timeperiod=14)

            macd, macd_signal, _ = talib.MACD(df['close'], fastperiod=12, slowperiod=26, signalperiod=9)
            df['macd'] = macd
            df['macd_signal'] = macd_signal

            bb_upper, bb_middle, bb_lower = talib.BBANDS(df['close'], timeperiod=20, nbdevup=2, nbdevdn=2)
            df['bb_upper'] = bb_upper
            df['bb_middle'] = bb_middle
            df['bb_lower'] = bb_lower

            df['ema_20'] = talib.EMA(df['close'], timeperiod=20)
            df['ema_50'] = talib.EMA(df['close'], timeperiod=50)

            df['volume_ma'] = talib.SMA(df['volume'], timeperiod=20)
            df['volume_ratio'] = df['volume'] / df['volume_ma'].replace(0, 1)

            df['atr'] = talib.ATR(df['high'], df['low'], df['close'], timeperiod=14)

        except Exception:
            return df

        return df

    def generate_trading_signal(self, df: pd.DataFrame, symbol: str, exchange_name: str) -> dict:
        if df is None or len(df) < 20:
            return None

        try:
            last = df.iloc[-1]

            signal = {
                'symbol': symbol,
                'exchange': exchange_name,
                'timestamp': datetime.now(),
                'price': last['close'],
                'signal': 'HOLD',
                'confidence': 0,
                'reasons': [],
                'recommended_size': 0,
                'stop_loss': 0,
                'take_profit': 0,
            }

            reasons = []
            confidence = 0

            # RSI –∞–Ω–∞–ª–∏–∑
            if not pd.isna(last['rsi']):
                if last['rsi'] < 30:
                    confidence += 0.3
                    reasons.append("RSI < 30")
                elif last['rsi'] > 70:
                    confidence -= 0.3
                    reasons.append("RSI > 70")

            # MACD –∞–Ω–∞–ª–∏–∑
            if not pd.isna(last['macd']) and not pd.isna(last['macd_signal']):
                if last['macd'] > last['macd_signal']:
                    confidence += 0.2
                    reasons.append("MACD bullish")
                else:
                    confidence -= 0.2
                    reasons.append("MACD bearish")

            # Bollinger Bands –∞–Ω–∞–ª–∏–∑
            if (not pd.isna(last['bb_upper']) and not pd.isna(last['bb_lower'])):
                if last['close'] < last['bb_lower']:
                    confidence += 0.2
                    reasons.append("Below BB")
                elif last['close'] > last['bb_upper']:
                    confidence -= 0.2
                    reasons.append("Above BB")

            # EMA –∞–Ω–∞–ª–∏–∑
            if not pd.isna(last['ema_20']) and not pd.isna(last['ema_50']):
                if last['close'] > last['ema_20'] > last['ema_50']:
                    confidence += 0.2
                    reasons.append("EMA uptrend")
                elif last['close'] < last['ema_20'] < last['ema_50']:
                    confidence -= 0.2
                    reasons.append("EMA downtrend")

            # Volume –∞–Ω–∞–ª–∏–∑
            if not pd.isna(last['volume_ratio']):
                if last['volume_ratio'] > 1.5:
                    confidence += 0.1 if last['close'] > df['close'].iloc[-2] else -0.1
                    reasons.append(f"Volume x{last['volume_ratio']:.1f}")

            signal['reasons'] = reasons
            signal['confidence'] = abs(confidence)  # –£–±–∏—Ä–∞–µ–º –º–∏–Ω—É—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            if abs(confidence) < self.config['min_confidence']:
                return None

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–≥–Ω–∞–ª
            if confidence >= 0.6:
                signal['signal'] = 'LONG'
            elif confidence >= self.config['min_confidence']:
                signal['signal'] = 'WEAK_LONG'
            elif confidence <= -0.6:
                signal['signal'] = 'SHORT'
            elif confidence <= -self.config['min_confidence']:
                signal['signal'] = 'WEAK_SHORT'

            # –†–∞—Å—á–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–¥–µ–ª–∫–∏
            if signal['signal'] != 'HOLD':
                atr = last['atr'] if not pd.isna(last['atr']) else last['close'] * 0.02
                price = signal['price']

                if 'LONG' in signal['signal']:
                    signal['stop_loss'] = price - (atr * self.config['atr_multiplier_sl'])
                    signal['take_profit'] = price + (atr * self.config['atr_multiplier_tp'])
                else:
                    signal['stop_loss'] = price + (atr * self.config['atr_multiplier_sl'])
                    signal['take_profit'] = price - (atr * self.config['atr_multiplier_tp'])

                risk_per_unit = abs(price - signal['stop_loss'])
                if risk_per_unit > 0:
                    risk_amount = self.config['virtual_balance'] * self.config['risk_per_trade']
                    signal['recommended_size'] = round(risk_amount / risk_per_unit, 4)

            return signal if signal['signal'] != 'HOLD' else None

        except Exception:
            return None

    async def analyze_symbol(self, symbol: str) -> dict:
        best_signal = None

        for exchange_name, exchange in self.exchanges.items():
            if exchange is None:
                continue

            try:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—ã –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
                if self.is_blacklisted(symbol):
                    continue

                normalized_symbol = self.normalize_symbol_for_exchange(symbol, exchange_name)
                if not normalized_symbol:
                    continue

                df = await self.fetch_ohlcv_data(exchange_name, symbol, self.config['timeframes'][0])
                if df is None:
                    continue

                df = self.calculate_technical_indicators(df)
                signal = self.generate_trading_signal(df, symbol, exchange_name)

                if signal and (best_signal is None or signal['confidence'] > best_signal['confidence']):
                    best_signal = signal

            except Exception:
                continue

        return best_signal

    async def run_analysis(self):
        logger.info("–ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä...")

        self.top_symbols = await self.fetch_top_symbols()

        if not self.top_symbols:
            logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return []

        tasks = []
        for symbol in self.top_symbols:
            task = asyncio.create_task(self.analyze_symbol(symbol))
            tasks.append(task)

        batch_size = 15
        all_signals = []

        for i in range(0, len(tasks), batch_size):
            batch = tasks[i:i + batch_size]
            try:
                results = await asyncio.gather(*batch, return_exceptions=True)

                for result in results:
                    if isinstance(result, Exception):
                        continue
                    elif result is not None:
                        all_signals.append(result)

                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {min(i + batch_size, len(tasks))}/{len(tasks)} —Å–∏–º–≤–æ–ª–æ–≤")

            except Exception:
                continue

        self.signals = sorted(all_signals, key=lambda x: x['confidence'], reverse=True)

        logger.info(f"–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ {len(self.signals)} —Å–∏–≥–Ω–∞–ª–æ–≤")
        return self.signals

    def print_signals(self, max_signals: int = 10):
        if not self.signals:
            print("–ù–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
            return

        print("\n" + "=" * 120)
        print("–¢–û–†–ì–û–í–´–ï –°–ò–ì–ù–ê–õ–´ –ù–ê –§–¨–Æ–ß–ï–†–°–´")
        print("=" * 120)
        print(f"{'–í—Ä–µ–º—è':<15} {'–ë–∏—Ä–∂–∞':<10} {'–ü–∞—Ä–∞':<15} {'–°–∏–≥–Ω–∞–ª':<12} {'–¶–µ–Ω–∞':<12} {'Conf':<6} {'R/R':<5}")
        print("-" * 120)

        for signal in self.signals[:max_signals]:
            time_str = signal['timestamp'].strftime("%H:%M:%S")
            exchange = signal['exchange'][:10]
            symbol = signal['symbol'].replace('/USDT', '')[:12]
            signal_type = signal['signal'][:12]
            price = f"{signal['price']:.6f}"
            confidence = f"{signal['confidence']:.2f}"
            rr_ratio = f"{abs(signal['take_profit'] - signal['price']) / abs(signal['price'] - signal['stop_loss']):.1f}"

            print(
                f"{time_str:<15} {exchange:<10} {symbol:<15} {signal_type:<12} {price:<12} {confidence:<6} {rr_ratio:<5}")

        print("=" * 120)

        for i, signal in enumerate(self.signals[:10]):
            print(f"\n–°–∏–≥–Ω–∞–ª #{i + 1}: {signal['symbol']} –Ω–∞ {signal['exchange']}")
            print(f"–°–∏–≥–Ω–∞–ª: {signal['signal']} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal['confidence']:.2f})")
            print(f"–¶–µ–Ω–∞: {signal['price']:.8f}")
            print(f"–°—Ç–æ–ø-–ª–æ—Å—Å: {signal['stop_loss']:.8f}")
            print(f"–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {signal['take_profit']:.8f}")
            print(f"–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {signal['recommended_size']:.6f}")
            print("–ü—Ä–∏—á–∏–Ω—ã: " + ", ".join(signal['reasons']))

    async def run_continuous(self):
        """–ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞"""
        analysis_count = 0

        while True:
            try:
                analysis_count += 1
                print(f"\n{'=' * 60}")
                print(f"–ê–ù–ê–õ–ò–ó #{analysis_count} - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
                print(f"{'=' * 60}")

                start_time = time.time()
                await self.run_analysis()

                if self.signals:
                    self.print_signals()
                else:
                    print("üö´ –°–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

                execution_time = time.time() - start_time
                print(f"\n‚è±Ô∏è –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {execution_time:.1f} —Å–µ–∫—É–Ω–¥")

                # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                wait_time = max(self.config['analysis_interval'] - execution_time, 30)
                next_analysis_time = datetime.now().timestamp() + wait_time
                next_time_str = datetime.fromtimestamp(next_analysis_time).strftime("%H:%M:%S")

                print(f"‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∏–π –∞–Ω–∞–ª–∏–∑ –≤ {next_time_str} (—á–µ—Ä–µ–∑ {wait_time:.0f} —Å–µ–∫—É–Ω–¥)")
                print("üìä –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞..." + " " * 30, end='\r')

                # –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
                for sec in range(int(wait_time)):
                    try:
                        progress = (sec + 1) / wait_time * 50
                        bar = "‚ñà" * int(progress) + "‚ñë" * (50 - int(progress))
                        print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ: [{bar}] {sec + 1}/{int(wait_time)}—Å–µ–∫", end='\r')
                        await asyncio.sleep(1)
                    except KeyboardInterrupt:
                        raise
                    except Exception:
                        await asyncio.sleep(1)

                print(" " * 80, end='\r')  # –û—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏

            except KeyboardInterrupt:
                print("\n\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except Exception as e:
                print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                print("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(60)


async def main():
    bot = FuturesTradingBot()

    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π 9 –±–∏—Ä–∂!")
        print("üìä –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –±–∏—Ä–∂–∏: Bybit, MEXC, OKX, Gate.io, Bitget, KuCoin, Huobi, Phemex, BingX")
        print(
            f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏: –º–∏–Ω. —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {bot.config['min_confidence']}, SL={bot.config['atr_multiplier_sl']}ATR, TP={bot.config['atr_multiplier_tp']}ATR")
        print("‚è∏Ô∏è –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C\n")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –±–æ—Ç–∞
        await bot.initialize_telegram()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞
        await bot.run_continuous()

    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram –±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        if bot.telegram_app:
            await bot.telegram_app.updater.stop()
            await bot.telegram_app.stop()
            await bot.telegram_app.shutdown()


if __name__ == "__main__":
    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    while True:
        try:
            asyncio.run(main())
        except KeyboardInterrupt:
            print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            break
        except Exception as e:
            print(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏: {e}")
            time.sleep(10)
