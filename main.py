import ccxt
import asyncio
from telegram import Bot, Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    ConversationHandler
)
from telegram.error import TelegramError
import logging
from datetime import datetime, timezone, timedelta
from collections import defaultdict
import html
import re
import json
import os
import time
import numpy as np

# –û–±—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = "7952768185:AAGuhybXaGPJqtlGPd1-O4nc6_FpUL2rOgw"
TELEGRAM_CHAT_IDS = ["1167694150", "7916502470", "5381553894", "1111230981"]

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–ø–æ—Ç–æ–≤–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
DEFAULT_SPOT_SETTINGS = {
    "THRESHOLD_PERCENT": 0.5,
    "MAX_THRESHOLD_PERCENT": 40,
    "CHECK_INTERVAL": 30,
    "MIN_EXCHANGES_FOR_PAIR": 2,
    "MIN_VOLUME_USD": 500000,
    "MIN_ENTRY_AMOUNT_USDT": 5,
    "MAX_ENTRY_AMOUNT_USDT": 300,
    "MAX_IMPACT_PERCENT": 0.5,
    "ORDER_BOOK_DEPTH": 10,
    "MIN_NET_PROFIT_USD": 5,
    "ENABLED": True,
    "PRICE_CONVERGENCE_THRESHOLD": 0.5,
    "PRICE_CONVERGENCE_ENABLED": True,
    "VOLATILITY_THRESHOLD": 10.0,
    "MIN_ORDER_BOOK_VOLUME": 100,
    "MAX_VOLATILITY_PERCENT": 15.0
}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
DEFAULT_FUTURES_SETTINGS = {
    "THRESHOLD_PERCENT": 0.5,
    "MAX_THRESHOLD_PERCENT": 20,
    "CHECK_INTERVAL": 30,
    "MIN_VOLUME_USD": 200000,
    "MIN_EXCHANGES_FOR_PAIR": 2,
    "MIN_ENTRY_AMOUNT_USDT": 5,
    "MAX_ENTRY_AMOUNT_USDT": 150,
    "MIN_NET_PROFIT_USD": 3,
    "ENABLED": True,
    "PRICE_CONVERGENCE_THRESHOLD": 0.5,
    "PRICE_CONVERGENCE_ENABLED": True,
    "VOLATILITY_THRESHOLD": 10.0,
    "MIN_ORDER_BOOK_VOLUME": 1000,
    "FUNDING_RATE_THRESHOLD": 0.01,
    "MIN_FUNDING_RATE_TO_RECEIVE": -0.005,
    "IDEAL_FUNDING_SCENARIO": -0.01,
    "FUNDING_CHECK_INTERVAL": 3600,
    "MAX_HOLDING_HOURS": 24,
    "MAX_IMPACT_PERCENT": 0.5,
    "MAX_VOLATILITY_PERCENT": 15.0,
    "RED_FUNDING_THRESHOLD": 0.005
}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–ø–æ—Ç-—Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
DEFAULT_SPOT_FUTURES_SETTINGS = {
    "THRESHOLD_PERCENT": 0.5,
    "MAX_THRESHOLD_PERCENT": 20,
    "CHECK_INTERVAL": 30,
    "MIN_VOLUME_USD": 300000,
    "MIN_EXCHANGES_FOR_PAIR": 2,
    "MIN_ENTRY_AMOUNT_USDT": 5,
    "MAX_ENTRY_AMOUNT_USDT": 150,
    "MIN_NET_PROFIT_USD": 3,
    "ENABLED": True,
    "PRICE_CONVERGENCE_THRESHOLD": 0.5,
    "PRICE_CONVERGENCE_ENABLED": True,
    "VOLATILITY_THRESHOLD": 10.0,
    "MIN_ORDER_BOOK_VOLUME": 1000,
    "MAX_IMPACT_PERCENT": 0.5,
    "MAX_VOLATILITY_PERCENT": 15.0
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∏—Ä–∂
EXCHANGE_SETTINGS = {
    "bybit": {"ENABLED": True},
    "mexc": {"ENABLED": True},
    "okx": {"ENABLED": True},
    "gate": {"ENABLED": True},
    "bitget": {"ENABLED": True},
    "kucoin": {"ENABLED": True},
    "htx": {"ENABLED": True},
    "bingx": {"ENABLED": True},
    "phemex": {"ENABLED": True},
    "coinex": {"ENABLED": True},
    "blofin": {"ENABLED": True}
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SETTINGS_MENU, SPOT_SETTINGS, FUTURES_SETTINGS, SPOT_FUTURES_SETTINGS, EXCHANGE_SETTINGS_MENU, SETTING_VALUE, COIN_SELECTION = range(7)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
ARBITRAGE_LIST, ARBITRAGE_PAGE = range(8, 10)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger("CryptoArbBot")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
price_convergence_history = defaultdict(dict)
last_convergence_notification = defaultdict(dict)
arbitrage_start_times = defaultdict(dict)
current_arbitrage_opportunities = defaultdict(dict)
previous_arbitrage_opportunities = defaultdict(dict)
sent_arbitrage_opportunities = defaultdict(dict)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–∏—Ä–∂
LAST_EXCHANGE_SETTINGS = None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
price_history = defaultdict(list)
VOLATILITY_WINDOW = 10

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞–≤–æ–∫ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
funding_rates_cache = {}
last_funding_check = 0

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –º–æ–Ω–µ—Ç
coin_volatility_history = defaultdict(list)
COIN_VOLATILITY_WINDOW = 20

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
user_pagination_data = defaultdict(dict)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
def load_settings():
    try:
        if os.path.exists('settings.json'):
            with open('settings.json', 'r') as f:
                return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

    return {
        "SPOT": DEFAULT_SPOT_SETTINGS.copy(),
        "FUTURES": DEFAULT_FUTURES_SETTINGS.copy(),
        "SPOT_FUTURES": DEFAULT_SPOT_FUTURES_SETTINGS.copy(),
        "EXCHANGES": EXCHANGE_SETTINGS.copy()
    }

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
def save_settings(settings):
    try:
        with open('settings.json', 'w') as f:
            json.dump(settings, f, indent=4)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
SHARED_BOT = None
SPOT_EXCHANGES_LOADED = {}
FUTURES_EXCHANGES_LOADED = {}
SETTINGS = load_settings()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∏—Ä–∂ –¥–ª—è —Å–ø–æ—Ç–∞
SPOT_EXCHANGES = {
    "bybit": {
        "api": ccxt.bybit({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT",
        "is_spot": lambda m: m.get('spot', False) and m['quote'] == 'USDT',
        "taker_fee": 0.001,
        "maker_fee": 0.001,
        "url_format": lambda s: f"https://www.bybit.com/trade/spot/{s.replace('/', '')}",
        "withdraw_url": lambda c: f"https://www.bybit.com/user/assets/withdraw",
        "deposit_url": lambda c: f"https://www.bybit.com/user/assets/deposit",
        "emoji": "üèõ",
        "blacklist": []
    },
    "mexc": {
        "api": ccxt.mexc({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT",
        "is_spot": lambda m: m.get('spot', False) and m['quote'] == 'USDT',
        "taker_fee": 0.002,
        "maker_fee": 0.002,
        "url_format": lambda s: f"https://www.mexc.com/exchange/{s.replace('/', '_')}",
        "withdraw_url": lambda c: f"https://www.mexc.com/ru-RU/assets/withdraw/{c}",
        "deposit_url": lambda c: f"https://www.mexc.com/ru-RU/assets/deposit/{c}",
        "emoji": "üèõ",
        "blacklist": []
    },
    "okx": {
        "api": ccxt.okx({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT",
        "is_spot": lambda m: m.get('spot', False) and m['quote'] == 'USDT',
        "taker_fee": 0.001,
        "maker_fee": 0.0008,
        "url_format": lambda s: f"https://www.okx.com/trade-spot/{s.replace('/', '-').lower()}",
        "withdraw_url": lambda c: f"https://www.okx.com/ru/balance/withdrawal/{c.lower()}-chain",
        "deposit_url": lambda c: f"https://www.okx.com/ru/balance/recharge/{c.lower()}",
        "emoji": "üèõ",
        "blacklist": ["BTC"]
    },
    "gate": {
        "api": ccxt.gateio({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT",
        "is_spot": lambda m: m.get('spot', False) and m['quote'] == 'USDT',
        "taker_fee": 0.002,
        "maker_fee": 0.002,
        "url_format": lambda s: f"https://www.gate.io/trade/{s.replace('/', '_')}",
        "withdraw_url": lambda c: f"https://www.gate.io/myaccount/withdraw/{c}",
        "deposit_url": lambda c: f"https://www.gate.io/myaccount/deposit/{c}",
        "emoji": "üèõ",
        "blacklist": []
    },
    "bitget": {
        "api": ccxt.bitget({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT",
        "is_spot": lambda m: m.get('spot', False) and m['quote'] == 'USDT',
        "taker_fee": 0.001,
        "maker_fee": 0.001,
        "url_format": lambda s: f"https://www.bitget.com/spot/{s.replace('/', '')}_SPBL",
        "withdraw_url": lambda c: f"https://www.bitget.com/ru/asset/withdraw?coinId={c}",
        "deposit_url": lambda c: f"https://www.bitget.com/ru/asset/recharge?coinId={c}",
        "emoji": "üèõ",
        "blacklist": []
    },
    "kucoin": {
        "api": ccxt.kucoin({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT",
        "is_spot": lambda m: m.get('spot', False) and m['quote'] == 'USDT',
        "taker_fee": 0.001,
        "maker_fee": 0.001,
        "url_format": lambda s: f"https://www.kucoin.com/trade/{s.replace('/', '-')}",
        "withdraw_url": lambda c: f"https://www.kucoin.com/ru/assets/withdraw/{c}",
        "deposit_url": lambda c: f"https://www.kucoin.com/ru/assets/coin/{c}",
        "emoji": "üèõ",
        "blacklist": []
    },
    "htx": {
        "api": ccxt.htx({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT",
        "is_spot": lambda m: m.get('spot', False) and m['quote'] == 'USDT',
        "taker_fee": 0.002,
        "maker_fee": 0.002,
        "url_format": lambda s: f"https://www.htx.com/trade/{s.replace('/', '_').lower()}",
        "withdraw_url": lambda c: f"https://www.htx.com/ru-ru/finance/withdraw/{c.lower()}",
        "deposit_url": lambda c: f"https://www.htx.com/ru-ru/finance/deposit/{c.lower()}",
        "emoji": "üèõ",
        "blacklist": []
    },
    "bingx": {
        "api": ccxt.bingx({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT",
        "is_spot": lambda m: m.get('spot', False) and m['quote'] == 'USDT',
        "taker_fee": 0.001,
        "maker_fee": 0.001,
        "url_format": lambda s: f"https://bingx.com/en-us/spot/{s.replace('/', '')}",
        "withdraw_url": lambda c: f"https://bingx.com/en-us/assets/withdraw/{c}",
        "deposit_url": lambda c: f"https://bingx.com/en-us/assets/deposit/{c}",
        "emoji": "üèõ",
        "blacklist": []
    },
    "phemex": {
        "api": ccxt.phemex({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT",
        "is_spot": lambda m: m.get('spot', False) and m['quote'] == 'USDT',
        "taker_fee": 0.001,
        "maker_fee": 0.001,
        "url_format": lambda s: f"https://phemex.com/spot/trade/{s.replace('/', '')}",
        "withdraw_url": lambda c: f"https://phemex.com/assets/withdraw?asset={c}",
        "deposit_url": lambda c: f"https://phemex.com/assets/deposit?asset={c}",
        "emoji": "üèõ",
        "blacklist": []
    },
    "coinex": {
        "api": ccxt.coinex({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT",
        "is_spot": lambda m: m.get('spot', False) and m['quote'] == 'USDT',
        "taker_fee": 0.002,
        "maker_fee": 0.001,
        "url_format": lambda s: f"https://www.coinex.com/exchange/{s.replace('/', '-')}",
        "withdraw_url": lambda c: f"https://www.coinex.com/asset/withdraw/{c}",
        "deposit_url": lambda c: f"https://www.coinex.com/asset/deposit/{c}",
        "emoji": "üèõ",
        "blacklist": []
    },
    "blofin": {
        "api": ccxt.blofin({
            "enableRateLimit": True,
            "options": {
                "defaultType": "spot"
            }
        }),
        "symbol_format": lambda s: f"{s}/USDT",
        "is_spot": lambda m: (
                m.get('type') == 'spot' and
                m['quote'] == 'USDT'
        ),
        "taker_fee": 0.001,
        "maker_fee": 0.001,
        "url_format": lambda s: f"https://www.blofin.com/spot/{s.replace('/', '-')}",
        "withdraw_url": lambda c: f"https://www.blofin.com/assets/withdraw/{c}",
        "deposit_url": lambda c: f"https://www.blofin.com/assets/deposit/{c}",
        "emoji": "üèõ",
        "blacklist": []
    }
}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∏—Ä–∂ –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤
FUTURES_EXCHANGES = {
    "bybit": {
        "api": ccxt.bybit({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT:USDT",
        "is_futures": lambda m: (m.get('swap', False) or m.get('future', False)) and m['settle'] == 'USDT',
        "taker_fee": 0.0006,
        "maker_fee": 0.0001,
        "url_format": lambda s: f"https://www.bybit.com/trade/usdt/{s.replace('/', '').replace(':USDT', '')}",
        "blacklist": ["BTC", "ETH"],
        "emoji": "üìä",
        "supports_funding": True
    },
    "mexc": {
        "api": ccxt.mexc({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT:USDT",
        "is_futures": lambda m: m.get('swap', False) and 'USDT' in m['id'],
        "taker_fee": 0.0006,
        "maker_fee": 0.0002,
        "url_format": lambda s: f"https://futures.mexc.com/exchange/{s.replace('/', '_').replace(':USDT', '')}",
        "blacklist": [],
        "emoji": "üìä",
        "supports_funding": True
    },
    "okx": {
        "api": ccxt.okx({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT:USDT",
        "is_futures": lambda m: (m.get('swap', False) or m.get('future', False)) and m['settle'] == 'USDT',
        "taker_fee": 0.0005,
        "maker_fee": 0.0002,
        "url_format": lambda s: f"https://www.okx.com/trade-swap/{s.replace('/', '-').replace(':USDT', '').lower()}",
        "blacklist": ["BTC", "ETH"],
        "emoji": "üìä",
        "supports_funding": True
    },
    "gate": {
        "api": ccxt.gateio({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT:USDT",
        "is_futures": lambda m: m.get('swap', False) and '_USDT' in m['id'],
        "taker_fee": 0.0006,
        "maker_fee": 0.0002,
        "url_format": lambda s: f"https://www.gate.io/futures_trade/{s.replace('/', '_').replace(':USDT', '')}",
        "blacklist": [],
        "emoji": "üìä",
        "supports_funding": True
    },
    "bitget": {
        "api": ccxt.bitget({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT:USDT",
        "is_futures": lambda m: m.get('swap', False) and 'USDT' in m['id'],
        "taker_fee": 0.0006,
        "maker_fee": 0.0002,
        "url_format": lambda s: f"https://www.bitget.com/ru/futures/{s.replace('/', '').replace(':USDT', '')}",
        "blacklist": [],
        "emoji": "üìä",
        "supports_funding": True
    },
    "kucoin": {
        "api": ccxt.kucoin({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT:USDT",
        "is_futures": lambda m: m.get('swap', False) and 'USDT' in m['id'],
        "taker_fee": 0.0006,
        "maker_fee": 0.0002,
        "url_format": lambda s: f"https://www.kucoin.com/futures/trade/{s.replace('/', '-').replace(':USDT', '')}",
        "blacklist": [],
        "emoji": "üìä",
        "supports_funding": True
    },
    "htx": {
        "api": ccxt.htx({
            "enableRateLimit": True,
            "options": {
                "defaultType": "swap",
                "fetchMarkets": ["swap"]
            }
        }),
        "symbol_format": lambda s: f"{s}/USDT:USDT",
        "is_futures": lambda m: m.get('swap', False) and m.get('linear', False),
        "taker_fee": 0.0006,
        "maker_fee": 0.0002,
        "url_format": lambda s: f"https://www.htx.com/futures/exchange/{s.split(':')[0].replace('/', '_').lower()}",
        "blacklist": [],
        "emoji": "üìä",
        "supports_funding": True
    },
    "bingx": {
        "api": ccxt.bingx({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT:USDT",
        "is_futures": lambda m: m.get('swap', False) and 'USDT' in m['id'],
        "taker_fee": 0.0005,
        "maker_fee": 0.0002,
        "url_format": lambda s: f"https://bingx.com/en-us/futures/{s.replace('/', '')}",
        "blacklist": [],
        "emoji": "üìä",
        "supports_funding": True
    },
    "phemex": {
        "api": ccxt.phemex({
            "enableRateLimit": True,
            "options": {
                "defaultType": "swap",
            }
        }),
        "symbol_format": lambda s: f"{s}/USDT:USDT",
        "is_futures": lambda m: m.get('swap', False) and m['settle'] == 'USDT',
        "taker_fee": 0.0006,
        "maker_fee": 0.0002,
        "url_format": lambda s: f"https://phemex.com/futures/trade/{s.replace('/', '').replace(':USDT', '')}",
        "blacklist": [],
        "emoji": "üìä",
        "supports_funding": True
    },
    "coinex": {
        "api": ccxt.coinex({"enableRateLimit": True}),
        "symbol_format": lambda s: f"{s}/USDT:USDT",
        "is_futures": lambda m: (m.get('swap', False) or m.get('future', False)) and m['settle'] == 'USDT',
        "taker_fee": 0.001,
        "maker_fee": 0.001,
        "url_format": lambda s: f"https://www.coinex.com/perpetual/{s.replace('/', '-').replace(':USDT', '')}",
        "blacklist": [],
        "emoji": "üìä",
        "supports_funding": True
    },
    "blofin": {
        "api": ccxt.blofin({
            "enableRateLimit": True,
            "options": {
                "defaultType": "swap"
            }
        }),
        "symbol_format": lambda s: f"{s}/USDT:USDT",
        "is_futures": lambda m: (
                m.get('type') in ['swap', 'future'] and
                m.get('settle') == 'USDT' and
                m.get('linear', False)
        ),
        "taker_fee": 0.0006,
        "maker_fee": 0.0002,
        "url_format": lambda s: f"https://www.blofin.com/futures/{s.replace('/', '-').replace(':USDT', '')}",
        "blacklist": [],
        "emoji": "üìä",
        "supports_funding": True
    }
}

# Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    return ReplyKeyboardMarkup([
        [KeyboardButton("üìà –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∫–∏")], [KeyboardButton("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
        [KeyboardButton("üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"), KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ], resize_keyboard=True)

def get_settings_keyboard():
    return ReplyKeyboardMarkup([
        [KeyboardButton("üöÄÔ∏è –°–ø–æ—Ç"), KeyboardButton("üìä –§—å—é—á–µ—Ä—Å—ã"), KeyboardButton("‚ÜîÔ∏è –°–ø–æ—Ç-–§—å—é—á–µ—Ä—Å—ã")],
        [KeyboardButton("üèõ –ë–∏—Ä–∂–∏"), KeyboardButton("üîÑ –°–±—Ä–æ—Å")],
        [KeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ], resize_keyboard=True)

def get_spot_settings_keyboard():
    spot = SETTINGS['SPOT']
    return ReplyKeyboardMarkup([
        [KeyboardButton(f"–ü–æ—Ä–æ–≥: {spot['THRESHOLD_PERCENT']}%"),
         KeyboardButton(f"–ú–∞–∫—Å. –ø–æ—Ä–æ–≥: {spot['MAX_THRESHOLD_PERCENT']}%")],
        [KeyboardButton(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {spot['CHECK_INTERVAL']}—Å"),
         KeyboardButton(f"–û–±—ä–µ–º: ${spot['MIN_VOLUME_USD'] / 1000:.0f}K")],
        [KeyboardButton(f"–ú–∏–Ω. —Å—É–º–º–∞: ${spot['MIN_ENTRY_AMOUNT_USDT']}"),
         KeyboardButton(f"–ú–∞–∫—Å. —Å—É–º–º–∞: ${spot['MAX_ENTRY_AMOUNT_USDT']}")],
        [KeyboardButton(f"–í–ª–∏—è–Ω–∏–µ: {spot['MAX_IMPACT_PERCENT']}%"),
         KeyboardButton(f"–°—Ç–∞–∫–∞–Ω: {spot['ORDER_BOOK_DEPTH']}")],
        [KeyboardButton(f"–ü—Ä–∏–±—ã–ª—å: ${spot['MIN_NET_PROFIT_USD']}"),
         KeyboardButton(f"–°—Ç–∞—Ç—É—Å: {'–í–ö–õ' if spot['ENABLED'] else '–í–´–ö–õ'}")],
        [KeyboardButton(f"–°—Ö–æ–¥–∏–º–æ—Å—Ç—å: {spot['PRICE_CONVERGENCE_THRESHOLD']}%"),
         KeyboardButton(f"–£–≤–µ–¥. —Å—Ä–∞–≤–Ω.: {'üîî' if spot['PRICE_CONVERGENCE_ENABLED'] else 'üîï'}")],
        [KeyboardButton(f"–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {spot['VOLATILITY_THRESHOLD']}%"),
         KeyboardButton(f"–ú–∏–Ω. –æ–±—ä–µ–º —Å—Ç–∞–∫–∞–Ω–∞: ${spot['MIN_ORDER_BOOK_VOLUME']}")],
        [KeyboardButton(f"–ú–∞–∫—Å. –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {spot['MAX_VOLATILITY_PERCENT']}%")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")]
    ], resize_keyboard=True)

def get_futures_settings_keyboard():
    futures = SETTINGS['FUTURES']
    return ReplyKeyboardMarkup([
        [KeyboardButton(f"–ü–æ—Ä–æ–≥: {futures['THRESHOLD_PERCENT']}%"),
         KeyboardButton(f"–ú–∞–∫—Å. –ø–æ—Ä–æ–≥: {futures['MAX_THRESHOLD_PERCENT']}%")],
        [KeyboardButton(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {futures['CHECK_INTERVAL']}—Å"),
         KeyboardButton(f"–û–±—ä–µ–º: ${futures['MIN_VOLUME_USD'] / 1000:.0f}K")],
        [KeyboardButton(f"–ú–∏–Ω. —Å—É–º–º–∞: ${futures['MIN_ENTRY_AMOUNT_USDT']}"),
         KeyboardButton(f"–ú–∞–∫—Å. —Å—É–º–º–∞: ${futures['MAX_ENTRY_AMOUNT_USDT']}")],
        [KeyboardButton(f"–ü—Ä–∏–±—ã–ª—å: ${futures['MIN_NET_PROFIT_USD']}"),
         KeyboardButton(f"–°—Ç–∞—Ç—É—Å: {'–í–ö–õ' if futures['ENABLED'] else '–í–´–ö–õ'}")],
        [KeyboardButton(f"–°—Ö–æ–¥–∏–º–æ—Å—Ç—å: {futures['PRICE_CONVERGENCE_THRESHOLD']}%"),
         KeyboardButton(f"–£–≤–µ–¥. —Å—Ä–∞–≤–Ω.: {'üîî' if futures['PRICE_CONVERGENCE_ENABLED'] else 'üîï'}")],
        [KeyboardButton(f"–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {futures['VOLATILITY_THRESHOLD']}%"),
         KeyboardButton(f"–ú–∏–Ω. –æ–±—ä–µ–º —Å—Ç–∞–∫–∞–Ω–∞: ${futures['MIN_ORDER_BOOK_VOLUME']}")],
        [KeyboardButton(f"–ú–∞–∫—Å. —Ñ–∞–Ω–¥–∏–Ω–≥: {futures['FUNDING_RATE_THRESHOLD']}%"),
         KeyboardButton(f"–ú–∏–Ω. —Ñ–∞–Ω–¥–∏–Ω–≥: {futures['MIN_FUNDING_RATE_TO_RECEIVE']}%")],
        [KeyboardButton(f"–ö—Ä–∞—Å–Ω—ã–π —Ñ–∞–Ω–¥–∏–Ω–≥: {futures['RED_FUNDING_THRESHOLD']}%"),
         KeyboardButton(f"–ú–∞–∫—Å. –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {futures['MAX_VOLATILITY_PERCENT']}%")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")]
    ], resize_keyboard=True)

def get_spot_futures_settings_keyboard():
    spot_futures = SETTINGS['SPOT_FUTURES']
    return ReplyKeyboardMarkup([
        [KeyboardButton(f"–ü–æ—Ä–æ–≥: {spot_futures['THRESHOLD_PERCENT']}%"),
         KeyboardButton(f"–ú–∞–∫—Å. –ø–æ—Ä–æ–≥: {spot_futures['MAX_THRESHOLD_PERCENT']}%")],
        [KeyboardButton(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {spot_futures['CHECK_INTERVAL']}—Å"),
         KeyboardButton(f"–û–±—ä–µ–º: ${spot_futures['MIN_VOLUME_USD'] / 1000:.0f}K")],
        [KeyboardButton(f"–ú–∏–Ω. —Å—É–º–º–∞: ${spot_futures['MIN_ENTRY_AMOUNT_USDT']}"),
         KeyboardButton(f"–ú–∞–∫—Å. —Å—É–º–º–∞: ${spot_futures['MAX_ENTRY_AMOUNT_USDT']}")],
        [KeyboardButton(f"–ü—Ä–∏–±—ã–ª—å: ${spot_futures['MIN_NET_PROFIT_USD']}"),
         KeyboardButton(f"–°—Ç–∞—Ç—É—Å: {'–í–ö–õ' if spot_futures['ENABLED'] else '–í–´–ö–õ'}")],
        [KeyboardButton(f"–°—Ö–æ–¥–∏–º–æ—Å—Ç—å: {spot_futures['PRICE_CONVERGENCE_THRESHOLD']}%"),
         KeyboardButton(f"–£–≤–µ–¥. —Å—Ä–∞–≤–Ω.: {'üîî' if spot_futures['PRICE_CONVERGENCE_ENABLED'] else 'üîï'}")],
        [KeyboardButton(f"–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {spot_futures['VOLATILITY_THRESHOLD']}%"),
         KeyboardButton(f"–ú–∏–Ω. –æ–±—ä–µ–º —Å—Ç–∞–∫–∞–Ω–∞: ${spot_futures['MIN_ORDER_BOOK_VOLUME']}")],
        [KeyboardButton(f"–ú–∞–∫—Å. –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {spot_futures['MAX_VOLATILITY_PERCENT']}%")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")]
    ], resize_keyboard=True)

def get_exchange_settings_keyboard():
    keyboard = []
    row = []
    for i, (exchange, config) in enumerate(SETTINGS['EXCHANGES'].items()):
        status = "‚úÖ" if config['ENABLED'] else "‚ùå"
        row.append(KeyboardButton(f"{exchange}: {status}"))
        if (i + 1) % 2 == 0:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    keyboard.append([KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_arbitrage_list_keyboard(page, total_pages):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö —Å–≤—è–∑–æ–∫"""
    keyboard = []
    if total_pages > 1:
        nav_buttons = []
        if page > 0:
            nav_buttons.append(KeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è"))
        nav_buttons.append(KeyboardButton(f"{page + 1}/{total_pages}"))
        if page < total_pages - 1:
            nav_buttons.append(KeyboardButton("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è"))
        keyboard.append(nav_buttons)
    keyboard.append([KeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def send_telegram_message(message: str, chat_id: str = None, reply_markup: ReplyKeyboardMarkup = None):
    global SHARED_BOT
    if not SHARED_BOT:
        SHARED_BOT = Bot(token=TELEGRAM_TOKEN)

    targets = [chat_id] if chat_id else TELEGRAM_CHAT_IDS

    for target_id in targets:
        try:
            await SHARED_BOT.send_message(
                chat_id=target_id,
                text=message,
                parse_mode="HTML",
                disable_web_page_preview=True,
                reply_markup=reply_markup
            )
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {target_id}")
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {target_id}: {e}")

def format_duration(seconds):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if seconds < 60:
        return f"{int(seconds)} —Å–µ–∫"
    elif seconds < 3600:
        minutes = int(seconds // 60)
        seconds_remaining = int(seconds % 60)
        return f"{minutes} –º–∏–Ω {seconds_remaining} —Å–µ–∫"
    else:
        hours = int(seconds // 3600)
        minutes = int((seconds % 3600) // 60)
        return f"{hours} —á {minutes} –º–∏–Ω"

def add_opportunity_to_sent(arb_type: str, base: str, exchange1: str, exchange2: str, spread: float,
                            price1: float, price2: float, volume1: float = None, volume2: float = None,
                            min_entry_amount: float = None, max_entry_amount: float = None,
                            profit_min: dict = None, profit_max: dict = None,
                            available_volume: float = None, order_book_volume: float = None,
                            long_funding: float = None, short_funding: float = None):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–≤—è–∑–∫—É –≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"""
    key = f"{arb_type}_{base}_{exchange1}_{exchange2}"
    current_time = time.time()

    sent_arbitrage_opportunities[key] = {
        'arb_type': arb_type,
        'base': base,
        'exchange1': exchange1,
        'exchange2': exchange2,
        'spread': spread,
        'price1': price1,
        'price2': price2,
        'volume1': volume1,
        'volume2': volume2,
        'min_entry_amount': min_entry_amount,
        'max_entry_amount': max_entry_amount,
        'profit_min': profit_min,
        'profit_max': profit_max,
        'available_volume': available_volume,
        'order_book_volume': order_book_volume,
        'long_funding': long_funding,
        'short_funding': short_funding,
        'start_time': current_time,
        'last_updated': current_time
    }

    # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ current_arbitrage_opportunities –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–∫–∞—Ö
    current_arbitrage_opportunities[key] = sent_arbitrage_opportunities[key].copy()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —ç—Ç–æ–π —Å–≤—è–∑–∫–∏
    arbitrage_start_times[key] = current_time
    previous_arbitrage_opportunities[key] = True

    logger.info(f"–°–≤—è–∑–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ: {key}")

async def send_price_convergence_notification(arb_type: str, base: str, exchange1: str, exchange2: str,
                                              price1: float, price2: float, spread: float, volume1: float = None,
                                              volume2: float = None, duration: float = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Ü–µ–Ω —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –∏ —É–¥–∞–ª—è–µ—Ç —Å–≤—è–∑–∫—É –∏–∑ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö"""

    if not SETTINGS[arb_type]['PRICE_CONVERGENCE_ENABLED']:
        return

    convergence_threshold = SETTINGS[arb_type]['PRICE_CONVERGENCE_THRESHOLD']

    if abs(spread) > convergence_threshold:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —ç—Ç–∞ —Å–≤—è–∑–∫–∞ —Ä–∞–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é
    previous_key = f"{arb_type}_{base}_{exchange1}_{exchange2}"
    if previous_key not in sent_arbitrage_opportunities:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π —Å–≤—è–∑–∫–∏
    current_time = time.time()
    notification_key = f"{arb_type}_{base}_{exchange1}_{exchange2}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (5 –º–∏–Ω—É—Ç)
    if (notification_key in last_convergence_notification and
            current_time - last_convergence_notification[notification_key] < 300):
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    last_convergence_notification[notification_key] = current_time

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
    if arb_type == 'SPOT':
        arb_type_name = "–°–ø–æ—Ç–æ–≤—ã–π"
        emoji = "üöÄ"
    elif arb_type == 'FUTURES':
        arb_type_name = "–§—å—é—á–µ—Ä—Å–Ω—ã–π"
        emoji = "üìä"
    else:
        arb_type_name = "–°–ø–æ—Ç-–§—å—é—á–µ—Ä—Å–Ω—ã–π"
        emoji = "‚ÜîÔ∏è"

    utc_plus_3 = timezone(timedelta(hours=3))
    current_time_str = datetime.now(utc_plus_3).strftime('%H:%M:%S')

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–º—ã
    def format_volume(vol):
        if vol is None:
            return "N/A"
        if vol >= 1_000_000:
            return f"${vol / 1_000_000:.1f}M"
        if vol >= 1_000:
            return f"${vol / 1_000:.1f}K"
        return f"${vol:.1f}"

    volume1_str = format_volume(volume1)
    volume2_str = format_volume(volume2)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    duration_str = format_duration(duration) if duration is not None else "N/A"

    # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –±–∏—Ä–∂
    if arb_type == 'SPOT':
        exchange1_config = SPOT_EXCHANGES[exchange1]
        exchange2_config = SPOT_EXCHANGES[exchange2]
        symbol1 = exchange1_config["symbol_format"](base)
        symbol2 = exchange2_config["symbol_format"](base)
        url1 = exchange1_config["url_format"](symbol1)
        url2 = exchange2_config["url_format"](symbol2)
    else:
        exchange1_config = FUTURES_EXCHANGES[exchange1]
        exchange2_config = FUTURES_EXCHANGES[exchange2]
        symbol1 = exchange1_config["symbol_format"](base)
        symbol2 = exchange2_config["symbol_format"](base)
        url1 = exchange1_config["url_format"](symbol1.replace(':USDT', ''))
        url2 = exchange2_config["url_format"](symbol2.replace(':USDT', ''))

    safe_base = html.escape(base)

    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    message = (
        f"üéØ <b>–¶–ï–ù–´ –°–†–ê–í–ù–ò–õ–ò–°–¨!</b> {emoji}\n\n"
        f"‚ñ´Ô∏è <b>–¢–∏–ø:</b> {arb_type_name} –∞—Ä–±–∏—Ç—Ä–∞–∂\n"
        f"‚ñ´Ô∏è <b>–ú–æ–Ω–µ—Ç–∞:</b> <code>{safe_base}</code>\n"
        f"‚ñ´Ô∏è <b>–†–∞–∑–Ω–∏—Ü–∞ —Ü–µ–Ω:</b> <code>{spread:.2f}%</code>\n"
        f"‚ñ´Ô∏è <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:</b> {duration_str}\n\n"

        f"üü¢ <b><a href='{url1}'>{exchange1.upper()}</a>:</b>\n"
        f"   üí∞ –¶–µ–Ω–∞: <code>${price1:.8f}</code>\n"
        f"   üìä –û–±—ä–µ–º: {volume1_str}\n\n"

        f"üîµ <b><a href='{url2}'>{exchange2.upper()}</a>:</b>\n"
        f"   üí∞ –¶–µ–Ω–∞: <code>${price2:.8f}</code>\n"
        f"   üìä –û–±—ä–µ–º: {volume2_str}\n\n"

        f"‚è∞ <i>{current_time_str}</i>\n"
        f"üîî <i>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ü–µ–Ω</i>"
    )

    await send_telegram_message(message)
    logger.info(
        f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ü–µ–Ω –¥–ª—è {base} ({arb_type}): {spread:.4f}%, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_str}")

    # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∫—É –∏–∑ –≤—Å–µ—Ö —Å–ª–æ–≤–∞—Ä–µ–π, —á—Ç–æ–±—ã –æ–Ω–∞ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∞—Å—å –≤ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö
    key = f"{arb_type}_{base}_{exchange1}_{exchange2}"
    if key in sent_arbitrage_opportunities:
        del sent_arbitrage_opportunities[key]
    if key in current_arbitrage_opportunities:
        del current_arbitrage_opportunities[key]
    if key in arbitrage_start_times:
        del arbitrage_start_times[key]
    if key in previous_arbitrage_opportunities:
        del previous_arbitrage_opportunities[key]

    logger.info(f"–°–≤—è–∑–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ—Å–ª–µ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ü–µ–Ω: {key}")

def update_arbitrage_duration(arb_type: str, base: str, exchange1: str, exchange2: str, spread: float):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"""
    key = f"{arb_type}_{base}_{exchange1}_{exchange2}"
    current_time = time.time()

    # –ï—Å–ª–∏ —Å–≤—è–∑–∫–∞ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram –∏ —Å–ø—Ä–µ–¥ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–æ—Ä–æ–≥ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ - –Ω–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å—á–µ—Ç
    if (key in sent_arbitrage_opportunities and
            SETTINGS[arb_type]['THRESHOLD_PERCENT'] <= spread <= SETTINGS[arb_type]['MAX_THRESHOLD_PERCENT'] and
            key not in arbitrage_start_times):
        arbitrage_start_times[key] = current_time
        previous_arbitrage_opportunities[key] = True
        logger.debug(f"–ù–∞—á–∞–ª–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –¥–ª—è {key}")

    # –ï—Å–ª–∏ —Å–ø—Ä–µ–¥ —É–ø–∞–ª –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ - –≤—ã—á–∏—Å–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –æ—á–∏—â–∞–µ–º
    elif (spread <= SETTINGS[arb_type]['PRICE_CONVERGENCE_THRESHOLD'] and
          key in arbitrage_start_times):
        start_time = arbitrage_start_times.pop(key)
        duration = current_time - start_time
        logger.debug(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –¥–ª—è {key}, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.0f} —Å–µ–∫")
        return duration

    return None

def update_current_arbitrage_opportunities(arb_type: str, base: str, exchange1: str, exchange2: str, spread: float,
                                           price1: float, price2: float, volume1: float = None, volume2: float = None,
                                           min_entry_amount: float = None, max_entry_amount: float = None,
                                           profit_min: dict = None, profit_max: dict = None,
                                           available_volume: float = None, order_book_volume: float = None,
                                           long_funding: float = None, short_funding: float = None):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–≤—è–∑–æ–∫)"""
    key = f"{arb_type}_{base}_{exchange1}_{exchange2}"
    current_time = time.time()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–≤—è–∑–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram
    if key in sent_arbitrage_opportunities:
        sent_arbitrage_opportunities[key].update({
            'spread': spread,
            'price1': price1,
            'price2': price2,
            'volume1': volume1,
            'volume2': volume2,
            'min_entry_amount': min_entry_amount,
            'max_entry_amount': max_entry_amount,
            'profit_min': profit_min,
            'profit_max': profit_max,
            'available_volume': available_volume,
            'order_book_volume': order_book_volume,
            'long_funding': long_funding,
            'short_funding': short_funding,
            'last_updated': current_time
        })

        current_arbitrage_opportunities[key] = sent_arbitrage_opportunities[key].copy()

def calculate_volatility(prices):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω"""
    if len(prices) < 2:
        return 0.0

    returns = []
    for i in range(1, len(prices)):
        if prices[i - 1] != 0:
            returns.append((prices[i] - prices[i - 1]) / prices[i - 1])

    if not returns:
        return 0.0

    return np.std(returns) * 100  # –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö

def update_price_history(arb_type: str, base: str, exchange: str, price: float):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"""
    key = f"{arb_type}_{base}_{exchange}"

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ü–µ–Ω—É
    price_history[key].append(price)

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
    if len(price_history[key]) > VOLATILITY_WINDOW:
        price_history[key] = price_history[key][-VOLATILITY_WINDOW:]

def check_volatility(arb_type: str, base: str, exchange: str, price: float) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø–æ—Ä–æ–≥"""
    key = f"{arb_type}_{base}_{exchange}"

    if key not in price_history:
        return True

    volatility = calculate_volatility(price_history[key])
    threshold = SETTINGS[arb_type]['VOLATILITY_THRESHOLD']

    logger.debug(f"–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –¥–ª—è {key}: {volatility:.2f}% (–ø–æ—Ä–æ–≥: {threshold}%)")

    return volatility <= threshold

def update_coin_volatility_history(base: str, price: float):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–±—â–µ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –º–æ–Ω–µ—Ç—ã"""
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ü–µ–Ω—É
    coin_volatility_history[base].append(price)

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
    if len(coin_volatility_history[base]) > COIN_VOLATILITY_WINDOW:
        coin_volatility_history[base] = coin_volatility_history[base][-COIN_VOLATILITY_WINDOW:]

def check_coin_volatility(base: str, arb_type: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—â—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –º–æ–Ω–µ—Ç—ã"""
    if base not in coin_volatility_history or len(coin_volatility_history[base]) < 2:
        return True

    volatility = calculate_volatility(coin_volatility_history[base])
    max_volatility = SETTINGS[arb_type].get('MAX_VOLATILITY_PERCENT', 15.0)

    logger.debug(f"–û–±—â–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –º–æ–Ω–µ—Ç—ã {base}: {volatility:.2f}% (–º–∞–∫—Å. –ø–æ—Ä–æ–≥: {max_volatility}%)")

    if volatility > max_volatility:
        logger.info(f"–ú–æ–Ω–µ—Ç–∞ {base} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏: {volatility:.2f}% > {max_volatility}%")
        return False

    return True

async def get_current_funding_rates():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ —Å—Ç–∞–≤–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ –≤—Å–µ—Ö –±–∏—Ä–∂"""
    global funding_rates_cache, last_funding_check

    current_time = time.time()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–≤–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑ –≤ —á–∞—Å
    if current_time - last_funding_check < SETTINGS['FUTURES']['FUNDING_CHECK_INTERVAL']:
        return funding_rates_cache

    funding_data = {}
    logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–æ–∫ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è...")

    for name, data in FUTURES_EXCHANGES_LOADED.items():
        if not SETTINGS['EXCHANGES'][name]['ENABLED']:
            continue

        exchange = data["api"]
        config = data["config"]

        if not config.get("supports_funding", False):
            continue

        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä—ã–Ω–∫–∏ —Ñ—å—é—á–µ—Ä—Å–æ–≤
            markets = exchange.markets
            for symbol, market in markets.items():
                try:
                    if config["is_futures"](market):
                        base = market['base']

                        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–≤–∫—É —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
                        funding_rate = await asyncio.get_event_loop().run_in_executor(
                            None, exchange.fetch_funding_rate, symbol
                        )

                        if funding_rate and 'fundingRate' in funding_rate:
                            rate = float(funding_rate['fundingRate']) * 100  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã

                            if base not in funding_data:
                                funding_data[base] = {}
                            funding_data[base][name] = rate

                            logger.debug(f"–°—Ç–∞–≤–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è {base} –Ω–∞ {name}: {rate:.4f}%")
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è {symbol} –Ω–∞ {name}: {e}")
                    continue

        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è {name}: {e}")

    funding_rates_cache = funding_data
    last_funding_check = current_time
    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã —Å—Ç–∞–≤–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è {len(funding_data)} –º–æ–Ω–µ—Ç")
    return funding_data

def calculate_funding_score(long_funding: float, short_funding: float) -> float:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ—Ü–µ–Ω–∫—É –≤—ã–≥–æ–¥–Ω–æ—Å—Ç–∏ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –î–ª—è –ª–æ–Ω–≥–∞: –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≥–æ–¥–Ω–æ (–º—ã –ø–æ–ª—É—á–∞–µ–º)
    # –î–ª—è —à–æ—Ä—Ç–∞: –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≥–æ–¥–Ω–æ (–º—ã –ø–æ–ª—É—á–∞–µ–º)
    long_score = -long_funding  # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –ª–æ–Ω–≥–∞
    short_score = short_funding

    total_score = long_score + short_score
    return total_score

def is_favorable_funding(long_funding: float, short_funding: float) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≥–æ–¥–Ω—ã–º"""
    funding_score = calculate_funding_score(long_funding, short_funding)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
    if funding_score > SETTINGS['FUTURES']['FUNDING_RATE_THRESHOLD']:
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞)
    if (SETTINGS['FUTURES']['MIN_FUNDING_RATE_TO_RECEIVE'] is not None and
            funding_score < SETTINGS['FUTURES']['MIN_FUNDING_RATE_TO_RECEIVE']):
        return False

    return True

def has_red_funding(long_funding: float, short_funding: float) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ '–∫—Ä–∞—Å–Ω—ã–º' (–æ—á–µ–Ω—å –Ω–µ–≤—ã–≥–æ–¥–Ω—ã–º)"""
    funding_score = calculate_funding_score(long_funding, short_funding)
    red_threshold = SETTINGS['FUTURES']['RED_FUNDING_THRESHOLD']
    
    # –ï—Å–ª–∏ –æ–±—â–∏–π score –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–æ—Ä–æ–≥ –∫—Ä–∞—Å–Ω–æ–≥–æ —Ñ–∞–Ω–¥–∏–Ω–≥–∞ - —Å—á–∏—Ç–∞–µ–º —Å–≤—è–∑–∫—É –Ω–µ–≤—ã–≥–æ–¥–Ω–æ–π
    return funding_score > red_threshold

def calculate_effective_profit_with_funding(base_profit: float, entry_amount: float,
                                            long_funding: float, short_funding: float,
                                            holding_hours: int = 8) -> float:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é –ø—Ä–∏–±—ã–ª—å —Å —É—á–µ—Ç–æ–º —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–ª–∏—è–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
    funding_impact = (short_funding - long_funding) * (holding_hours / 8) * entry_amount / 100

    # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–∏–±—ã–ª—å —Å —É—á–µ—Ç–æ–º —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
    effective_profit = base_profit + funding_impact
    return effective_profit

async def get_current_arbitrage_opportunities_page(page: int = 0, opportunities_per_page: int = 5):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–≤—è–∑–∫–∏
    filtered_opportunities = {}
    current_time = time.time()

    for key, opportunity in sent_arbitrage_opportunities.items():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–≤—è–∑–∫–∞ –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–∞ (—Ç–µ–ø–µ—Ä—å —Å–≤—è–∑–∫–∏ –Ω–µ —É–¥–∞–ª—è—é—Ç—Å—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏, —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
        # –ù–æ –≤—Å–µ –∂–µ —É–¥–∞–ª—è–µ–º –æ—á–µ–Ω—å —Å—Ç–∞—Ä—ã–µ —Å–≤—è–∑–∫–∏ (24 —á–∞—Å–∞) –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        if (current_time - opportunity['last_updated']) <= 86400:  # 24 —á–∞—Å–∞
            filtered_opportunities[key] = opportunity

    if not filtered_opportunities:
        return "üìä <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ —Å–≤—è–∑–∫–∏</b>\n\n" \
               "‚è≥ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.", 0, 0

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø—É –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
    spot_opportunities = []
    futures_opportunities = []
    spot_futures_opportunities = []

    for key, opportunity in filtered_opportunities.items():
        arb_type = opportunity['arb_type']
        duration = time.time() - opportunity['start_time']

        opportunity_info = {
            'base': opportunity['base'],
            'exchange1': opportunity['exchange1'],
            'exchange2': opportunity['exchange2'],
            'spread': opportunity['spread'],
            'price1': opportunity['price1'],
            'price2': opportunity['price2'],
            'min_entry_amount': opportunity.get('min_entry_amount'),
            'max_entry_amount': opportunity.get('max_entry_amount'),
            'profit_min': opportunity.get('profit_min'),
            'profit_max': opportunity.get('profit_max'),
            'available_volume': opportunity.get('available_volume'),
            'order_book_volume': opportunity.get('order_book_volume'),
            'long_funding': opportunity.get('long_funding'),
            'short_funding': opportunity.get('short_funding'),
            'duration': duration
        }

        if arb_type == 'SPOT':
            spot_opportunities.append(opportunity_info)
        elif arb_type == 'FUTURES':
            futures_opportunities.append(opportunity_info)
        else:
            spot_futures_opportunities.append(opportunity_info)

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–ø—Ä–µ–¥—É (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
    spot_opportunities.sort(key=lambda x: x['spread'], reverse=True)
    futures_opportunities.sort(key=lambda x: x['spread'], reverse=True)
    spot_futures_opportunities.sort(key=lambda x: x['spread'], reverse=True)

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    all_opportunities = spot_opportunities + futures_opportunities + spot_futures_opportunities
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    total_opportunities = len(all_opportunities)
    total_pages = (total_opportunities + opportunities_per_page - 1) // opportunities_per_page
    
    # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é
    if page >= total_pages:
        page = total_pages - 1
    if page < 0:
        page = 0

    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = page * opportunities_per_page
    end_idx = start_idx + opportunities_per_page
    page_opportunities = all_opportunities[start_idx:end_idx]

    utc_plus_3 = timezone(timedelta(hours=3))
    current_time_str = datetime.now(utc_plus_3).strftime('%H:%M:%S')

    message = f"üìä <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ —Å–≤—è–∑–∫–∏</b> (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages})\n\n"

    if not page_opportunities:
        message += "‚è≥ –ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π."
    else:
        for i, opp in enumerate(page_opportunities, start=1):
            duration_str = format_duration(opp['duration'])

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
            if opp in spot_opportunities:
                arb_type_emoji = "üöÄ"
                arb_type_name = "–°–ø–æ—Ç"
            elif opp in futures_opportunities:
                arb_type_emoji = "üìä"
                arb_type_name = "–§—å—é—á–µ—Ä—Å—ã"
            else:
                arb_type_emoji = "‚ÜîÔ∏è"
                arb_type_name = "–°–ø–æ—Ç-–§—å—é—á–µ—Ä—Å—ã"

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –≤—Ö–æ–¥–∞ –∏ –ø—Ä–∏–±—ã–ª—å
            entry_amount_str = f"${opp['min_entry_amount']:.2f}-${opp['max_entry_amount']:.2f}" if opp.get(
                'min_entry_amount') and opp.get('max_entry_amount') else "N/A"

            profit_str = "N/A"
            if opp.get('profit_min') and opp.get('profit_max'):
                profit_min_net = opp['profit_min'].get('net', 0)
                profit_max_net = opp['profit_max'].get('net', 0)
                profit_str = f"${profit_min_net:.2f}-${profit_max_net:.2f}"

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –æ–±—ä–µ–º
            available_volume_str = f"{opp['available_volume']:.6f} {opp['base']}" if opp.get(
                'available_volume') else "N/A"
            order_book_volume_str = f"${opp['order_book_volume']:.2f}" if opp.get('order_book_volume') else "N/A"

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤
            funding_info = ""
            if opp.get('long_funding') is not None and opp.get('short_funding') is not None:
                funding_score = calculate_funding_score(opp['long_funding'], opp['short_funding'])
                funding_emoji = "üü¢"
                if has_red_funding(opp['long_funding'], opp['short_funding']):
                    funding_emoji = "üî¥"
                funding_info = f"\n      {funding_emoji} –§–∞–Ω–¥–∏–Ω–≥: {funding_score:.4f}%"

            message += (
                f"{arb_type_emoji} <b>{arb_type_name}</b> | <code>{opp['base']}</code>\n"
                f"   üìà –†–∞–∑–Ω–∏—Ü–∞: {opp['spread']:.2f}%\n"
                f"   üü¢ {opp['exchange1'].upper()} ‚Üí üî¥ {opp['exchange2'].upper()}\n"
                f"   üí∞ –°—É–º–º–∞ –≤—Ö–æ–¥–∞: {entry_amount_str}\n"
                f"   üíµ –ü—Ä–∏–±—ã–ª—å: {profit_str}"
                f"{funding_info}\n"
                f"   üìä –û–±—ä–µ–º: {available_volume_str}\n"
                f"   ‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_str}\n\n"
            )

    message += f"‚è∞ <i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time_str}</i>\n"
    message += f"üìà <i>–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–≤—è–∑–æ–∫: {total_opportunities}</i>"

    return message, total_pages, page

def cleanup_old_opportunities():
    """–û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)"""
    current_time = time.time()
    keys_to_remove = []

    for key, opportunity in sent_arbitrage_opportunities.items():
        # –£–¥–∞–ª—è–µ–º –µ—Å–ª–∏ —Å–≤—è–∑–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
        if current_time - opportunity['last_updated'] > 86400:
            keys_to_remove.append(key)

    for key in keys_to_remove:
        del sent_arbitrage_opportunities[key]
        if key in current_arbitrage_opportunities:
            del current_arbitrage_opportunities[key]
        if key in arbitrage_start_times:
            del arbitrage_start_times[key]
        logger.debug(f"–£–¥–∞–ª–µ–Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∞—è —Å–≤—è–∑–∫–∞: {key}")

def load_markets_sync(exchange):
    try:
        exchange.load_markets()
        logger.info(f"–†—ã–Ω–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è {exchange.id}")
        return exchange
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {exchange.id}: {e}")
        return None

async def fetch_ticker_data(exchange, symbol: str):
    try:
        ticker = await asyncio.get_event_loop().run_in_executor(
            None, exchange.fetch_ticker, symbol
        )

        if ticker:
            price = float(ticker['last']) if ticker.get('last') else None

            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–º –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            volume = None
            if ticker.get('quoteVolume') is not None:
                volume = float(ticker['quoteVolume'])
            elif ticker.get('baseVolume') is not None and price:
                volume = float(ticker['baseVolume']) * price

            logger.debug(f"–î–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–∞ {symbol} –Ω–∞ {exchange.id}: —Ü–µ–Ω–∞={price}, –æ–±—ä–µ–º={volume}")

            return {
                'price': price,
                'volume': volume,
                'symbol': symbol
            }
        return None
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö {symbol} –Ω–∞ {exchange.id}: {e}")
        return None

async def fetch_order_book(exchange, symbol: str, depth: int = None):
    if depth is None:
        depth = SETTINGS['SPOT']['ORDER_BOOK_DEPTH']

    try:
        order_book = await asyncio.get_event_loop().run_in_executor(
            None, exchange.fetch_order_book, symbol, depth)
        logger.debug(f"–°—Ç–∞–∫–∞–Ω –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è {symbol} –Ω–∞ {exchange.id}")
        return order_book
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ —Å—Ç–∞–∫–∞–Ω–∞ {symbol} –Ω–∞ {exchange.id}: {e}")
        return None

def calculate_available_volume(order_book, side: str, max_impact_percent: float):
    if not order_book:
        return 0, 0

    if side == 'buy':
        asks = order_book['asks']
        if not asks:
            return 0, 0
        best_ask = asks[0][0]
        max_allowed_price = best_ask * (1 + max_impact_percent / 100)
        total_volume = 0
        total_value = 0
        for price, volume in asks:
            if price > max_allowed_price:
                break
            total_volume += volume
            total_value += volume * price
        return total_volume, total_value
    elif side == 'sell':
        bids = order_book['bids']
        if not bids:
            return 0, 0
        best_bid = bids[0][0]
        min_allowed_price = best_bid * (1 - max_impact_percent / 100)
        total_volume = 0
        total_value = 0
        for price, volume in bids:
            if price < min_allowed_price:
                break
            total_volume += volume
            total_value += volume * price
        return total_volume, total_value
    return 0, 0

async def check_deposit_withdrawal_status(exchange, currency: str, check_type: str = 'deposit'):
    try:
        try:
            currencies = await asyncio.get_event_loop().run_in_executor(
                None, exchange.fetch_currencies)
            if currency in currencies:
                currency_info = currencies[currency]
                if check_type == 'deposit':
                    status = currency_info.get('deposit', False)
                else:
                    status = currency_info.get('withdraw', False)
                logger.debug(
                    f"–°—Ç–∞—Ç—É—Å {check_type} –¥–ª—è {currency} –Ω–∞ {exchange.id}: {status} (—á–µ—Ä–µ–∑ fetch_currencies)"
                )
                return status
        except (ccxt.NotSupported, AttributeError) as e:
            logger.debug(
                f"fetch_currencies –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ {exchange.id}: {e}")

        try:
            symbol = f"{currency}/USDT"
            market = exchange.market(symbol)
            if market:
                if check_type == 'deposit':
                    status = market.get('deposit', True)
                else:
                    status = market.get('withdraw', True)
                logger.debug(
                    f"–°—Ç–∞—Ç—É—Å {check_type} –¥–ª—è {currency} –Ω–∞ {exchange.id}: {status} (—á–µ—Ä–µ–∑ market)"
                )
                return status
        except (ccxt.BadSymbol, KeyError) as e:
            logger.debug(
                f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ market –¥–ª—è {currency} –Ω–∞ {exchange.id}: {e}")

        try:
            currency_info = exchange.currency(currency)
            if check_type == 'deposit':
                status = currency_info.get(
                    'active', False) and currency_info.get('deposit', True)
            else:
                status = currency_info.get(
                    'active', False) and currency_info.get('withdraw', True)
            logger.debug(
                f"–°—Ç–∞—Ç—É—Å {check_type} –¥–ª—è {currency} –Ω–∞ {exchange.id}: {status} (—á–µ—Ä–µ–∑ currency)"
            )
            return status
        except (KeyError, AttributeError) as e:
            logger.debug(
                f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ currency –¥–ª—è {currency} –Ω–∞ {exchange.id}: {e}"
            )

        logger.debug(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å {check_type} –¥–ª—è {currency} –Ω–∞ {exchange.id}, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º True"
        )
        return True
    except Exception as e:
        logger.warning(
            f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {check_type} {currency} –Ω–∞ {exchange.id}: {e}")
        return True

def calculate_min_entry_amount(buy_price: float, sell_price: float, min_profit: float, buy_fee_percent: float,
                               sell_fee_percent: float) -> float:
    profit_per_unit = sell_price * (1 - sell_fee_percent) - buy_price * (1 + buy_fee_percent)
    if profit_per_unit <= 0:
        return 0
    min_amount = min_profit / profit_per_unit
    return min_amount * buy_price

def calculate_profit(buy_price: float, sell_price: float, amount: float, buy_fee_percent: float,
                     sell_fee_percent: float) -> dict:
    buy_cost = amount * buy_price * (1 + buy_fee_percent)
    sell_revenue = amount * sell_price * (1 - sell_fee_percent)
    net_profit = sell_revenue - buy_cost
    profit_percent = (net_profit / buy_cost) * 100 if buy_cost > 0 else 0

    return {
        "net": net_profit,
        "percent": profit_percent,
        "entry_amount": amount * buy_price
    }

async def load_spot_exchanges():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–æ—Ç–æ–≤—ã–µ –±–∏—Ä–∂–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    global SPOT_EXCHANGES_LOADED, LAST_EXCHANGE_SETTINGS

    exchanges = {}
    for name, config in SPOT_EXCHANGES.items():
        if not SETTINGS['EXCHANGES'][name]['ENABLED']:
            continue

        try:
            # –î–ª—è BloFin —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø —Ä—ã–Ω–∫–∞
            if name == "blofin":
                config["api"].options['defaultType'] = 'spot'

            exchange = await asyncio.get_event_loop().run_in_executor(
                None, load_markets_sync, config["api"])
            if exchange:
                exchanges[name] = {"api": exchange, "config": config}
                logger.info(f"{name.upper()} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è BloFin
                if name == "blofin":
                    spot_markets = [m for m in exchange.markets.values() if config["is_spot"](m)]
                    logger.info(f"BloFin —Å–ø–æ—Ç–æ–≤—ã–µ —Ä—ã–Ω–∫–∏: {len(spot_markets)}")
                    for market in spot_markets[:5]:  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 5 —Ä—ã–Ω–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                        logger.info(f"BloFin —Ä—ã–Ω–æ–∫: {market['symbol']}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {name}: {e}")

    SPOT_EXCHANGES_LOADED = exchanges
    LAST_EXCHANGE_SETTINGS = SETTINGS['EXCHANGES'].copy()
    return exchanges

async def load_futures_exchanges():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ—å—é—á–µ—Ä—Å–Ω—ã–µ –±–∏—Ä–∂–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    global FUTURES_EXCHANGES_LOADED, LAST_EXCHANGE_SETTINGS

    exchanges = {}
    for name, config in FUTURES_EXCHANGES.items():
        if not SETTINGS['EXCHANGES'][name]['ENABLED']:
            continue

        try:
            # –î–ª—è BloFin —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø —Ä—ã–Ω–∫–∞
            if name == "blofin":
                config["api"].options['defaultType'] = 'swap'

            exchange = await asyncio.get_event_loop().run_in_executor(
                None, load_markets_sync, config["api"]
            )
            if exchange:
                exchanges[name] = {
                    "api": exchange,
                    "config": config
                }
                logger.info(f"{name.upper()} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {name}: {e}")

    FUTURES_EXCHANGES_LOADED = exchanges
    LAST_EXCHANGE_SETTINGS = SETTINGS['EXCHANGES'].copy()
    return exchanges

async def check_spot_arbitrage():
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø–æ—Ç–æ–≤–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞")

    if not SETTINGS['SPOT']['ENABLED']:
        logger.info("–°–ø–æ—Ç–æ–≤—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂ –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂
    await load_spot_exchanges()

    if len(SPOT_EXCHANGES_LOADED) < SETTINGS['SPOT']['MIN_EXCHANGES_FOR_PAIR']:
        logger.error(
            f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∏—Ä–∂ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {SETTINGS['SPOT']['MIN_EXCHANGES_FOR_PAIR']})")
        return

    # –°–±–æ—Ä –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
    all_pairs = defaultdict(set)
    for name, data in SPOT_EXCHANGES_LOADED.items():
        exchange = data["api"]
        config = data["config"]
        for symbol, market in exchange.markets.items():
            try:
                if config["is_spot"](market):
                    base = market['base']
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–æ–Ω–µ—Ç—ã –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
                    if base in config.get("blacklist", []):
                        continue
                    all_pairs[base].add((name, symbol))
            except Exception as e:
                logger.warning(
                    f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä—ã {symbol} –Ω–∞ {name}: {e}")

    valid_pairs = {
        base: list(pairs)
        for base, pairs in all_pairs.items()
        if len(pairs) >= SETTINGS['SPOT']['MIN_EXCHANGES_FOR_PAIR']
    }

    if not valid_pairs:
        logger.error("–ù–µ—Ç –ø–∞—Ä, —Ç–æ—Ä–≥—É–µ–º—ã—Ö —Ö–æ—Ç—è –±—ã –Ω–∞ –¥–≤—É—Ö –±–∏—Ä–∂–∞—Ö")
        return

    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(valid_pairs)} –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

    while SETTINGS['SPOT']['ENABLED']:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∏—Ä–∂
            if LAST_EXCHANGE_SETTINGS != SETTINGS['EXCHANGES']:
                logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–∏—Ä–∂. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–æ—Ç–æ–≤—ã–µ –±–∏—Ä–∂–∏...")
                await load_spot_exchanges()

                # –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ä –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–∏—Ä–∂
                all_pairs = defaultdict(set)
                for name, data in SPOT_EXCHANGES_LOADED.items():
                    exchange = data["api"]
                    config = data["config"]
                    for symbol, market in exchange.markets.items():
                        try:
                            if config["is_spot"](market):
                                base = market['base']
                                if base in config.get("blacklist", []):
                                    continue
                                all_pairs[base].add((name, symbol))
                        except Exception as e:
                            logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä—ã {symbol} –Ω–∞ {name}: {e}")

                valid_pairs = {
                    base: list(pairs)
                    for base, pairs in all_pairs.items()
                    if len(pairs) >= SETTINGS['SPOT']['MIN_EXCHANGES_FOR_PAIR']
                }

                if not valid_pairs:
                    logger.error("–ù–µ—Ç –ø–∞—Ä, —Ç–æ—Ä–≥—É–µ–º—ã—Ö —Ö–æ—Ç—è –±—ã –Ω–∞ –¥–≤—É—Ö –±–∏—Ä–∂–∞—Ö –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏")
                    await asyncio.sleep(SETTINGS['SPOT']['CHECK_INTERVAL'])
                    continue

            found_opportunities = 0
            for base, exchange_symbols in valid_pairs.items():
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –º–æ–Ω–µ—Ç—ã
                    if not check_coin_volatility(base, 'SPOT'):
                        continue

                    ticker_data = {}

                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –≤—Å–µ—Ö –±–∏—Ä–∂
                    for name, symbol in exchange_symbols:
                        try:
                            data = await fetch_ticker_data(
                                SPOT_EXCHANGES_LOADED[name]["api"], symbol)
                            if data and data['price'] is not None:
                                # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
                                update_price_history('SPOT', base, name, data['price'])
                                update_coin_volatility_history(base, data['price'])

                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                                if not check_volatility('SPOT', base, name, data['price']):
                                    logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º {base} –Ω–∞ {name} –∏–∑-–∑–∞ –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏")
                                    continue

                                # –ï—Å–ª–∏ –æ–±—ä–µ–º –∏–∑–≤–µ—Å—Ç–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º
                                if data['volume'] is None:
                                    logger.debug(f"–û–±—ä–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω –¥–ª—è {symbol} –Ω–∞ {name}, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
                                    ticker_data[name] = data
                                elif data['volume'] >= SETTINGS['SPOT']['MIN_VOLUME_USD']:
                                    ticker_data[name] = data
                                else:
                                    logger.debug(
                                        f"–û–±—ä–µ–º {symbol} –Ω–∞ {name} —Å–ª–∏—à–∫–æ–º –º–∞–ª: {data['volume']}"
                                    )
                            else:
                                logger.debug(
                                    f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} –Ω–∞ {name}")
                        except Exception as e:
                            logger.warning(
                                f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö {base} –Ω–∞ {name}: {e}"
                            )

                    if len(ticker_data) < SETTINGS['SPOT']['MIN_EXCHANGES_FOR_PAIR']:
                        continue

                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏—Ä–∂–∏ –ø–æ —Ü–µ–Ω–µ
                    sorted_data = sorted(ticker_data.items(),
                                         key=lambda x: x[1]['price'])
                    min_ex = sorted_data[0]  # –°–∞–º–∞—è –Ω–∏–∑–∫–∞—è —Ü–µ–Ω–∞ (–ø–æ–∫—É–ø–∫–∞)
                    max_ex = sorted_data[-1]  # –°–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞ (–ø—Ä–æ–¥–∞–∂–∞)

                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ø—Ä–µ–¥
                    spread = (max_ex[1]['price'] -
                              min_ex[1]['price']) / min_ex[1]['price'] * 100

                    logger.debug(
                        f"–ü–∞—Ä–∞ {base}: —Å–ø—Ä–µ–¥ {spread:.2f}% (min: {min_ex[0]} {min_ex[1]['price']}, max: {max_ex[0]} {max_ex[1]['price']})"
                    )

                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–≤—è–∑–æ–∫)
                    update_current_arbitrage_opportunities(
                        'SPOT', base, min_ex[0], max_ex[0], spread,
                        min_ex[1]['price'], max_ex[1]['price'],
                        min_ex[1]['volume'], max_ex[1]['volume']
                    )

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å —Ü–µ–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–≤—è–∑–æ–∫)
                    duration = update_arbitrage_duration('SPOT', base, min_ex[0], max_ex[0], spread)
                    if duration is not None:
                        await send_price_convergence_notification(
                            'SPOT', base, min_ex[0], max_ex[0],
                            min_ex[1]['price'], max_ex[1]['price'], spread,
                            min_ex[1]['volume'], max_ex[1]['volume'], duration
                        )

                    if SETTINGS['SPOT']['THRESHOLD_PERCENT'] <= spread <= SETTINGS['SPOT']['MAX_THRESHOLD_PERCENT']:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–µ–ø–æ–∑–∏—Ç–∞ –∏ –≤—ã–≤–æ–¥–∞
                        deposit_available = await check_deposit_withdrawal_status(
                            SPOT_EXCHANGES_LOADED[max_ex[0]]["api"], base, 'deposit')
                        withdrawal_available = await check_deposit_withdrawal_status(
                            SPOT_EXCHANGES_LOADED[min_ex[0]]["api"], base, 'withdrawal')

                        logger.debug(
                            f"–ü–∞—Ä–∞ {base}: –¥–µ–ø–æ–∑–∏—Ç={deposit_available}, –≤—ã–≤–æ–¥={withdrawal_available}"
                        )

                        if not (deposit_available and withdrawal_available):
                            logger.debug(
                                f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º {base}: –¥–µ–ø–æ–∑–∏—Ç –∏–ª–∏ –≤—ã–≤–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                            )
                            continue

                        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–∫–∞–Ω—ã –æ—Ä–¥–µ—Ä–æ–≤
                        buy_exchange = SPOT_EXCHANGES_LOADED[min_ex[0]]["api"]
                        sell_exchange = SPOT_EXCHANGES_LOADED[max_ex[0]]["api"]
                        buy_symbol = min_ex[1]['symbol']
                        sell_symbol = max_ex[1]['symbol']

                        buy_order_book, sell_order_book = await asyncio.gather(
                            fetch_order_book(buy_exchange, buy_symbol),
                            fetch_order_book(sell_exchange, sell_symbol))

                        if not buy_order_book or not sell_order_book:
                            logger.debug(
                                f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º {base}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞–∫–∞–Ω–∞")
                            continue

                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –æ–±—ä–µ–º –∏–∑ —Å—Ç–∞–∫–∞–Ω–∞
                        buy_volume, buy_value = calculate_available_volume(
                            buy_order_book, 'buy', SETTINGS['SPOT']['MAX_IMPACT_PERCENT'])
                        sell_volume, sell_value = calculate_available_volume(
                            sell_order_book, 'sell', SETTINGS['SPOT']['MAX_IMPACT_PERCENT'])
                        available_volume = min(buy_volume, sell_volume)
                        order_book_volume = min(buy_value, sell_value)

                        logger.debug(
                            f"–ü–∞—Ä–∞ {base}: –¥–æ—Å—Ç—É–ø–Ω—ã–π –æ–±—ä–µ–º {available_volume}, –æ–±—ä–µ–º —Å—Ç–∞–∫–∞–Ω–∞ ${order_book_volume:.2f}"
                        )

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º —Å—Ç–∞–∫–∞–Ω–∞
                        if order_book_volume < SETTINGS['SPOT']['MIN_ORDER_BOOK_VOLUME']:
                            logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º {base}: –æ–±—ä–µ–º —Å—Ç–∞–∫–∞–Ω–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª: ${order_book_volume:.2f}")
                            continue

                        if available_volume <= 0:
                            continue

                        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏
                        buy_fee = SPOT_EXCHANGES_LOADED[min_ex[0]]["config"]["taker_fee"]
                        sell_fee = SPOT_EXCHANGES_LOADED[max_ex[0]]["config"]["taker_fee"]

                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –¥–ª—è MIN_NET_PROFIT_USD
                        min_amount_for_profit = calculate_min_entry_amount(
                            buy_price=min_ex[1]['price'],
                            sell_price=max_ex[1]['price'],
                            min_profit=SETTINGS['SPOT']['MIN_NET_PROFIT_USD'],
                            buy_fee_percent=buy_fee,
                            sell_fee_percent=sell_fee)

                        if min_amount_for_profit <= 0:
                            logger.debug(
                                f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º {base}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –ø—Ä–∏–±—ã–ª—å")
                            continue

                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—É—é —Å—É–º–º—É –≤—Ö–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –æ–±—ä–µ–º–∞
                        max_possible_amount = min(
                            available_volume * min_ex[1]['price'],
                            SETTINGS['SPOT']['MAX_ENTRY_AMOUNT_USDT'],
                            order_book_volume)

                        max_entry_amount = max_possible_amount
                        min_entry_amount = max(min_amount_for_profit,
                                               SETTINGS['SPOT']['MIN_ENTRY_AMOUNT_USDT'])

                        if min_entry_amount > max_entry_amount:
                            logger.debug(
                                f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º {base}: min_entry_amount > max_entry_amount"
                            )
                            continue

                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å
                        profit_min = calculate_profit(
                            buy_price=min_ex[1]['price'],
                            sell_price=max_ex[1]['price'],
                            amount=min_entry_amount / min_ex[1]['price'],
                            buy_fee_percent=buy_fee,
                            sell_fee_percent=sell_fee)

                        profit_max = calculate_profit(
                            buy_price=min_ex[1]['price'],
                            sell_price=max_ex[1]['price'],
                            amount=max_possible_amount / min_ex[1]['price'],
                            buy_fee_percent=buy_fee,
                            sell_fee_percent=sell_fee)

                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        utc_plus_3 = timezone(timedelta(hours=3))
                        current_time = datetime.now(utc_plus_3).strftime(
                            '%H:%M:%S')

                        def format_volume(vol):
                            if vol is None:
                                return "N/A"
                            if vol >= 1_000_000:
                                return f"${vol / 1_000_000:.1f}M"
                            if vol >= 1_000:
                                return f"${vol / 1_000:.1f}K"
                            return f"${vol:.1f}"

                        min_volume = format_volume(min_ex[1]['volume'])
                        max_volume = format_volume(max_ex[1]['volume'])

                        safe_base = html.escape(base)
                        buy_exchange_config = SPOT_EXCHANGES[min_ex[0]]
                        sell_exchange_config = SPOT_EXCHANGES[max_ex[0]]

                        buy_url = buy_exchange_config["url_format"](buy_symbol)
                        sell_url = sell_exchange_config["url_format"](
                            sell_symbol)
                        withdraw_url = buy_exchange_config["withdraw_url"](
                            base)
                        deposit_url = sell_exchange_config["deposit_url"](base)

                        message = (
                            f"üöÄ <b>–°–ø–æ—Ç–æ–≤—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂:</b> <code>{safe_base}</code>\n"
                            f"‚ñ´Ô∏è <b>–†–∞–∑–Ω–∏—Ü–∞ —Ü–µ–Ω:</b> {spread:.2f}%\n"
                            f"‚ñ´Ô∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–π –æ–±—ä–µ–º:</b> {available_volume:.6f} {safe_base}\n"
                            f"‚ñ´Ô∏è <b>–û–±—ä–µ–º —Å—Ç–∞–∫–∞–Ω–∞:</b> ${order_book_volume:.2f}\n"
                            f"‚ñ´Ô∏è <b>–°—É–º–º–∞ –≤—Ö–æ–¥–∞:</b> ${min_entry_amount:.2f}-${max_entry_amount:.2f}\n\n"
                            f"üü¢ <b>–ü–æ–∫—É–ø–∫–∞ –Ω–∞ <a href='{buy_url}'>{min_ex[0].upper()}</a>:</b> ${min_ex[1]['price']:.8f}\n"
                            f"   <b>–û–±—ä—ë–º:</b> {min_volume}\n"
                            f"   <b>–ö–æ–º–∏—Å—Å–∏—è:</b> {buy_fee * 100:.2f}%\n"
                            f"   <b><a href='{withdraw_url}'>–í—ã–≤–æ–¥</a></b>\n\n"
                            f"üî¥ <b>–ü—Ä–æ–¥–∞–∂–∞ –Ω–∞ <a href='{sell_url}'>{max_ex[0].upper()}</a>:</b> ${max_ex[1]['price']:.8f}\n"
                            f"   <b>–û–±—ä—ë–º:</b> {max_volume}\n"
                            f"   <b>–ö–æ–º–∏—Å—Å–∏—è:</b> {sell_fee * 100:.2f}%\n"
                            f"   <b><a href='{deposit_url}'>–î–µ–ø–æ–∑–∏—Ç</a></b>\n\n"
                            f"üí∞Ô∏è <b>–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å:</b> ${profit_min['net']:.2f}-${profit_max['net']:.2f} ({profit_max['percent']:.2f}%)\n\n"
                            f"‚è± {current_time}\n")

                        logger.info(
                            f"–ù–∞–π–¥–µ–Ω–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å: {base} ({spread:.2f}%)"
                        )

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
                        await send_telegram_message(message)

                        # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∫—É –≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
                        add_opportunity_to_sent(
                            'SPOT', base, min_ex[0], max_ex[0], spread,
                            min_ex[1]['price'], max_ex[1]['price'],
                            min_ex[1]['volume'], max_ex[1]['volume'],
                            min_entry_amount, max_entry_amount, profit_min, profit_max,
                            available_volume, order_book_volume
                        )

                        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                        update_current_arbitrage_opportunities(
                            'SPOT', base, min_ex[0], max_ex[0], spread,
                            min_ex[1]['price'], max_ex[1]['price'],
                            min_ex[1]['volume'], max_ex[1]['volume'],
                            min_entry_amount, max_entry_amount, profit_min, profit_max,
                            available_volume, order_book_volume
                        )

                        found_opportunities += 1

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä—ã {base}: {e}")

            # –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
            cleanup_old_opportunities()

            logger.info(
                f"–¶–∏–∫–ª —Å–ø–æ—Ç–æ–≤–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {found_opportunities}")
            await asyncio.sleep(SETTINGS['SPOT']['CHECK_INTERVAL'])

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ —Å–ø–æ—Ç–æ–≤–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞: {e}")
            await asyncio.sleep(60)

async def check_futures_arbitrage():
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞")

    if not SETTINGS['FUTURES']['ENABLED']:
        logger.info("–§—å—é—á–µ—Ä—Å–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂ –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂
    await load_futures_exchanges()

    if len(FUTURES_EXCHANGES_LOADED) < SETTINGS['FUTURES']['MIN_EXCHANGES_FOR_PAIR']:
        logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∏—Ä–∂ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {SETTINGS['FUTURES']['MIN_EXCHANGES_FOR_PAIR']})")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
    funding_rates = await get_current_funding_rates()

    # –°–±–æ—Ä –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä USDT
    all_pairs = defaultdict(set)
    for name, data in FUTURES_EXCHANGES_LOADED.items():
        exchange = data["api"]
        config = data["config"]
        for symbol, market in exchange.markets.items():
            try:
                if config["is_futures"](market):
                    base = market['base']
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–æ–Ω–µ—Ç—ã –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
                    if base in config.get("blacklist", []):
                        continue
                    all_pairs[base].add((name, symbol))
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä—ã {symbol} –Ω–∞ {name}: {e}")

    valid_pairs = {
        base: list(pairs) for base, pairs in all_pairs.items()
        if len(pairs) >= SETTINGS['FUTURES']['MIN_EXCHANGES_FOR_PAIR']
    }

    if not valid_pairs:
        logger.error("–ù–µ—Ç —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö USDT –ø–∞—Ä, —Ç–æ—Ä–≥—É–µ–º—ã—Ö —Ö–æ—Ç—è –±—ã –Ω–∞ –¥–≤—É—Ö –±–∏—Ä–∂–∞—Ö")
        return

    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(valid_pairs)} —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö USDT –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

    while SETTINGS['FUTURES']['ENABLED']:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∏—Ä–∂
            if LAST_EXCHANGE_SETTINGS != SETTINGS['EXCHANGES']:
                logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–∏—Ä–∂. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ—å—é—á–µ—Ä—Å–Ω—ã–µ –±–∏—Ä–∂–∏...")
                await load_futures_exchanges()

                # –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ä –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–∏—Ä–∂
                all_pairs = defaultdict(set)
                for name, data in FUTURES_EXCHANGES_LOADED.items():
                    exchange = data["api"]
                    config = data["config"]
                    for symbol, market in exchange.markets.items():
                        try:
                            if config["is_futures"](market):
                                base = market['base']
                                if base in config.get("blacklist", []):
                                    continue
                                all_pairs[base].add((name, symbol))
                        except Exception as e:
                            logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä—ã {symbol} –Ω–∞ {name}: {e}")

                valid_pairs = {
                    base: list(pairs) for base, pairs in all_pairs.items()
                    if len(pairs) >= SETTINGS['FUTURES']['MIN_EXCHANGES_FOR_PAIR']
                }

                if not valid_pairs:
                    logger.error("–ù–µ—Ç —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö USDT –ø–∞—Ä, —Ç–æ—Ä–≥—É–µ–º—ã—Ö —Ö–æ—Ç—è –±—ã –Ω–∞ –¥–≤—É—Ö –±–∏—Ä–∂–∞—Ö –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏")
                    await asyncio.sleep(SETTINGS['FUTURES']['CHECK_INTERVAL'])
                    continue

            found_opportunities = 0
            for base, exchange_symbols in valid_pairs.items():
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –º–æ–Ω–µ—Ç—ã
                    if not check_coin_volatility(base, 'FUTURES'):
                        continue

                    ticker_data = {}

                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –≤—Å–µ—Ö –±–∏—Ä–∂
                    for name, symbol in exchange_symbols:
                        try:
                            data = await fetch_ticker_data(FUTURES_EXCHANGES_LOADED[name]["api"], symbol)
                            if data and data['price'] is not None:
                                # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
                                update_price_history('FUTURES', base, name, data['price'])
                                update_coin_volatility_history(base, data['price'])

                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                                if not check_volatility('FUTURES', base, name, data['price']):
                                    logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º {base} –Ω–∞ {name} –∏–∑-–∑–∞ –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏")
                                    continue

                                # –ï—Å–ª–∏ –æ–±—ä–µ–º –∏–∑–≤–µ—Å—Ç–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º
                                if data['volume'] is None:
                                    logger.debug(f"–û–±—ä–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω –¥–ª—è {symbol} –Ω–∞ {name}, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
                                    ticker_data[name] = data
                                elif data['volume'] >= SETTINGS['FUTURES']['MIN_VOLUME_USD']:
                                    ticker_data[name] = data
                                else:
                                    logger.debug(f"–û–±—ä–µ–º {symbol} –Ω–∞ {name} —Å–ª–∏—à–∫–æ–º –º–∞–ª: {data['volume']}")
                            else:
                                logger.debug(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} –Ω–∞ {name}")
                        except Exception as e:
                            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö {base} –Ω–∞ {name}: {e}")

                    if len(ticker_data) < SETTINGS['FUTURES']['MIN_EXCHANGES_FOR_PAIR']:
                        continue

                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏—Ä–∂–∏ –ø–æ —Ü–µ–Ω–µ
                    sorted_data = sorted(ticker_data.items(), key=lambda x: x[1]['price'])
                    min_ex = sorted_data[0]  # –°–∞–º–∞—è –Ω–∏–∑–∫–∞—è —Ü–µ–Ω–∞ (–ø–æ–∫—É–ø–∫–∞)
                    max_ex = sorted_data[-1]  # –°–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞ (–ø—Ä–æ–¥–∞–∂–∞)

                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ø—Ä–µ–¥
                    spread = (max_ex[1]['price'] - min_ex[1]['price']) / min_ex[1]['price'] * 100

                    logger.debug(
                        f"–ü–∞—Ä–∞ {base}: —Å–ø—Ä–µ–¥ {spread:.2f}% (min: {min_ex[0]} {min_ex[1]['price']}, max: {max_ex[0]} {max_ex[1]['price']})")

                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–≤—è–∑–æ–∫)
                    update_current_arbitrage_opportunities(
                        'FUTURES', base, min_ex[0], max_ex[0], spread,
                        min_ex[1]['price'], max_ex[1]['price'],
                        min_ex[1]['volume'], max_ex[1]['volume']
                    )

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å —Ü–µ–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–≤—è–∑–æ–∫)
                    duration = update_arbitrage_duration('FUTURES', base, min_ex[0], max_ex[0], spread)
                    if duration is not None:
                        await send_price_convergence_notification(
                            'FUTURES', base, min_ex[0], max_ex[0],
                            min_ex[1]['price'], max_ex[1]['price'], spread,
                            min_ex[1]['volume'], max_ex[1]['volume'], duration
                        )

                    if SETTINGS['FUTURES']['THRESHOLD_PERCENT'] <= spread <= SETTINGS['FUTURES'][
                        'MAX_THRESHOLD_PERCENT']:

                        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–≤–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ–±–µ–∏—Ö –±–∏—Ä–∂
                        long_funding = funding_rates.get(base, {}).get(min_ex[0], 0)
                        short_funding = funding_rates.get(base, {}).get(max_ex[0], 0)

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–≥–æ–¥–Ω–æ—Å—Ç—å —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
                        if not is_favorable_funding(long_funding, short_funding):
                            logger.debug(
                                f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º {base} –∏–∑-–∑–∞ –Ω–µ–≤—ã–≥–æ–¥–Ω–æ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è: –ª–æ–Ω–≥ {long_funding:.4f}%, —à–æ—Ä—Ç {short_funding:.4f}%")
                            continue

                        # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–≤—è–∑–∫–∏ —Å "–∫—Ä–∞—Å–Ω—ã–º" —Ñ–∞–Ω–¥–∏–Ω–≥–æ–º
                        if has_red_funding(long_funding, short_funding):
                            logger.debug(
                                f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º {base} –∏–∑-–∑–∞ –∫—Ä–∞—Å–Ω–æ–≥–æ —Ñ–∞–Ω–¥–∏–Ω–≥–∞: –ª–æ–Ω–≥ {long_funding:.4f}%, —à–æ—Ä—Ç {short_funding:.4f}%")
                            continue

                        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–∫–∞–Ω—ã –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤
                        buy_exchange = FUTURES_EXCHANGES_LOADED[min_ex[0]]["api"]
                        sell_exchange = FUTURES_EXCHANGES_LOADED[max_ex[0]]["api"]
                        buy_symbol = min_ex[1]['symbol']
                        sell_symbol = max_ex[1]['symbol']

                        buy_order_book, sell_order_book = await asyncio.gather(
                            fetch_order_book(buy_exchange, buy_symbol, depth=10),
                            fetch_order_book(sell_exchange, sell_symbol, depth=10))

                        if not buy_order_book or not sell_order_book:
                            logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º {base}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞–∫–∞–Ω–∞")
                            continue

                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –æ–±—ä–µ–º –∏–∑ —Å—Ç–∞–∫–∞–Ω–∞
                        buy_volume, buy_value = calculate_available_volume(
                            buy_order_book, 'buy', SETTINGS['FUTURES']['MAX_IMPACT_PERCENT'])
                        sell_volume, sell_value = calculate_available_volume(
                            sell_order_book, 'sell', SETTINGS['FUTURES']['MAX_IMPACT_PERCENT'])
                        available_volume = min(buy_volume, sell_volume)
                        order_book_volume = min(buy_value, sell_value)

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º —Å—Ç–∞–∫–∞–Ω–∞
                        if order_book_volume < SETTINGS['FUTURES']['MIN_ORDER_BOOK_VOLUME']:
                            logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º {base}: –æ–±—ä–µ–º —Å—Ç–∞–∫–∞–Ω–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª: ${order_book_volume:.2f}")
                            continue

                        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏
                        buy_fee = FUTURES_EXCHANGES_LOADED[min_ex[0]]["config"]["taker_fee"]
                        sell_fee = FUTURES_EXCHANGES_LOADED[max_ex[0]]["config"]["taker_fee"]

                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –¥–ª—è MIN_NET_PROFIT_USD
                        min_amount_for_profit = calculate_min_entry_amount(
                            buy_price=min_ex[1]['price'],
                            sell_price=max_ex[1]['price'],
                            min_profit=SETTINGS['FUTURES']['MIN_NET_PROFIT_USD'],
                            buy_fee_percent=buy_fee,
                            sell_fee_percent=sell_fee
                        )

                        if min_amount_for_profit <= 0:
                            logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º {base}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –ø—Ä–∏–±—ã–ª—å")
                            continue

                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—É—é —Å—É–º–º—É –≤—Ö–æ–¥–∞
                        max_possible_amount = min(
                            available_volume * min_ex[1]['price'],
                            SETTINGS['FUTURES']['MAX_ENTRY_AMOUNT_USDT'],
                            order_book_volume)

                        max_entry_amount = max_possible_amount
                        min_entry_amount = max(min_amount_for_profit, SETTINGS['FUTURES']['MIN_ENTRY_AMOUNT_USDT'])

                        if min_entry_amount > max_entry_amount:
                            logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º {base}: min_entry_amount > max_entry_amount")
                            continue

                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –ø—Ä–∏–±—ã–ª—å
                        profit_min = calculate_profit(
                            buy_price=min_ex[1]['price'],
                            sell_price=max_ex[1]['price'],
                            amount=min_entry_amount / min_ex[1]['price'],
                            buy_fee_percent=buy_fee,
                            sell_fee_percent=sell_fee
                        )

                        profit_max = calculate_profit(
                            buy_price=min_ex[1]['price'],
                            sell_price=max_ex[1]['price'],
                            amount=max_possible_amount / min_ex[1]['price'],
                            buy_fee_percent=buy_fee,
                            sell_fee_percent=sell_fee
                        )

                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é –ø—Ä–∏–±—ã–ª—å —Å —É—á–µ—Ç–æ–º —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
                        effective_profit_min = calculate_effective_profit_with_funding(
                            profit_min['net'], min_entry_amount, long_funding, short_funding)
                        effective_profit_max = calculate_effective_profit_with_funding(
                            profit_max['net'], max_entry_amount, long_funding, short_funding)

                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        utc_plus_3 = timezone(timedelta(hours=3))
                        current_time = datetime.now(utc_plus_3).strftime('%H:%M:%S')

                        def format_volume(vol):
                            if vol is None:
                                return "N/A"
                            if vol >= 1_000_000:
                                return f"${vol / 1_000_000:.1f}M"
                            if vol >= 1_000:
                                return f"${vol / 1_000:.1f}K"
                            return f"${vol:.1f}"

                        min_volume = format_volume(min_ex[1]['volume'])
                        max_volume = format_volume(max_ex[1]['volume'])

                        safe_base = html.escape(base)
                        buy_exchange_config = FUTURES_EXCHANGES[min_ex[0]]
                        sell_exchange_config = FUTURES_EXCHANGES[max_ex[0]]

                        buy_url = buy_exchange_config["url_format"](min_ex[1]['symbol'].replace(':USDT', ''))
                        sell_url = sell_exchange_config["url_format"](max_ex[1]['symbol'].replace(':USDT', ''))

                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
                        funding_score = calculate_funding_score(long_funding, short_funding)
                        funding_emoji = "üü¢" 
                        if has_red_funding(long_funding, short_funding):
                            funding_emoji = "üî¥"
                        elif funding_score > 0:
                            funding_emoji = "üü°"

                        message = (
                            f"üìä <b>–§—å—é—á–µ—Ä—Å–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂:</b> <code>{safe_base}</code>\n"
                            f"‚ñ´Ô∏è <b>–†–∞–∑–Ω–∏—Ü–∞ —Ü–µ–Ω:</b> {spread:.2f}%\n"
                            f"‚ñ´Ô∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–π –æ–±—ä–µ–º:</b> {available_volume:.6f} {safe_base}\n"
                            f"‚ñ´Ô∏è <b>–û–±—ä–µ–º —Å—Ç–∞–∫–∞–Ω–∞:</b> ${order_book_volume:.2f}\n"
                            f"‚ñ´Ô∏è <b>–°—É–º–º–∞ –≤—Ö–æ–¥–∞:</b> ${min_entry_amount:.2f}-${max_entry_amount:.2f}\n"
                            f"‚ñ´Ô∏è {funding_emoji} <b>–§–∞–Ω–¥–∏–Ω–≥:</b> –ª–æ–Ω–≥ {long_funding:.4f}% | —à–æ—Ä—Ç {short_funding:.4f}% | –æ–±—â–∏–π {funding_score:.4f}%\n\n"
                            f"üü¢ <b>–õ–æ–Ω–≥ –Ω–∞ <a href='{buy_url}'>{min_ex[0].upper()}</a>:</b> ${min_ex[1]['price']:.8f}\n"
                            f"   <b>–û–±—ä—ë–º:</b> {min_volume}\n"
                            f"   <b>–ö–æ–º–∏—Å—Å–∏—è:</b> {buy_fee * 100:.3f}%\n\n"
                            f"üî¥ <b>–®–æ—Ä—Ç –Ω–∞ <a href='{sell_url}'>{max_ex[0].upper()}</a>:</b> ${max_ex[1]['price']:.8f}\n"
                            f"   <b>–û–±—ä—ë–º:</b> {max_volume}\n"
                            f"   <b>–ö–æ–º–∏—Å—Å–∏—è:</b> {sell_fee * 100:.3f}%\n\n"
                            f"üí∞ <b>–ë–∞–∑–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å:</b> ${profit_min['net']:.2f}-${profit_max['net']:.2f}\n"
                            f"üíé <b>–° —É—á–µ—Ç–æ–º —Ñ–∞–Ω–¥–∏–Ω–≥–∞:</b> ${effective_profit_min:.2f}-${effective_profit_max:.2f} ({profit_max['percent']:.2f}%)\n\n"
                            f"‚è± {current_time}\n"
                        )

                        logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å: {base} ({spread:.2f}%)")

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
                        await send_telegram_message(message)

                        # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∫—É –≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
                        add_opportunity_to_sent(
                            'FUTURES', base, min_ex[0], max_ex[0], spread,
                            min_ex[1]['price'], max_ex[1]['price'],
                            min_ex[1]['volume'], max_ex[1]['volume'],
                            min_entry_amount, max_entry_amount, profit_min, profit_max,
                            available_volume, order_book_volume,
                            long_funding, short_funding
                        )

                        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                        update_current_arbitrage_opportunities(
                            'FUTURES', base, min_ex[0], max_ex[0], spread,
                            min_ex[1]['price'], max_ex[1]['price'],
                            min_ex[1]['volume'], max_ex[1]['volume'],
                            min_entry_amount, max_entry_amount, profit_min, profit_max,
                            available_volume, order_book_volume,
                            long_funding, short_funding
                        )

                        found_opportunities += 1

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä—ã {base}: {e}")

            # –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
            cleanup_old_opportunities()

            logger.info(f"–¶–∏–∫–ª —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {found_opportunities}")
            await asyncio.sleep(SETTINGS['FUTURES']['CHECK_INTERVAL'])

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞: {e}")
            await asyncio.sleep(60)

async def check_spot_futures_arbitrage():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–æ—Ç-—Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø–æ—Ç-—Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞")

    if not SETTINGS['SPOT_FUTURES']['ENABLED']:
        logger.info("–°–ø–æ—Ç-—Ñ—å—é—á–µ—Ä—Å–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂ –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂
    global SPOT_EXCHANGES_LOADED, FUTURES_EXCHANGES_LOADED

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–æ—Ç–æ–≤—ã–µ –∏ —Ñ—å—é—á–µ—Ä—Å–Ω—ã–µ –±–∏—Ä–∂–∏
    await load_spot_exchanges()
    await load_futures_exchanges()

    if len(SPOT_EXCHANGES_LOADED) < 1 or len(FUTURES_EXCHANGES_LOADED) < 1:
        logger.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∏—Ä–∂ –¥–ª—è —Å–ø–æ—Ç-—Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞")
        return

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã
    spot_pairs = defaultdict(set)
    futures_pairs = defaultdict(set)

    # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–æ—Ç–æ–≤—ã–µ –ø–∞—Ä—ã
    for name, data in SPOT_EXCHANGES_LOADED.items():
        exchange = data["api"]
        config = data["config"]
        for symbol, market in exchange.markets.items():
            try:
                if config["is_spot"](market):
                    base = market['base']
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–æ–Ω–µ—Ç—ã –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
                    if base in config.get("blacklist", []):
                        continue
                    spot_pairs[base].add((name, symbol))
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–æ—Ç–æ–≤–æ–π –ø–∞—Ä—ã {symbol} –Ω–∞ {name}: {e}")

    # –°–æ–±–∏—Ä–∞–µ–º —Ñ—å—é—á–µ—Ä—Å–Ω—ã–µ –ø–∞—Ä—ã
    for name, data in FUTURES_EXCHANGES_LOADED.items():
        exchange = data["api"]
        config = data["config"]
        for symbol, market in exchange.markets.items():
            try:
                if config["is_futures"](market):
                    base = market['base']
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–æ–Ω–µ—Ç—ã –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
                    if base in config.get("blacklist", []):
                        continue
                    futures_pairs[base].add((name, symbol))
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–π –ø–∞—Ä—ã {symbol} –Ω–∞ {name}: {e}")

    # –ù–∞—Ö–æ–¥–∏–º –æ–±—â–∏–µ –ø–∞—Ä—ã
    common_pairs = set(spot_pairs.keys()) & set(futures_pairs.keys())

    if not common_pairs:
        logger.error("–ù–µ—Ç –æ–±—â–∏—Ö –ø–∞—Ä –¥–ª—è —Å–ø–æ—Ç-—Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞")
        return

    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(common_pairs)} –æ–±—â–∏—Ö –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

    while SETTINGS['SPOT_FUTURES']['ENABLED']:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∏—Ä–∂
            if LAST_EXCHANGE_SETTINGS != SETTINGS['EXCHANGES']:
                logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–∏—Ä–∂. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–æ—Ç–æ–≤—ã–µ –∏ —Ñ—å—é—á–µ—Ä—Å–Ω—ã–µ –±–∏—Ä–∂–∏...")
                await load_spot_exchanges()
                await load_futures_exchanges()

                # –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ø–∏—Å–∫–∏ –ø–∞—Ä –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–∏—Ä–∂
                spot_pairs = defaultdict(set)
                futures_pairs = defaultdict(set)

                for name, data in SPOT_EXCHANGES_LOADED.items():
                    exchange = data["api"]
                    config = data["config"]
                    for symbol, market in exchange.markets.items():
                        try:
                            if config["is_spot"](market):
                                base = market['base']
                                if base in config.get("blacklist", []):
                                    continue
                                spot_pairs[base].add((name, symbol))
                        except Exception as e:
                            logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–æ—Ç–æ–≤–æ–π –ø–∞—Ä—ã {symbol} –Ω–∞ {name}: {e}")

                for name, data in FUTURES_EXCHANGES_LOADED.items():
                    exchange = data["api"]
                    config = data["config"]
                    for symbol, market in exchange.markets.items():
                        try:
                            if config["is_futures"](market):
                                base = market['base']
                                if base in config.get("blacklist", []):
                                    continue
                                futures_pairs[base].add((name, symbol))
                        except Exception as e:
                            logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–π –ø–∞—Ä—ã {symbol} –Ω–∞ {name}: {e}")

                common_pairs = set(spot_pairs.keys()) & set(futures_pairs.keys())

                if not common_pairs:
                    logger.error("–ù–µ—Ç –æ–±—â–∏—Ö –ø–∞—Ä –¥–ª—è —Å–ø–æ—Ç-—Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏")
                    await asyncio.sleep(SETTINGS['SPOT_FUTURES']['CHECK_INTERVAL'])
                    continue

            found_opportunities = 0
            for base in common_pairs:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –º–æ–Ω–µ—Ç—ã
                    if not check_coin_volatility(base, 'SPOT_FUTURES'):
                        continue

                    spot_ticker_data = {}
                    futures_ticker_data = {}

                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è —Å–ø–æ—Ç–æ–≤—ã—Ö –±–∏—Ä–∂
                    for name, symbol in spot_pairs[base]:
                        try:
                            data = await fetch_ticker_data(SPOT_EXCHANGES_LOADED[name]["api"], symbol)
                            if data and data['price'] is not None:
                                # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
                                update_price_history('SPOT_FUTURES', base, f"{name}_spot", data['price'])
                                update_coin_volatility_history(base, data['price'])

                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                                if not check_volatility('SPOT_FUTURES', base, f"{name}_spot", data['price']):
                                    logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º {base} –Ω–∞ {name} (—Å–ø–æ—Ç) –∏–∑-–∑–∞ –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏")
                                    continue

                                if data['volume'] is None or data['volume'] >= SETTINGS['SPOT_FUTURES'][
                                    'MIN_VOLUME_USD']:
                                    spot_ticker_data[name] = data
                        except Exception as e:
                            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–æ—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö {base} –Ω–∞ {name}: {e}")

                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –±–∏—Ä–∂
                    for name, symbol in futures_pairs[base]:
                        try:
                            data = await fetch_ticker_data(FUTURES_EXCHANGES_LOADED[name]["api"], symbol)
                            if data and data['price'] is not None:
                                # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
                                update_price_history('SPOT_FUTURES', base, f"{name}_futures", data['price'])
                                update_coin_volatility_history(base, data['price'])

                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                                if not check_volatility('SPOT_FUTURES', base, f"{name}_futures", data['price']):
                                    logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º {base} –Ω–∞ {name} (—Ñ—å—é—á–µ—Ä—Å—ã) –∏–∑-–∑–∞ –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏")
                                    continue

                                if data['volume'] is None or data['volume'] >= SETTINGS['SPOT_FUTURES'][
                                    'MIN_VOLUME_USD']:
                                    futures_ticker_data[name] = data
                        except Exception as e:
                            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö {base} –Ω–∞ {name}: {e}")

                    if not spot_ticker_data or not futures_ticker_data:
                        continue

                    # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–µ —Ü–µ–Ω—ã
                    min_spot = min(spot_ticker_data.items(), key=lambda x: x[1]['price'])
                    max_futures = max(futures_ticker_data.items(), key=lambda x: x[1]['price'])

                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ø—Ä–µ–¥
                    spread = (max_futures[1]['price'] - min_spot[1]['price']) / min_spot[1]['price'] * 100

                    logger.debug(
                        f"–ü–∞—Ä–∞ {base}: —Å–ø—Ä–µ–¥ {spread:.2f}% (spot: {min_spot[0]} {min_spot[1]['price']}, futures: {max_futures[0]} {max_futures[1]['price']})")

                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–≤—è–∑–æ–∫)
                    update_current_arbitrage_opportunities(
                        'SPOT_FUTURES', base, min_spot[0], max_futures[0], spread,
                        min_spot[1]['price'], max_futures[1]['price'],
                        min_spot[1]['volume'], max_futures[1]['volume']
                    )

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å —Ü–µ–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–≤—è–∑–æ–∫)
                    duration = update_arbitrage_duration('SPOT_FUTURES', base, min_spot[0], max_futures[0], spread)
                    if duration is not None:
                        await send_price_convergence_notification(
                            'SPOT_FUTURES', base, min_spot[0], max_futures[0],
                            min_spot[1]['price'], max_futures[1]['price'], spread,
                            min_spot[1]['volume'], max_futures[1]['volume'], duration
                        )

                    if SETTINGS['SPOT_FUTURES']['THRESHOLD_PERCENT'] <= spread <= SETTINGS['SPOT_FUTURES'][
                        'MAX_THRESHOLD_PERCENT']:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–µ–ø–æ–∑–∏—Ç–∞ –∏ –≤—ã–≤–æ–¥–∞ –¥–ª—è —Å–ø–æ—Ç–∞
                        deposit_available = await check_deposit_withdrawal_status(
                            SPOT_EXCHANGES_LOADED[min_spot[0]]["api"], base, 'deposit')
                        withdrawal_available = await check_deposit_withdrawal_status(
                            SPOT_EXCHANGES_LOADED[min_spot[0]]["api"], base, 'withdrawal')

                        if not (deposit_available and withdrawal_available):
                            logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º {base}: –¥–µ–ø–æ–∑–∏—Ç –∏–ª–∏ –≤—ã–≤–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                            continue

                        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–∫–∞–Ω—ã –æ—Ä–¥–µ—Ä–æ–≤
                        spot_exchange = SPOT_EXCHANGES_LOADED[min_spot[0]]["api"]
                        futures_exchange = FUTURES_EXCHANGES_LOADED[max_futures[0]]["api"]
                        spot_symbol = min_spot[1]['symbol']
                        futures_symbol = max_futures[1]['symbol']

                        spot_order_book, futures_order_book = await asyncio.gather(
                            fetch_order_book(spot_exchange, spot_symbol),
                            fetch_order_book(futures_exchange, futures_symbol, depth=10))

                        if not spot_order_book or not futures_order_book:
                            logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º {base}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞–∫–∞–Ω–∞")
                            continue

                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –æ–±—ä–µ–º –∏–∑ —Å—Ç–∞–∫–∞–Ω–∞
                        spot_volume, spot_value = calculate_available_volume(
                            spot_order_book, 'buy', SETTINGS['SPOT_FUTURES']['MAX_IMPACT_PERCENT'])
                        futures_volume, futures_value = calculate_available_volume(
                            futures_order_book, 'sell', SETTINGS['SPOT_FUTURES']['MAX_IMPACT_PERCENT'])
                        available_volume = min(spot_volume, futures_volume)
                        order_book_volume = min(spot_value, futures_value)

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º —Å—Ç–∞–∫–∞–Ω–∞
                        if order_book_volume < SETTINGS['SPOT_FUTURES']['MIN_ORDER_BOOK_VOLUME']:
                            logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º {base}: –æ–±—ä–µ–º —Å—Ç–∞–∫–∞–Ω–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª: ${order_book_volume:.2f}")
                            continue

                        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏
                        spot_fee = SPOT_EXCHANGES_LOADED[min_spot[0]]["config"]["taker_fee"]
                        futures_fee = FUTURES_EXCHANGES_LOADED[max_futures[0]]["config"]["taker_fee"]

                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –¥–ª—è MIN_NET_PROFIT_USD
                        min_amount_for_profit = calculate_min_entry_amount(
                            buy_price=min_spot[1]['price'],
                            sell_price=max_futures[1]['price'],
                            min_profit=SETTINGS['SPOT_FUTURES']['MIN_NET_PROFIT_USD'],
                            buy_fee_percent=spot_fee,
                            sell_fee_percent=futures_fee
                        )

                        if min_amount_for_profit <= 0:
                            logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º {base}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –ø—Ä–∏–±—ã–ª—å")
                            continue

                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—É—é —Å—É–º–º—É –≤—Ö–æ–¥–∞
                        max_possible_amount = min(
                            available_volume * min_spot[1]['price'],
                            SETTINGS['SPOT_FUTURES']['MAX_ENTRY_AMOUNT_USDT'],
                            order_book_volume)

                        max_entry_amount = max_possible_amount
                        min_entry_amount = max(min_amount_for_profit, SETTINGS['SPOT_FUTURES']['MIN_ENTRY_AMOUNT_USDT'])

                        if min_entry_amount > max_entry_amount:
                            logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º {base}: min_entry_amount > max_entry_amount")
                            continue

                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å
                        profit_min = calculate_profit(
                            buy_price=min_spot[1]['price'],
                            sell_price=max_futures[1]['price'],
                            amount=min_entry_amount / min_spot[1]['price'],
                            buy_fee_percent=spot_fee,
                            sell_fee_percent=futures_fee
                        )

                        profit_max = calculate_profit(
                            buy_price=min_spot[1]['price'],
                            sell_price=max_futures[1]['price'],
                            amount=max_possible_amount / min_spot[1]['price'],
                            buy_fee_percent=spot_fee,
                            sell_fee_percent=futures_fee
                        )

                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        utc_plus_3 = timezone(timedelta(hours=3))
                        current_time = datetime.now(utc_plus_3).strftime('%H:%M:%S')

                        def format_volume(vol):
                            if vol is None:
                                return "N/A"
                            if vol >= 1_000_000:
                                return f"${vol / 1_000_000:.1f}M"
                            if vol >= 1_000:
                                return f"${vol / 1_000:.1f}K"
                            return f"${vol:.1f}"

                        spot_volume_str = format_volume(min_spot[1]['volume'])
                        futures_volume_str = format_volume(max_futures[1]['volume'])

                        safe_base = html.escape(base)
                        spot_exchange_config = SPOT_EXCHANGES[min_spot[0]]
                        futures_exchange_config = FUTURES_EXCHANGES[max_futures[0]]

                        spot_url = spot_exchange_config["url_format"](min_spot[1]['symbol'])
                        futures_url = futures_exchange_config["url_format"](
                            max_futures[1]['symbol'].replace(':USDT', ''))
                        withdraw_url = spot_exchange_config["withdraw_url"](base)
                        deposit_url = spot_exchange_config["deposit_url"](base)

                        message = (
                            f"‚ÜîÔ∏è <b>–°–ø–æ—Ç-–§—å—é—á–µ—Ä—Å–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂:</b> <code>{safe_base}</code>\n"
                            f"‚ñ´Ô∏è <b>–†–∞–∑–Ω–∏—Ü–∞ —Ü–µ–Ω:</b> {spread:.2f}%\n"
                            f"‚ñ´Ô∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–π –æ–±—ä–µ–º:</b> {available_volume:.6f} {safe_base}\n"
                            f"‚ñ´Ô∏è <b>–û–±—ä–µ–º —Å—Ç–∞–∫–∞–Ω–∞:</b> ${order_book_volume:.2f}\n"
                            f"‚ñ´Ô∏è <b>–°—É–º–º–∞ –≤—Ö–æ–¥–∞:</b> ${min_entry_amount:.2f}-${max_entry_amount:.2f}\n\n"
                            f"üü¢ <b>–ü–æ–∫—É–ø–∫–∞ –Ω–∞ —Å–ø–æ—Ç–µ <a href='{spot_url}'>{min_spot[0].upper()}</a>:</b> ${min_spot[1]['price']:.8f}\n"
                            f"   <b>–û–±—ä—ë–º:</b> {spot_volume_str}\n"
                            f"   <b>–ö–æ–º–∏—Å—Å–∏—è:</b> {spot_fee * 100:.2f}%\n"
                            f"   <b><a href='{withdraw_url}'>–í—ã–≤–æ–¥</a> | <a href='{deposit_url}'>–î–µ–ø–æ–∑–∏—Ç</a></b>\n\n"
                            f"üî¥ <b>–®–æ—Ä—Ç –Ω–∞ —Ñ—å—é—á–µ—Ä—Å–∞—Ö <a href='{futures_url}'>{max_futures[0].upper()}</a>:</b> ${max_futures[1]['price']:.8f}\n"
                            f"   <b>–û–±—ä—ë–º:</b> {futures_volume_str}\n"
                            f"   <b>–ö–æ–º–∏—Å—Å–∏—è:</b> {futures_fee * 100:.3f}%\n\n"
                            f"üí∞ <b>–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å:</b> ${profit_min['net']:.2f}-${profit_max['net']:.2f} ({profit_max['percent']:.2f}%)\n\n"
                            f"‚è± {current_time}\n"
                        )

                        logger.info(f"–ù–∞–π–¥–µ–Ω–∞ —Å–ø–æ—Ç-—Ñ—å—é—á–µ—Ä—Å–Ω–∞—è –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å: {base} ({spread:.2f}%)")

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
                        await send_telegram_message(message)

                        # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∫—É –≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
                        add_opportunity_to_sent(
                            'SPOT_FUTURES', base, min_spot[0], max_futures[0], spread,
                            min_spot[1]['price'], max_futures[1]['price'],
                            min_spot[1]['volume'], max_futures[1]['volume'],
                            min_entry_amount, max_entry_amount, profit_min, profit_max,
                            available_volume, order_book_volume
                        )

                        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                        update_current_arbitrage_opportunities(
                            'SPOT_FUTURES', base, min_spot[0], max_futures[0], spread,
                            min_spot[1]['price'], max_futures[1]['price'],
                            min_spot[1]['volume'], max_futures[1]['volume'],
                            min_entry_amount, max_entry_amount, profit_min, profit_max,
                            available_volume, order_book_volume
                        )

                        found_opportunities += 1

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä—ã {base}: {e}")

            # –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
            cleanup_old_opportunities()

            logger.info(f"–¶–∏–∫–ª —Å–ø–æ—Ç-—Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {found_opportunities}")
            await asyncio.sleep(SETTINGS['SPOT_FUTURES']['CHECK_INTERVAL'])

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ —Å–ø–æ—Ç-—Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞: {e}")
            await asyncio.sleep(60)

def format_price(price: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if price is None:
        return "N/A"

    # –î–ª—è —Ü–µ–Ω > 1000 –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø—è—Ç—ã–µ –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ —Ç—ã—Å—è—á
    if price >= 1000:
        return f"$<code>{price:.2f}</code>"

    # –î–ª—è —Ü–µ–Ω > 1 –∏—Å–ø–æ–ª—å–∑—É–µ–º 4 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    if price >= 1:
        return f"$<code>{price:.4f}</code>"

    # –î–ª—è —Ü–µ–Ω < 1 –∏—Å–ø–æ–ª—å–∑—É–µ–º 8 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    return f"$<code>{price:.8f}</code>"

def format_volume(vol: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±—ä–µ–º –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if vol is None:
        return "N/A"

    # –î–ª—è –æ–±—ä–µ–º–æ–≤ > 1 –º–∏–ª–ª–∏–æ–Ω–∞
    if vol >= 1_000_000:
        return f"${vol / 1_000_000:.1f}M"

    # –î–ª—è –æ–±—ä–µ–º–æ–≤ > 1000
    if vol >= 1_000:
        return f"${vol / 1_000:.1f}K"

    # –î–ª—è –æ–±—ä–µ–º–æ–≤ < 1000
    return f"${vol:.0f}"

async def get_coin_prices(coin: str, market_type: str):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—ã –º–æ–Ω–µ—Ç—ã –Ω–∞ –≤—Å–µ—Ö –±–∏—Ä–∂–∞—Ö –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –æ–±—ä–µ–º—É"""
    coin = coin.upper()

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –±–∏—Ä–∂–∏ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
    if LAST_EXCHANGE_SETTINGS != SETTINGS['EXCHANGES']:
        if market_type == "spot":
            await load_spot_exchanges()
            exchanges = SPOT_EXCHANGES_LOADED
        else:
            await load_futures_exchanges()
            exchanges = FUTURES_EXCHANGES_LOADED
    else:
        exchanges = SPOT_EXCHANGES_LOADED if market_type == "spot" else FUTURES_EXCHANGES_LOADED

    if not exchanges:
        return "‚ùå –ë–∏—Ä–∂–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    results = []
    found_on = 0
    filtered_out = 0

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ä—ã–Ω–∫–∞
    if market_type == "spot":
        min_volume = SETTINGS['SPOT']['MIN_VOLUME_USD']
        min_entry = SETTINGS['SPOT']['MIN_ENTRY_AMOUNT_USDT']
        max_entry = SETTINGS['SPOT']['MAX_ENTRY_AMOUNT_USDT']
    else:
        min_volume = SETTINGS['FUTURES']['MIN_VOLUME_USD']
        min_entry = SETTINGS['FUTURES']['MIN_ENTRY_AMOUNT_USDT']
        max_entry = SETTINGS['FUTURES']['MAX_ENTRY_AMOUNT_USDT']

    for name, data in exchanges.items():
        exchange = data["api"]
        config = data["config"]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ä—ã–Ω–∫–∞
        symbol = config["symbol_format"](coin)

        try:
            market = exchange.market(symbol)
            if (market_type == "spot" and config["is_spot"](market)) or \
                    (market_type == "futures" and config["is_futures"](market)):

                ticker = await fetch_ticker_data(exchange, symbol)
                if ticker and ticker['price']:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä–µ–º - —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É –æ–±—ä–µ–º—É –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                    if ticker.get('volume') is not None and ticker['volume'] < min_volume:
                        filtered_out += 1
                        logger.debug(f"–ë–∏—Ä–∂–∞ {name} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–∞ –ø–æ –æ–±—ä–µ–º—É: {ticker['volume']} < {min_volume}")
                        continue

                    found_on += 1
                    price = ticker['price']
                    volume = ticker.get('volume')

                    # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –±–∏—Ä–∂–∏
                    url = config["url_format"](symbol)

                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
                    results.append({
                        "price": price,
                        "name": name.upper(),
                        "volume": volume,
                        "url": url,
                        "emoji": config.get("emoji", "üèõ")
                    })
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã {symbol} –Ω–∞ {name}: {e}")

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ü–µ–Ω–µ (–æ—Ç –Ω–∏–∑–∫–æ–π –∫ –≤—ã—Å–æ–∫–æ–π)
    results.sort(key=lambda x: x["price"])

    utc_plus_3 = timezone(timedelta(hours=3))
    current_time = datetime.now(utc_plus_3).strftime('%H:%M:%S')

    market_name = "–°–ø–æ—Ç" if market_type == "spot" else "–§—å—é—á–µ—Ä—Å—ã"
    market_color = "market_color = üöÄ" if market_type == "spot" else "üìä"

    if results:
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –º–µ–∂–¥—É —Å–∞–º–æ–π –Ω–∏–∑–∫–æ–π –∏ –≤—ã—Å–æ–∫–æ–π —Ü–µ–Ω–æ–π
        min_price = results[0]["price"]
        max_price = results[-1]["price"]
        price_diff_percent = ((max_price - min_price) / min_price) * 100

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        response = f"{market_color} <b>{market_name} —Ä—ã–Ω–∫–∏ –¥–ª—è <code>{coin}</code>:</b>\n\n"
        response += f"<i>–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º: ${min_volume:,.0f}</i>\n"
        response += f"<i>–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –±–∏—Ä–∂: {filtered_out}</i>\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–π –±–∏—Ä–∂–µ
        for idx, item in enumerate(results, 1):
            # –°–¥–µ–ª–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∏—Ä–∂–∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π
            response += (
                f"{item['emoji']} <a href='{item['url']}'><b>{item['name']}</b></a>\n"
                f"‚ñ´Ô∏è –¶–µ–Ω–∞: {format_price(item['price'])}\n"
                f"‚ñ´Ô∏è –û–±—ä–µ–º: {format_volume(item['volume'])}\n"
            )

            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
            if idx < len(results):
                response += "\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–∑–º–æ–∂–Ω–æ–π –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏
        if len(results) >= 2 and min_price < max_price:
            # –ù–∞—Ö–æ–¥–∏–º –±–∏—Ä–∂–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π
            min_exchange = results[0]
            max_exchange = results[-1]

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏ –¥–ª—è —ç—Ç–∏—Ö –±–∏—Ä–∂
            if market_type == "spot":
                buy_fee = SPOT_EXCHANGES[min_exchange['name'].lower()]["taker_fee"]
                sell_fee = SPOT_EXCHANGES[max_exchange['name'].lower()]["taker_fee"]
            else:
                buy_fee = FUTURES_EXCHANGES[min_exchange['name'].lower()]["taker_fee"]
                sell_fee = FUTURES_EXCHANGES[max_exchange['name'].lower()]["taker_fee"]

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –≤—Ö–æ–¥–∞
            profit_min = calculate_profit(
                buy_price=min_price,
                sell_price=max_price,
                amount=min_entry / min_price,
                buy_fee_percent=buy_fee,
                sell_fee_percent=sell_fee
            )

            profit_max = calculate_profit(
                buy_price=min_price,
                sell_price=max_price,
                amount=max_entry / min_price,
                buy_fee_percent=buy_fee,
                sell_fee_percent=sell_fee
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–∑–º–æ–∂–Ω–æ–π –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏
            response += f"\nüíº <b>–í–æ–∑–º–æ–∂–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂:</b>\n"
            response += f"üü¢ –ü–æ–∫—É–ø–∫–∞ –Ω–∞ {min_exchange['name']}: {format_price(min_price)}\n"
            response += f"üî¥ –ü—Ä–æ–¥–∞–∂–∞ –Ω–∞ {max_exchange['name']}: {format_price(max_price)}\n"
            response += f"üí∞ –°—É–º–º–∞ –≤—Ö–æ–¥–∞: ${min_entry:.2f}-${max_entry:.2f}\n"
            response += f"üíµ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: ${profit_min['net']:.2f}-${profit_max['net']:.2f}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É —Ü–µ–Ω –∏ –≤—Ä–µ–º—è
        response += f"\nüìà <b>–†–∞–∑–Ω–∏—Ü–∞ —Ü–µ–Ω:</b> {price_diff_percent:.2f}%\n"
        response += f"‚è± {current_time} | –ë–∏—Ä–∂: {found_on}"
    else:
        if filtered_out > 0:
            response = f"‚ùå –ú–æ–Ω–µ—Ç–∞ {coin} –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ {filtered_out} –±–∏—Ä–∂–∞—Ö, –Ω–æ –æ–±—ä–µ–º –º–µ–Ω—å—à–µ ${min_volume:,.0f}"
        else:
            response = f"‚ùå –ú–æ–Ω–µ—Ç–∞ {coin} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ {market_name} —Ä—ã–Ω–∫–µ"

    return response

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = str(update.effective_user.id)
    if user_id not in TELEGRAM_CHAT_IDS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    await update.message.reply_text(
        "ü§ñ <b>Crypto Arbitrage Bot</b>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º:",
        parse_mode="HTML",
        reply_markup=get_main_keyboard()
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = str(update.effective_user.id)
    if user_id not in TELEGRAM_CHAT_IDS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    text = update.message.text

    if text == "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        await update.message.reply_text(
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            parse_mode="HTML",
            reply_markup=get_settings_keyboard()
        )
        return SETTINGS_MENU

    elif text == "üìà –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∫–∏":
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        context.user_data['arbitrage_page'] = 0
        context.user_data['arbitrage_per_page'] = 5
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        message, total_pages, current_page = await get_current_arbitrage_opportunities_page(
            page=0, opportunities_per_page=5
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        context.user_data['arbitrage_total_pages'] = total_pages
        context.user_data['arbitrage_current_page'] = current_page
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        await update.message.reply_text(
            text=message,
            parse_mode="HTML",
            disable_web_page_preview=True,
            reply_markup=get_arbitrage_list_keyboard(current_page, total_pages)
        )
        return ARBITRAGE_LIST

    elif text == "üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞":
        try:
            spot_status = "‚úÖ –í–ö–õ" if SETTINGS['SPOT']['ENABLED'] else "‚ùå –í–´–ö–õ"
            futures_status = "‚úÖ –í–ö–õ" if SETTINGS['FUTURES']['ENABLED'] else "‚ùå –í–´–ö–õ"
            spot_futures_status = "‚úÖ –í–ö–õ" if SETTINGS['SPOT_FUTURES']['ENABLED'] else "‚ùå –í–´–ö–õ"

            enabled_exchanges = [name for name, config in SETTINGS['EXCHANGES'].items() if config['ENABLED']]
            exchanges_status = ", ".join(enabled_exchanges) if enabled_exchanges else "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∏—Ä–∂"

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–∏
            funding_info = ""
            if SETTINGS['FUTURES']['ENABLED']:
                try:
                    funding_rates = await get_current_funding_rates()
                    funding_info = f"\nüí∞ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ —Ñ–∞–Ω–¥–∏–Ω–≥–∞: {len(funding_rates)}"
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞–≤–æ–∫ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                    funding_info = f"\nüí∞ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞–≤–∫–∏ —Ñ–∞–Ω–¥–∏–Ω–≥–∞"

            status_message = (
                f"ü§ñ <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b>\n\n"
                f"üöÄ –°–ø–æ—Ç–æ–≤—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂: {spot_status}\n"
                f"üìä –§—å—é—á–µ—Ä—Å–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂: {futures_status}\n"
                f"‚ÜîÔ∏è –°–ø–æ—Ç-–§—å—é—á–µ—Ä—Å–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂: {spot_futures_status}\n"
                f"üèõ –ê–∫—Ç–∏–≤–Ω—ã–µ –±–∏—Ä–∂–∏: {exchanges_status}\n"
                f"üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–≤—è–∑–æ–∫: {len(sent_arbitrage_opportunities)}"
                f"{funding_info}"
            )

            await update.message.reply_text(
                status_message,
                parse_mode="HTML",
                reply_markup=get_main_keyboard()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞.",
                reply_markup=get_main_keyboard()
            )
        return ConversationHandler.END

    elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await update.message.reply_text(
            "ü§ñ <b>Crypto Arbitrage Bot</b>\n\n"
            "üîç <b>–ü–æ–∏—Å–∫ –º–æ–Ω–µ—Ç—ã</b> - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ü–µ–Ω—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –±–∏—Ä–∂–∞—Ö, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã (BTC, ETH...)\n"
            "üîß <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> - –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—Ä–±–∏—Ç—Ä–∞–∂–∞\n"
            "üìä <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b> - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞\n"
            "üìà <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∫–∏</b> - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –∏—Ö –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n\n"
            "<b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:</b>\n"
            "‚Ä¢ –£—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞–≤–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è (funding rate)\n"
            "‚Ä¢ –§–∏–ª—å—Ç—Ä—É–µ—Ç –Ω–µ–≤—ã–≥–æ–¥–Ω—ã–µ —Å–≤—è–∑–∫–∏ —Å –≤—ã—Å–æ–∫–∏–º–∏ –ø–ª–∞—Ç–µ–∂–∞–º–∏\n"
            "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é –ø—Ä–∏–±—ã–ª—å —Å —É—á–µ—Ç–æ–º —Ñ–∞–Ω–¥–∏–Ω–≥–∞\n\n"
            "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—â–µ—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
            parse_mode="HTML",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END

    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã
    if not text.startswith('/'):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å–∏–º–≤–æ–ª (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã)
        if re.match(r'^[A-Z0-9]{1,15}$', text.upper()):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–Ω–µ—Ç—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø —Ä—ã–Ω–∫–∞
            context.user_data['coin'] = text.upper()
            await update.message.reply_text(
                f"üîç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä—ã–Ω–∫–∞ –¥–ª—è <b><code>{text.upper()}</code></b>:",
                parse_mode="HTML",
                reply_markup=ReplyKeyboardMarkup([
                    [KeyboardButton(f"üöÄ {text.upper()} –°–ø–æ—Ç"), KeyboardButton(f"üìä {text.upper()} –§—å—é—á–µ—Ä—Å—ã")],
                    [KeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
                ], resize_keyboard=True)
            )
            return COIN_SELECTION
        else:
            await update.message.reply_text(
                "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–Ω–µ—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä BTC –∏–ª–∏ ETH)",
                reply_markup=get_main_keyboard()
            )
            return ConversationHandler.END

    await update.message.reply_text(
        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
        reply_markup=get_main_keyboard()
    )
    return ConversationHandler.END

async def handle_coin_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä—ã–Ω–∫–∞ –¥–ª—è –º–æ–Ω–µ—Ç—ã"""
    text = update.message.text
    coin = context.user_data.get('coin')

    if text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END

    if not coin:
        await update.message.reply_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–æ–Ω–µ—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END

    if "–°–ø–æ—Ç" in text:
        market_type = "spot"
    elif "–§—å—é—á–µ—Ä—Å—ã" –≤ text:
        market_type = "futures"
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä—ã–Ω–∫–∞ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.",
            reply_markup=ReplyKeyboardMarkup([
                [KeyboardButton(f"üöÄ {coin} –°–ø–æ—Ç"), KeyboardButton(f"üìä {coin} –§—å—é—á–µ—Ä—Å—ã")],
                [KeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
            ], resize_keyboard=True)
        )
        return COIN_SELECTION

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ó–∞–≥—Ä—É–∑–∫–∞..."
    await update.message.reply_text(
        f"‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è <b><code>{coin}</code></b> –Ω–∞ {'—Å–ø–æ—Ç–µ' if market_type == 'spot' else '—Ñ—å—é—á–µ—Ä—Å–∞—Ö'}...",
        parse_mode="HTML"
    )

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    response = await get_coin_prices(coin, market_type)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await update.message.reply_text(
        text=response,
        parse_mode="HTML",
        disable_web_page_preview=True,
        reply_markup=get_main_keyboard()
    )
    return ConversationHandler.END

async def handle_arbitrage_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å–ø–∏—Å–∫—É –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö —Å–≤—è–∑–æ–∫"""
    text = update.message.text
    user_id = str(update.effective_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    current_page = context.user_data.get('arbitrage_page', 0)
    total_pages = context.user_data.get('arbitrage_total_pages', 1)
    per_page = context.user_data.get('arbitrage_per_page', 5)

    if text == "‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è":
        if current_page > 0:
            current_page -= 1
    elif text == "–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è":
        if current_page < total_pages - 1:
            current_page += 1
    elif text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END
    else:
        # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –¥—Ä—É–≥–∞—è –∫–Ω–æ–ø–∫–∞, –æ—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        pass

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    context.user_data['arbitrage_page'] = current_page
    context.user_data['arbitrage_current_page'] = current_page

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    message, total_pages, current_page = await get_current_arbitrage_opportunities_page(
        page=current_page, opportunities_per_page=per_page
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    context.user_data['arbitrage_total_pages'] = total_pages

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.message.reply_text(
        text=message,
        parse_mode="HTML",
        disable_web_page_preview=True,
        reply_markup=get_arbitrage_list_keyboard(current_page, total_pages)
    )
    return ARBITRAGE_LIST

async def handle_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    text = update.message.text

    if text == "üöÄÔ∏è –°–ø–æ—Ç":
        await update.message.reply_text(
            "üöÄÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ø–æ—Ç–æ–≤–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
            parse_mode="HTML",
            reply_markup=get_spot_settings_keyboard()
        )
        return SPOT_SETTINGS

    elif text == "üìä –§—å—é—á–µ—Ä—Å—ã":
        await update.message.reply_text(
            "üìä <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
            parse_mode="HTML",
            reply_markup=get_futures_settings_keyboard()
        )
        return FUTURES_SETTINGS

    elif text == "‚ÜîÔ∏è –°–ø–æ—Ç-–§—å—é—á–µ—Ä—Å—ã":
        await update.message.reply_text(
            "‚ÜîÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ø–æ—Ç-—Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
            parse_mode="HTML",
            reply_markup=get_spot_futures_settings_keyboard()
        )
        return SPOT_FUTURES_SETTINGS

    elif text == "üèõ –ë–∏—Ä–∂–∏":
        await update.message.reply_text(
            "üèõ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∏—Ä–∂</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –±–∏—Ä–∂—É –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è:",
            parse_mode="HTML",
            reply_markup=get_exchange_settings_keyboard()
        )
        return EXCHANGE_SETTINGS_MENU

    elif text == "üîÑ –°–±—Ä–æ—Å":
        global SETTINGS, LAST_EXCHANGE_SETTINGS
        SETTINGS = {
            "SPOT": DEFAULT_SPOT_SETTINGS.copy(),
            "FUTURES": DEFAULT_FUTURES_SETTINGS.copy(),
            "SPOT_FUTURES": DEFAULT_SPOT_FUTURES_SETTINGS.copy(),
            "EXCHANGES": EXCHANGE_SETTINGS.copy()
        }
        save_settings(SETTINGS)
        LAST_EXCHANGE_SETTINGS = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∏—Ä–∂–∏
        await update.message.reply_text(
            "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
            reply_markup=get_settings_keyboard()
        )
        return SETTINGS_MENU

    elif text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END

    await update.message.reply_text(
        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
        reply_markup=get_settings_keyboard()
    )
    return SETTINGS_MENU

async def handle_spot_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–ø–æ—Ç–∞"""
    text = update.message.text

    if text == "üîô –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏":
        await update.message.reply_text(
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            parse_mode="HTML",
            reply_markup=get_settings_keyboard()
        )
        return SETTINGS_MENU

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if text.startswith("–ü–æ—Ä–æ–≥:"):
        context.user_data['setting'] = ('SPOT', 'THRESHOLD_PERCENT')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ—Ä–æ–≥–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ (—Ç–µ–∫—É—â–µ–µ: {SETTINGS['SPOT']['THRESHOLD_PERCENT']}%):"
        )
        return SETTING_VALUE

    elif text.startswith("–ú–∞–∫—Å. –ø–æ—Ä–æ–≥:"):
        context.user_data['setting'] = ('SPOT', 'MAX_THRESHOLD_PERCENT')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞ (—Ç–µ–∫—É—â–µ–µ: {SETTINGS['SPOT']['MAX_THRESHOLD_PERCENT']}%):"
        )
        return SETTING_VALUE

    elif text.startswith("–ò–Ω—Ç–µ—Ä–≤–∞–ª:"):
        context.user_data['setting'] = ('SPOT', 'CHECK_INTERVAL')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Ç–µ–∫—É—â–µ–µ: {SETTINGS['SPOT']['CHECK_INTERVAL']} —Å–µ–∫):"
        )
        return SETTING_VALUE

    elif text.startswith("–û–±—ä–µ–º:"):
        context.user_data['setting'] = ('SPOT', 'MIN_VOLUME_USD')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞ (—Ç–µ–∫—É—â–µ–µ: ${SETTINGS['SPOT']['MIN_VOLUME_USD']}):"
        )
        return SETTING_VALUE

    elif text.startswith("–ú–∏–Ω. —Å—É–º–º–∞:"):
        context.user_data['setting'] = ('SPOT', 'MIN_ENTRY_AMOUNT_USDT')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –≤—Ö–æ–¥–∞ (—Ç–µ–∫—É—â–µ–µ: ${SETTINGS['SPOT']['MIN_ENTRY_AMOUNT_USDT']}):"
        )
        return SETTING_VALUE

    elif text.startswith("–ú–∞–∫—Å. —Å—É–º–º–∞:"):
        context.user_data['setting'] = ('SPOT', 'MAX_ENTRY_AMOUNT_USDT')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –≤—Ö–æ–¥–∞ (—Ç–µ–∫—É—â–µ–µ: ${SETTINGS['SPOT']['MAX_ENTRY_AMOUNT_USDT']}):"
        )
        return SETTING_VALUE

    elif text.startswith("–í–ª–∏—è–Ω–∏–µ:"):
        context.user_data['setting'] = ('SPOT', 'MAX_IMPACT_PERCENT')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–ª–∏—è–Ω–∏—è (—Ç–µ–∫—É—â–µ–µ: {SETTINGS['SPOT']['MAX_IMPACT_PERCENT']}%):"
        )
        return SETTING_VALUE

    elif text.startswith("–°—Ç–∞–∫–∞–Ω:"):
        context.user_data['setting'] = ('SPOT', 'ORDER_BOOK_DEPTH')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≥–ª—É–±–∏–Ω—ã —Å—Ç–∞–∫–∞–Ω–∞ (—Ç–µ–∫—É—â–µ–µ: {SETTINGS['SPOT']['ORDER_BOOK_DEPTH']}):"
        )
        return SETTING_VALUE

    elif text.startswith("–ü—Ä–∏–±—ã–ª—å:"):
        context.user_data['setting'] = ('SPOT', 'MIN_NET_PROFIT_USD')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏ (—Ç–µ–∫—É—â–µ–µ: ${SETTINGS['SPOT']['MIN_NET_PROFIT_USD']}):"
        )
        return SETTING_VALUE

    elif text.startswith("–°—Ö–æ–¥–∏–º–æ—Å—Ç—å:"):
        context.user_data['setting'] = ('SPOT', 'PRICE_CONVERGENCE_THRESHOLD')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ—Ä–æ–≥–∞ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ü–µ–Ω (—Ç–µ–∫—É—â–µ–µ: {SETTINGS['SPOT']['PRICE_CONVERGENCE_THRESHOLD']}%):"
        )
        return SETTING_VALUE

    elif text.startswith("–£–≤–µ–¥. —Å—Ä–∞–≤–Ω.:"):
        SETTINGS['SPOT']['PRICE_CONVERGENCE_ENABLED'] = not SETTINGS['SPOT']['PRICE_CONVERGENCE_ENABLED']
        save_settings(SETTINGS)
        status = "üîî –í–ö–õ" if SETTINGS['SPOT']['PRICE_CONVERGENCE_ENABLED'] else "üîï –í–´–ö–õ"
        await update.message.reply_text(
            f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Ü–µ–Ω {status}",
            reply_markup=get_spot_settings_keyboard()
        )
        return SPOT_SETTINGS

    elif text.startswith("–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å:"):
        context.user_data['setting'] = ('SPOT', 'VOLATILITY_THRESHOLD')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ—Ä–æ–≥–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (—Ç–µ–∫—É—â–µ–µ: {SETTINGS['SPOT']['VOLATILITY_THRESHOLD']}%):"
        )
        return SETTING_VALUE

    elif text.startswith("–ú–∏–Ω. –æ–±—ä–µ–º —Å—Ç–∞–∫–∞–Ω–∞:"):
        context.user_data['setting'] = ('SPOT', 'MIN_ORDER_BOOK_VOLUME')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞ —Å—Ç–∞–∫–∞–Ω–∞ (—Ç–µ–∫—É—â–µ–µ: ${SETTINGS['SPOT']['MIN_ORDER_BOOK_VOLUME']}):"
        )
        return SETTING_VALUE

    elif text.startswith("–ú–∞–∫—Å. –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å:"):
        context.user_data['setting'] = ('SPOT', 'MAX_VOLATILITY_PERCENT')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –º–æ–Ω–µ—Ç—ã (—Ç–µ–∫—É—â–µ–µ: {SETTINGS['SPOT']['MAX_VOLATILITY_PERCENT']}%):"
        )
        return SETTING_VALUE

    elif text.startswith("–°—Ç–∞—Ç—É—Å:"):
        SETTINGS['SPOT']['ENABLED'] = not SETTINGS['SPOT']['ENABLED']
        save_settings(SETTINGS)
        status = "–í–ö–õ" if SETTINGS['SPOT']['ENABLED'] else "–í–´–ö–õ"
        await update.message.reply_text(
            f"‚úÖ –°–ø–æ—Ç–æ–≤—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂ {status}",
            reply_markup=get_spot_settings_keyboard()
        )
        return SPOT_SETTINGS

    await update.message.reply_text(
        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
        reply_markup=get_spot_settings_keyboard()
    )
    return SPOT_SETTINGS

async def handle_futures_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ñ—å—é—á–µ—Ä—Å–æ–≤"""
    text = update.message.text

    if text == "üîô –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏":
        await update.message.reply_text(
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—É:",
            parse_mode="HTML",
            reply_markup=get_settings_keyboard()
        )
        return SETTINGS_MENU

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if text.startswith("–ü–æ—Ä–æ–≥:"):
        context.user_data['setting'] = ('FUTURES', 'THRESHOLD_PERCENT')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ—Ä–æ–≥–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ (—Ç–µ–∫—É—â–µ–µ: {SETTINGS['FUTURES']['THRESHOLD_PERCENT']}%):"
        )
        return SETTING_VALUE

    elif text.startswith("–ú–∞–∫—Å. –ø–æ—Ä–æ–≥:"):
        context.user_data['setting'] = ('FUTURES', 'MAX_THRESHOLD_PERCENT')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞ (—Ç–µ–∫—É—â–µ–µ: {SETTINGS['FUTURES']['MAX_THRESHOLD_PERCENT']}%):"
        )
        return SETTING_VALUE

    elif text.startswith("–ò–Ω—Ç–µ—Ä–≤–∞–ª:"):
        context.user_data['setting'] = ('FUTURES', 'CHECK_INTERVAL')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Ç–µ–∫—É—â–µ–µ: {SETTINGS['FUTURES']['CHECK_INTERVAL']} —Å–µ–∫):"
        )
        return SETTING_VALUE

    elif text.startswith("–û–±—ä–µ–º:"):
        context.user_data['setting'] = ('FUTURES', 'MIN_VOLUME_USD')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞ (—Ç–µ–∫—É—â–µ–µ: ${SETTINGS['FUTURES']['MIN_VOLUME_USD']}):"
        )
        return SETTING_VALUE

    elif text.startswith("–ú–∏–Ω. —Å—É–º–º–∞:"):
        context.user_data['setting'] = ('FUTURES', 'MIN_ENTRY_AMOUNT_USDT')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –≤—Ö–æ–¥–∞ (—Ç–µ–∫—É—â–µ–µ: ${SETTINGS['FUTURES']['MIN_ENTRY_AMOUNT_USDT']}):"
        )
        return SETTING_VALUE

    elif text.startswith("–ú–∞–∫—Å. —Å—É–º–º–∞:"):
        context.user_data['setting'] = ('FUTURES', 'MAX_ENTRY_AMOUNT_USDT')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –≤—Ö–æ–¥–∞ (—Ç–µ–∫—É—â–µ–µ: ${SETTINGS['FUTURES']['MAX_ENTRY_AMOUNT_USDT']}):"
        )
        return SETTING_VALUE

    elif text.startswith("–ü—Ä–∏–±—ã–ª—å:"):
        context.user_data['setting'] = ('FUTURES', 'MIN_NET_PROFIT_USD')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏ (—Ç–µ–∫—É—â–µ–µ: ${SETTINGS['FUTURES']['MIN_NET_PROFIT_USD']}):"
        )
        return SETTING_VALUE

    elif text.startswith("–°—Ö–æ–¥–∏–º–æ—Å—Ç—å:"):
        context.user_data['setting'] = ('FUTURES', 'PRICE_CONVERGENCE_THRESHOLD')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ—Ä–æ–≥–∞ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ü–µ–Ω (—Ç–µ–∫—É—â–µ–µ: {SETTINGS['FUTURES']['PRICE_CONVERGENCE_THRESHOLD']}%):"
        )
        return SETTING_VALUE

    elif text.startswith("–£–≤–µ–¥. —Å—Ä–∞–≤–Ω.:"):
        SETTINGS['FUTURES']['PRICE_CONVERGENCE_ENABLED'] = not SETTINGS['FUTURES']['PRICE_CONVERGENCE_ENABLED']
        save_settings(SETTINGS)
        status = "üîî –í–ö–õ" if SETTINGS['FUTURES']['PRICE_CONVERGENCE_ENABLED'] else "üîï –í–´–ö–õ"
        await update.message.reply_text(
            f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Ü–µ–Ω {status}",
            reply_markup=get_futures_settings_keyboard()
        )
        return FUTURES_SETTINGS

    elif text.startswith("–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å:"):
        context.user_data['setting'] = ('FUTURES', 'VOLATILITY_THRESHOLD')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ—Ä–æ–≥–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (—Ç–µ–∫—É—â–µ–µ: {SETTINGS['FUTURES']['VOLATILITY_THRESHOLD']}%):"
        )
        return SETTING_VALUE

    elif text.startswith("–ú–∏–Ω. –æ–±—ä–µ–º —Å—Ç–∞–∫–∞–Ω–∞:"):
        context.user_data['setting'] = ('FUTURES', 'MIN_ORDER_BOOK_VOLUME')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞ —Å—Ç–∞–∫–∞–Ω–∞ (—Ç–µ–∫—É—â–µ–µ: ${SETTINGS['FUTURES']['MIN_ORDER_BOOK_VOLUME']}):"
        )
        return SETTING_VALUE

    elif text.startswith("–ú–∞–∫—Å. —Ñ–∞–Ω–¥–∏–Ω–≥:"):
        context.user_data['setting'] = ('FUTURES', 'FUNDING_RATE_THRESHOLD')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–µ–∫—É—â–µ–µ: {SETTINGS['FUTURES']['FUNDING_RATE_THRESHOLD']}%):"
        )
        return SETTING_VALUE

    elif text.startswith("–ú–∏–Ω. —Ñ–∞–Ω–¥–∏–Ω–≥:"):
        context.user_data['setting'] = ('FUTURES', 'MIN_FUNDING_RATE_TO_RECEIVE')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–µ–∫—É—â–µ–µ: {SETTINGS['FUTURES']['MIN_FUNDING_RATE_TO_RECEIVE']}%):"
        )
        return SETTING_VALUE

    elif text.startswith("–ö—Ä–∞—Å–Ω—ã–π —Ñ–∞–Ω–¥–∏–Ω–≥:"):
        context.user_data['setting'] = ('FUTURES', 'RED_FUNDING_THRESHOLD')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ—Ä–æ–≥–∞ –∫—Ä–∞—Å–Ω–æ–≥–æ —Ñ–∞–Ω–¥–∏–Ω–≥–∞ (—Ç–µ–∫—É—â–µ–µ: {SETTINGS['FUTURES']['RED_FUNDING_THRESHOLD']}%):"
        )
        return SETTING_VALUE

    elif text.startswith("–ú–∞–∫—Å. –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å:"):
        context.user_data['setting'] = ('FUTURES', 'MAX_VOLATILITY_PERCENT')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –º–æ–Ω–µ—Ç—ã (—Ç–µ–∫—É—â–µ–µ: {SETTINGS['FUTURES']['MAX_VOLATILITY_PERCENT']}%):"
        )
        return SETTING_VALUE

    elif text.startswith("–°—Ç–∞—Ç—É—Å:"):
        SETTINGS['FUTURES']['ENABLED'] = not SETTINGS['FUTURES']['ENABLED']
        save_settings(SETTINGS)
        status = "–í–ö–õ" if SETTINGS['FUTURES']['ENABLED'] else "–í–´–ö–õ"
        await update.message.reply_text(
            f"‚úÖ –§—å—é—á–µ—Ä—Å–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂ {status}",
            reply_markup=get_futures_settings_keyboard()
        )
        return FUTURES_SETTINGS

    await update.message.reply_text(
        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
        reply_markup=get_futures_settings_keyboard()
    )
    return FUTURES_SETTINGS

async def handle_spot_futures_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–ø–æ—Ç-—Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞"""
    text = update.message.text

    if text == "üîô –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏":
        await update.message.reply_text(
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            parse_mode="HTML",
            reply_markup=get_settings_keyboard()
        )
        return SETTINGS_MENU

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if text.startswith("–ü–æ—Ä–æ–≥:"):
        context.user_data['setting'] = ('SPOT_FUTURES', 'THRESHOLD_PERCENT')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ—Ä–æ–≥–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ (—Ç–µ–∫—É—â–µ–µ: {SETTINGS['SPOT_FUTURES']['THRESHOLD_PERCENT']}%):"
        )
        return SETTING_VALUE

    elif text.startswith("–ú–∞–∫—Å. –ø–æ—Ä–æ–≥:"):
        context.user_data['setting'] = ('SPOT_FUTURES', 'MAX_THRESHOLD_PERCENT')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞ (—Ç–µ–∫—É—â–µ–µ: {SETTINGS['SPOT_FUTURES']['MAX_THRESHOLD_PERCENT']}%):"
        )
        return SETTING_VALUE

    elif text.startswith("–ò–Ω—Ç–µ—Ä–≤–∞–ª:"):
        context.user_data['setting'] = ('SPOT_FUTURES', 'CHECK_INTERVAL')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Ç–µ–∫—É—â–µ–µ: {SETTINGS['SPOT_FUTURES']['CHECK_INTERVAL']} —Å–µ–∫):"
        )
        return SETTING_VALUE

    elif text.startswith("–û–±—ä–µ–º:"):
        context.user_data['setting'] = ('SPOT_FUTURES', 'MIN_VOLUME_USD')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞ (—Ç–µ–∫—É—â–µ–µ: ${SETTINGS['SPOT_FUTURES']['MIN_VOLUME_USD']}):"
        )
        return SETTING_VALUE

    elif text.startswith("–ú–∏–Ω. —Å—É–º–º–∞:"):
        context.user_data['setting'] = ('SPOT_FUTURES', 'MIN_ENTRY_AMOUNT_USDT')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –≤—Ö–æ–¥–∞ (—Ç–µ–∫—É—â–µ–µ: ${SETTINGS['SPOT_FUTURES']['MIN_ENTRY_AMOUNT_USDT']}):"
        )
        return SETTING_VALUE

    elif text.startswith("–ú–∞–∫—Å. —Å—É–º–º–∞:"):
        context.user_data['setting'] = ('SPOT_FUTURES', 'MAX_ENTRY_AMOUNT_USDT')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –≤—Ö–æ–¥–∞ (—Ç–µ–∫—É—â–µ–µ: ${SETTINGS['SPOT_FUTURES']['MAX_ENTRY_AMOUNT_USDT']}):"
        )
        return SETTING_VALUE

    elif text.startswith("–ü—Ä–∏–±—ã–ª—å:"):
        context.user_data['setting'] = ('SPOT_FUTURES', 'MIN_NET_PROFIT_USD')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏ (—Ç–µ–∫—É—â–µ–µ: ${SETTINGS['SPOT_FUTURES']['MIN_NET_PROFIT_USD']}):"
        )
        return SETTING_VALUE

    elif text.startswith("–°—Ö–æ–¥–∏–º–æ—Å—Ç—å:"):
        context.user_data['setting'] = ('SPOT_FUTURES', 'PRICE_CONVERGENCE_THRESHOLD')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ—Ä–æ–≥–∞ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ü–µ–Ω (—Ç–µ–∫—É—â–µ–µ: {SETTINGS['SPOT_FUTURES']['PRICE_CONVERGENCE_THRESHOLD']}%):"
        )
        return SETTING_VALUE

    elif text.startswith("–£–≤–µ–¥. —Å—Ä–∞–≤–Ω.:"):
        SETTINGS['SPOT_FUTURES']['PRICE_CONVERGENCE_ENABLED'] = not SETTINGS['SPOT_FUTURES'][
            'PRICE_CONVERGENCE_ENABLED']
        save_settings(SETTINGS)
        status = "üîî –í–ö–õ" if SETTINGS['SPOT_FUTURES']['PRICE_CONVERGENCE_ENABLED'] else "üîï –í–´–ö–õ"
        await update.message.reply_text(
            f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Ü–µ–Ω {status}",
            reply_markup=get_spot_futures_settings_keyboard()
        )
        return SPOT_FUTURES_SETTINGS

    elif text.startswith("–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å:"):
        context.user_data['setting'] = ('SPOT_FUTURES', 'VOLATILITY_THRESHOLD')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ—Ä–æ–≥–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (—Ç–µ–∫—É—â–µ–µ: {SETTINGS['SPOT_FUTURES']['VOLATILITY_THRESHOLD']}%):"
        )
        return SETTING_VALUE

    elif text.startswith("–ú–∏–Ω. –æ–±—ä–µ–º —Å—Ç–∞–∫–∞–Ω–∞:"):
        context.user_data['setting'] = ('SPOT_FUTURES', 'MIN_ORDER_BOOK_VOLUME')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞ —Å—Ç–∞–∫–∞–Ω–∞ (—Ç–µ–∫—É—â–µ–µ: ${SETTINGS['SPOT_FUTURES']['MIN_ORDER_BOOK_VOLUME']}):"
        )
        return SETTING_VALUE

    elif text.startswith("–ú–∞–∫—Å. –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å:"):
        context.user_data['setting'] = ('SPOT_FUTURES', 'MAX_VOLATILITY_PERCENT')
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –º–æ–Ω–µ—Ç—ã (—Ç–µ–∫—É—â–µ–µ: {SETTINGS['SPOT_FUTURES']['MAX_VOLATILITY_PERCENT']}%):"
        )
        return SETTING_VALUE

    elif text.startswith("–°—Ç–∞—Ç—É—Å:"):
        SETTINGS['SPOT_FUTURES']['ENABLED'] = not SETTINGS['SPOT_FUTURES']['ENABLED']
        save_settings(SETTINGS)
        status = "–í–ö–õ" if SETTINGS['SPOT_FUTURES']['ENABLED'] else "–í–´–ö–õ"
        await update.message.reply_text(
            f"‚úÖ –°–ø–æ—Ç-—Ñ—å—é—á–µ—Ä—Å–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂ {status}",
            reply_markup=get_spot_futures_settings_keyboard()
        )
        return SPOT_FUTURES_SETTINGS

    await update.message.reply_text(
        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
        reply_markup=get_spot_futures_settings_keyboard()
    )
    return SPOT_FUTURES_SETTINGS

async def handle_exchange_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–∏—Ä–∂"""
    text = update.message.text

    if text == "üîô –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏":
        await update.message.reply_text(
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            parse_mode="HTML",
            reply_markup=get_settings_keyboard()
        )
        return SETTINGS_MENU

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –±–∏—Ä–∂
    for exchange in SETTINGS['EXCHANGES'].keys():
        if text.startswith(f"{exchange}:"):
            SETTINGS['EXCHANGES'][exchange]['ENABLED'] = not SETTINGS['EXCHANGES'][exchange]['ENABLED']
            save_settings(SETTINGS)

            status = "‚úÖ –í–ö–õ" if SETTINGS['EXCHANGES'][exchange]['ENABLED'] else "‚ùå –í–´–ö–õ"
            await update.message.reply_text(
                f"‚úÖ –ë–∏—Ä–∂–∞ {exchange.upper()} {status}",
                reply_markup=get_exchange_settings_keyboard()
            )
            return EXCHANGE_SETTINGS_MENU

    await update.message.reply_text(
        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
        reply_markup=get_exchange_settings_keyboard()
    )
    return EXCHANGE_SETTINGS_MENU

async def handle_setting_value(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    text = update.message.text
    setting_info = context.user_data.get('setting')

    if not setting_info:
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_settings_keyboard()
        )
        return SETTINGS_MENU

    arb_type, setting_key = setting_info

    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        if setting_key in ['THRESHOLD_PERCENT', 'MAX_THRESHOLD_PERCENT', 'MAX_IMPACT_PERCENT',
                           'PRICE_CONVERGENCE_THRESHOLD', 'VOLATILITY_THRESHOLD',
                           'FUNDING_RATE_THRESHOLD', 'MIN_FUNDING_RATE_TO_RECEIVE', 'IDEAL_FUNDING_SCENARIO',
                           'RED_FUNDING_THRESHOLD', 'MAX_VOLATILITY_PERCENT']:
            value = float(text)
        elif setting_key in ['CHECK_INTERVAL', 'ORDER_BOOK_DEPTH', 'FUNDING_CHECK_INTERVAL', 'MAX_HOLDING_HOURS']:
            value = int(text)
        elif setting_key in ['MIN_VOLUME_USD', 'MIN_ENTRY_AMOUNT_USDT', 'MAX_ENTRY_AMOUNT_USDT', 'MIN_NET_PROFIT_USD',
                             'MIN_ORDER_BOOK_VOLUME']:
            value = float(text)
        else:
            value = text

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        SETTINGS[arb_type][setting_key] = value
        save_settings(SETTINGS)

        await update.message.reply_text(
            f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ {setting_key} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {text}",
            reply_markup=get_spot_settings_keyboard() if arb_type == 'SPOT' else
            get_futures_settings_keyboard() if arb_type == 'FUTURES' else
            get_spot_futures_settings_keyboard()
        )

        return SPOT_SETTINGS if arb_type == 'SPOT' else \
            FUTURES_SETTINGS if arb_type == 'FUTURES' else \
                SPOT_FUTURES_SETTINGS

    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.",
            reply_markup=get_spot_settings_keyboard() if arb_type == 'SPOT' else
            get_futures_settings_keyboard() if arb_type == 'FUTURES' else
            get_spot_futures_settings_keyboard()
        )
        return SETTING_VALUE

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞"""
    await update.message.reply_text(
        "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=get_main_keyboard()
    )
    return ConversationHandler.END

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}", exc_info=context.error)

    if update and update.effective_message:
        await update.effective_message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # Conversation handler –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
        ],
        states={
            SETTINGS_MENU: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_settings)
            ],
            SPOT_SETTINGS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_spot_settings)
            ],
            FUTURES_SETTINGS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_futures_settings)
            ],
            SPOT_FUTURES_SETTINGS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_spot_futures_settings)
            ],
            EXCHANGE_SETTINGS_MENU: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_exchange_settings)
            ],
            SETTING_VALUE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_setting_value)
            ],
            COIN_SELECTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_coin_selection)
            ],
            ARBITRAGE_LIST: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_arbitrage_list)
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ–Ω–µ
    loop = asyncio.get_event_loop()
    loop.create_task(check_spot_arbitrage())
    loop.create_task(check_futures_arbitrage())
    loop.create_task(check_spot_futures_arbitrage())

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
