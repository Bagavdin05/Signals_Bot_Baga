import pandas as pd
import numpy as np
import time
from datetime import datetime, timedelta, timezone
import logging
import asyncio
import talib
import warnings
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram.request import HTTPXRequest
import html
from collections import defaultdict
import pytz
from scipy import stats
import math
import requests  # –î–æ–±–∞–≤–∏–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ú–æ—Å–∫–≤—ã (UTC+3)
MOSCOW_TZ = pytz.timezone('Europe/Moscow')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger('MT5Bot')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram –±–æ—Ç–∞
TELEGRAM_BOT_TOKEN = "7952768185:AAGuhybXaGPJqtlGPd1-O4nc6_FpUL2rOgw"
TELEGRAM_CHAT_IDS = ["1167694150", "7916502470"]

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ MetaTrader5
try:
    import MetaTrader5 as mt5

    MT5_AVAILABLE = True
except ImportError:
    logger.warning("MetaTrader5 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–µ–º–æ-—Ä–µ–∂–∏–º.")
    MT5_AVAILABLE = False


class MT5TradingBot:
    def __init__(self):
        self.telegram_app = None
        self.last_analysis_start_time = None
        self.last_signals = []
        self.is_analyzing = False
        self.analysis_lock = asyncio.Lock()
        self.telegram_queue = asyncio.Queue()
        self.telegram_worker_task = None
        self.signal_history = defaultdict(list)
        self.symbol_24h_volume = {}
        self.demo_mode = not MT5_AVAILABLE
        self.last_prediction = None
        self.prediction_history = []
        self.market_state = {
            'trend': 'neutral',
            'volatility': 'medium',
            'momentum': 'neutral',
            'last_update': None
        }
        self.account_balance = 10.0  # –î–µ–ø–æ–∑–∏—Ç $10
        self.positions = []
        self.liquidation_levels = defaultdict(list)
        self.whale_activity = defaultdict(list)
        self.long_short_ratio = defaultdict(dict)

        # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
        self.config = {
            'timeframes': {
                'M15': 15,
                'M5': 5,
                'M1': 1
            },
            'min_volume_24h': 50000,
            'max_symbols': 5,  # –£–≤–µ–ª–∏—á–∏–ª–∏ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è GOLD
            'analysis_interval': 10,
            'risk_per_trade': 0.02,  # 2% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞ ($0.20)
            'virtual_balance': self.account_balance,
            'min_confidence': 0.65,
            'risk_reward_ratio': 1.5,
            'atr_multiplier_sl': 1.2,
            'atr_multiplier_tp': 1.8,
            'scalping_symbols': ['EURUSD', 'GBPUSD', 'USDJPY', 'GOLD'],  # –î–æ–±–∞–≤–∏–ª–∏ GOLD
            'signal_validity_seconds': 120,
            'required_indicators': 2,
            'min_price_change': 0.0005,
            'volume_spike_threshold': 2.0,
            'trend_strength_threshold': 0.2,
            'correction_filter': True,
            'multi_timeframe_confirmation': True,
            'market_trend_filter': True,
            'volume_confirmation': True,
            'volatility_filter': True,
            'price_action_filter': True,
            'required_timeframes': 2,
            'pin_bar_threshold': 0.6,
            'trend_confirmation': True,
            'lot_size': 0.01,  # –£–º–µ–Ω—å—à–∏–ª–∏ –ª–æ—Ç –¥–æ 0.01
            'max_spread_pips': 3.0,
            'demo_mode': self.demo_mode,
            'prediction_history_size': 50,
            'pattern_weight': 0.7,
            'indicator_weight': 0.3,
            'market_phases': {
                'accumulation': 0.2,
                'bullish': 0.8,
                'distribution': -0.2,
                'bearish': -0.8
            },
            'liquidity_filter': True,
            'volatility_min': 0.0003,
            'volatility_max': 0.0015,
            'liquidation_threshold': 0.7,  # –ü–æ—Ä–æ–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π
            'whale_volume_threshold': 5.0, # –ü–æ—Ä–æ–≥ –æ–±—ä–µ–º–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∏—Ç–æ–≤
        }

        self.top_symbols = []
        self.signals = []
        self.analysis_stats = {'total_analyzed': 0, 'signals_found': 0}

        if self.demo_mode:
            logger.info("–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ –î–ï–ú–û-–†–ï–ñ–ò–ú–ï (MT5 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")
        else:
            logger.info("–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –¥–ª—è MT5 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def get_moscow_time(self, dt=None):
        if dt is None:
            dt = datetime.now(timezone.utc)
        elif dt.tzinfo is None:
            dt = dt.replace(tzinfo=timezone.utc)
        return dt.astimezone(MOSCOW_TZ)

    def format_moscow_time(self, dt=None, format_str='%Y-%m-%d %H:%M:%S'):
        moscow_time = self.get_moscow_time(dt)
        return moscow_time.strftime(format_str)

    def initialize_mt5(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MT5"""
        if not MT5_AVAILABLE:
            logger.warning("MT5 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ä–∞–±–æ—Ç–∞ –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ")
            return False

        try:
            if not mt5.initialize():
                logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MT5: {mt5.last_error()}")
                return False

            account = 513707711
            password = "!DXmj0CgYS"
            server = "FxPro-MT5"

            authorized = mt5.login(account, password=password, server=server)
            if not authorized:
                logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ MT5: {mt5.last_error()}")
                return False

            logger.info(f"–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MT5, —Å—á–µ—Ç: {account}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MT5: {e}")
            return False

    def get_symbols_list(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤ - –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞"""
        if not MT5_AVAILABLE or self.demo_mode:
            demo_symbols = self.config['scalping_symbols']
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ–º–æ-—Å–ø–∏—Å–æ–∫: {demo_symbols}")
            return demo_symbols

        try:
            symbols = mt5.symbols_get()
            symbol_names = [s.name for s in symbols]

            scalping_symbols = []
            for symbol in self.config['scalping_symbols']:
                if symbol in symbol_names:
                    scalping_symbols.append(symbol)

            if not scalping_symbols:
                logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-—Å–∏–º–≤–æ–ª—ã")
                return self.config['scalping_symbols']

            logger.info(f"–ù–∞–π–¥–µ–Ω—ã —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞: {scalping_symbols}")
            return scalping_symbols[:self.config['max_symbols']]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ MT5: {e}")
            return self.config['scalping_symbols']

    async def initialize_telegram(self):
        try:
            request = HTTPXRequest(
                connection_pool_size=10,
                connect_timeout=30.0,
                read_timeout=30.0,
                write_timeout=30.0
            )

            self.telegram_app = Application.builder().token(TELEGRAM_BOT_TOKEN).request(request).build()
            self.telegram_app.add_handler(CommandHandler("start", self.telegram_start))
            self.telegram_app.add_handler(CommandHandler("prediction", self.telegram_prediction))
            self.telegram_app.add_handler(CommandHandler("signal", self.telegram_signal))
            self.telegram_app.add_handler(CommandHandler("balance", self.telegram_balance))
            await self.telegram_app.initialize()
            await self.telegram_app.start()
            await self.telegram_app.upstream.start_polling()
            self.telegram_worker_task = asyncio.create_task(self.telegram_worker())
            logger.info("Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

            mode = "–î–ï–ú–û-–†–ï–ñ–ò–ú–ï (MT5 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)" if self.demo_mode else "—Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"
            startup_message = (
                f"ü§ñ <b>–°–ö–ê–õ–¨–ü–ò–ù–ì –ë–û–¢ –î–õ–Ø MT5 –ó–ê–ü–£–©–ï–ù!</b>\n\n"
                f"üìä –ë–æ—Ç –Ω–∞—á–∞–ª –∞–Ω–∞–ª–∏–∑ –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä –≤ {mode}\n"
                f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {self.format_moscow_time()}\n"
                f"üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç: ${self.account_balance}\n"
                f"üìà –†–∞–∑–º–µ—Ä –ª–æ—Ç–∞: {self.config['lot_size']}\n"
                "üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: –ú–æ—Å–∫–≤–∞ (UTC+3)\n"
                "üìà –ë—Ä–æ–∫–µ—Ä: FXPRO\n\n"
                "‚ö° <b>–°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –î–õ–Ø –°–ö–ê–õ–¨–ü–ò–ù–ì–ê</b>"
            )
            await self.send_telegram_message(startup_message)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞: {e}")

    async def telegram_worker(self):
        logger.info("Telegram worker –∑–∞–ø—É—â–µ–Ω")
        while True:
            try:
                chat_id, message = await self.telegram_queue.get()
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram (chat_id: {chat_id})")
                if chat_id and message:
                    try:
                        for attempt in range(3):
                            try:
                                await self.telegram_app.bot.send_message(
                                    chat_id=chat_id,
                                    text=message,
                                    parse_mode='HTML',
                                    disable_web_page_preview=True,
                                    read_timeout=30,
                                    write_timeout=30,
                                    connect_timeout=30
                                )
                                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram (chat_id: {chat_id})")
                                break
                            except Exception as e:
                                if attempt < 2:
                                    logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥: {e}")
                                    await asyncio.sleep(5)
                                else:
                                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫: {e}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")
                self.telegram_queue.task_done()
                await asyncio.sleep(0.1)
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ telegram_worker: {e}")
                await asyncio.sleep(1)

    async def send_telegram_message(self, message: str, chat_ids: list = None):
        if chat_ids is None:
            chat_ids = TELEGRAM_CHAT_IDS

        if len(message) > 4096:
            parts = [message[i:i + 4090] for i in range(0, len(message), 4090)]
            for part in parts:
                await self.telegram_queue.put((chat_ids[0], part))
                await asyncio.sleep(0.5)
        else:
            for chat_id in chat_ids:
                await self.telegram_queue.put((chat_id, message))
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è chat_id: {chat_id}")

    async def telegram_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        current_time = self.format_moscow_time()
        mode = "–î–ï–ú–û-–†–ï–ñ–ò–ú–ï (MT5 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)" if self.demo_mode else "—Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"

        welcome_text = (
            f"üöÄ <b>–°–ö–ê–õ–¨–ü–ò–ù–ì –ë–û–¢ –î–õ–Ø –§–û–†–ï–ö–°</b>\n\n"
            f"üìä <b>–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:</b> {mode}\n"
            f"üí∞ <b>–î–µ–ø–æ–∑–∏—Ç:</b> ${self.account_balance}\n"
            f"üìä <b>–†–∞–∑–º–µ—Ä –ª–æ—Ç–∞:</b> {self.config['lot_size']}\n"
            f"üìä <b>–ë—Ä–æ–∫–µ—Ä:</b> FXPRO\n\n"
            "‚ö° <b>–ú—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º –∞–Ω–∞–ª–∏–∑</b> (M15, M5, M1)\n"
            "üìà <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:</b> RSI, MACD, Bollinger Bands, EMA, ATR, Stochastic\n\n"
            "üîÆ <b>–°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –î–õ–Ø –°–ö–ê–õ–¨–ü–ò–ù–ì–ê</b>\n\n"
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
            f"‚Ä¢ –ú–∏–Ω. —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {self.config['min_confidence'] * 100}%\n"
            f"‚Ä¢ –†–∏—Å–∫/–≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ: 1:{self.config['risk_reward_ratio']}\n"
            f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–Ω–∞–ª–∏–∑–∞: {self.config['analysis_interval']} —Å–µ–∫\n"
            f"‚Ä¢ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: –ú–æ—Å–∫–≤–∞ (UTC+3)\n"
            f"‚Ä¢ –†–∞–∑–º–µ—Ä –ª–æ—Ç–∞: {self.config['lot_size']}\n"
            f"‚Ä¢ –ú–∞–∫—Å. —Å–ø—Ä–µ–¥: {self.config['max_spread_pips']} –ø–∏–ø—Å–æ–≤\n\n"
            f"üïê <b>–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:</b> {current_time}\n\n"
            "üìä –°–∏–≥–Ω–∞–ª—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞\n"
            "üìà –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ\n\n"
            "üîç <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
            "/start - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"
            "/prediction - —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã\n"
            "/signal - –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª\n"
            "/balance - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–∞–Ω—Å–µ"
        )
        await self.send_telegram_message(welcome_text, [update.effective_chat.id])

    async def telegram_prediction(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /prediction"""
        if not self.last_prediction:
            await self.send_telegram_message("üìä –ü—Ä–æ–≥–Ω–æ–∑ –µ—â–µ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.",
                                             [update.effective_chat.id])
            return

        prediction_text = self.format_prediction_message()
        await self.send_telegram_message(prediction_text, [update.effective_chat.id])

    async def telegram_signal(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /signal"""
        if not self.signals:
            await self.send_telegram_message("üìä –°–∏–≥–Ω–∞–ª—ã –µ—â–µ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.",
                                             [update.effective_chat.id])
            return

        signal_text = self.format_signal_message()
        await self.send_telegram_message(signal_text, [update.effective_chat.id])

    async def telegram_balance(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /balance"""
        balance_text = (
            f"üí∞ <b>–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ë–ê–õ–ê–ù–°–ï</b>\n\n"
            f"üìä <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> ${self.account_balance:.2f}\n"
            f"üìà <b>–†–∞–∑–º–µ—Ä –ª–æ—Ç–∞:</b> {self.config['lot_size']}\n"
            f"‚öñÔ∏è <b>–†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É:</b> {self.config['risk_per_trade'] * 100}%\n"
            f"üî¢ <b>–û—Ç–∫—Ä—ã—Ç–æ –ø–æ–∑–∏—Ü–∏–π:</b> {len(self.positions)}\n\n"
            f"üìä <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏:</b>\n"
        )

        if self.positions:
            for i, pos in enumerate(self.positions[-5:]):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–¥–µ–ª–æ–∫
                profit_color = "üü¢" if pos['profit'] >= 0 else "üî¥"
                balance_text += f"{profit_color} {pos['symbol']} {pos['type']} | P&L: ${pos['profit']:.2f}\n"
        else:
            balance_text += "–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π\n"

        balance_text += f"\n‚è∞ <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {self.format_moscow_time()}"

        await self.send_telegram_message(balance_text, [update.effective_chat.id])

    def format_prediction_message(self):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º"""
        if not self.last_prediction:
            return "üìä –ü—Ä–æ–≥–Ω–æ–∑ –µ—â–µ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω"

        symbol = self.last_prediction['symbol']
        direction = self.last_prediction['direction']
        confidence = self.last_prediction['confidence'] * 100
        price = self.last_prediction['price']
        target = self.last_prediction['target_price']
        timeframe = self.last_prediction['timeframe']
        timestamp = self.format_moscow_time(self.last_prediction['timestamp'])

        emoji = "üü¢" if direction == "BUY" else "üî¥" if direction == "SELL" else "üü°"
        trend_emoji = "üìà" if direction == "BUY" else "üìâ" if direction == "SELL" else "‚ÜîÔ∏è"

        message = (
            f"{emoji} <b>–ü–†–û–ì–ù–û–ó –î–õ–Ø {symbol}</b> {trend_emoji}\n\n"
            f"<b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> <code>{direction}</code>\n"
            f"<b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> <code>{confidence:.1f}%</code>\n"
            f"<b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> <code>{price:.5f}</code>\n"
            f"<b>–¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞:</b> <code>{target:.5f}</code>\n"
            f"<b>–¢–∞–π–º—Ñ—Ä–µ–π–º:</b> <code>{timeframe}</code>\n"
            f"<b>–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞:</b> <code>{timestamp}</code>\n\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
        if self.prediction_history:
            message += "<b>üìä –ò–°–¢–û–†–ò–Ø –ü–†–û–ì–ù–û–ó–û–í:</b>\n"
            for i, pred in enumerate(self.prediction_history[-5:]):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
                pred_direction = pred['direction']
                pred_confidence = pred['confidence'] * 100
                pred_emoji = "üü¢" if pred_direction == "BUY" else "üî¥" if pred_direction == "SELL" else "üü°"
                pred_time = self.format_moscow_time(pred['timestamp'], '%H:%M:%S')
                message += f"{pred_emoji} {pred_time}: {pred_direction} ({pred_confidence:.1f}%)\n"

        message += f"\n<b>‚ö° –°–ª–µ–¥—É—é—â–∏–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ {self.config['analysis_interval']} —Å–µ–∫</b>"

        return message

    def format_signal_message(self):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–∏–≥–Ω–∞–ª–æ–º"""
        if not self.signals:
            return "üìä –°–∏–≥–Ω–∞–ª—ã –µ—â–µ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã"

        signal = self.signals[0]  # –ë–µ—Ä–µ–º —Å–∞–º—ã–π —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
        symbol = signal['symbol']
        signal_type = signal['signal']
        confidence = signal['confidence'] * 100
        price = signal['price']
        stop_loss = signal['stop_loss']
        take_profit = signal['take_profit']
        reasons = signal.get('detailed_reasons', ['–ù–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'])

        # –†–∞—Å—á–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏
        price_diff = abs(take_profit - price)
        potential_profit = (price_diff / price) * 100

        emoji = "üü¢" if signal_type == 'BUY' else "üî¥"
        trend_emoji = "üìà" if signal_type == 'BUY' else "üìâ"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–∫–≤–∏–¥–∞—Ü–∏—è—Ö –∏ –∫–∏—Ç–∞—Ö
        extra_info = ""
        if symbol in self.liquidation_levels:
            long_liq = len([l for l in self.liquidation_levels[symbol] if l['type'] == 'long'])
            short_liq = len([l for l in self.liquidation_levels[symbol] if l['type'] == 'short'])
            extra_info += f"üìä –õ–∏–∫–≤–∏–¥–∞—Ü–∏–∏: LONG {long_liq} | SHORT {short_liq}\n"

        if symbol in self.whale_activity:
            whale_buy = len([w for w in self.whale_activity[symbol] if w['type'] == 'buy'])
            whale_sell = len([w for w in self.whale_activity[symbol] if w['type'] == 'sell'])
            extra_info += f"üêã –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∏—Ç–æ–≤: BUY {whale_buy} | SELL {whale_sell}\n"

        if symbol in self.long_short_ratio:
            ratio = self.long_short_ratio[symbol]
            extra_info += f"‚öñÔ∏è –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ LONG/SHORT: {ratio.get('long', 0):.2f}/{ratio.get('short', 0):.2f}\n"

        message = (
            f"{emoji} <b>–°–ö–ê–õ–¨–ü–ò–ù–ì –°–ò–ì–ù–ê–õ –î–õ–Ø {symbol}</b> {trend_emoji}\n\n"
            f"<b>–¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞:</b> <code>{signal_type}</code>\n"
            f"<b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> <code>{confidence:.1f}%</code>\n"
            f"<b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> <code>{price:.5f}</code>\n"
            f"<b>–°—Ç–æ–ø-–ª–æ—Å—Å:</b> <code>{stop_loss:.5f}</code>\n"
            f"<b>–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç:</b> <code>{take_profit:.5f}</code>\n"
            f"<b>–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å:</b> <code>{potential_profit:.2f}%</code>\n\n"
            f"{extra_info}\n"
            f"<b>üìä –ü–û–î–†–û–ë–ù–´–ô –ê–ù–ê–õ–ò–ó:</b>\n"
        )

        for i, reason in enumerate(reasons[:5]):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 5 –ø—Ä–∏—á–∏–Ω–∞–º–∏
            message += f"‚Ä¢ {reason}\n"

        message += f"\n<b>‚ö° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {self.config['lot_size']} –ª–æ—Ç–∞</b>"

        return message

    def update_signal_history(self, symbol, signal_type, confidence):
        now = self.get_moscow_time()
        self.signal_history[symbol] = [sig for sig in self.signal_history[symbol]
                                       if now - sig['time'] < timedelta(hours=24)]
        self.signal_history[symbol].append({
            'time': now,
            'signal': signal_type,
            'confidence': confidence
        })

    def get_signal_count_last_24h(self, symbol):
        if symbol not in self.signal_history:
            return 0
        now = self.get_moscow_time()
        recent_signals = [sig for sig in self.signal_history[symbol]
                          if now - sig['time'] < timedelta(hours=24)]
        return len(recent_signals)

    async def send_automatic_signals(self):
        if not self.signals:
            logger.info("–ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram")
            return

        try:
            analysis_time_str = self.format_moscow_time(self.last_analysis_start_time)
            mode = "–î–ï–ú–û-–†–ï–ñ–ò–ú" if self.demo_mode else "–†–ï–ñ–ò–ú –†–ï–ê–õ–¨–ù–û–ì–û –í–†–ï–ú–ï–ù–ò"

            message = f"üöÄ <b>–ù–û–í–´–ï –°–ö–ê–õ–¨–ü–ò–ù–ì –°–ò–ì–ù–ê–õ–´ ({mode})</b>\n\n"
            message += "<i>–°–∏–≥–Ω–∞–ª—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –∞–Ω–∞–ª–∏–∑–µ</i>\n\n"

            for i, signal in enumerate(self.signals[:3]):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 3 —Å–∏–≥–Ω–∞–ª–∞–º–∏
                symbol_name = signal['symbol']
                confidence_percent = signal['confidence'] * 100
                signal_emoji = "üü¢" if signal['signal'] == 'BUY' else "üî¥"
                signal_count = self.get_signal_count_last_24h(signal['symbol'])

                # –†–∞—Å—á–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏
                price_diff = abs(signal['take_profit'] - signal['price'])
                potential_profit = (price_diff / signal['price']) * 100

                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–∫–≤–∏–¥–∞—Ü–∏—è—Ö –∏ –∫–∏—Ç–∞—Ö
                extra_info = ""
                if symbol_name in self.liquidation_levels:
                    long_liq = len([l for l in self.liquidation_levels[symbol_name] if l['type'] == 'long'])
                    short_liq = len([l for l in self.liquidation_levels[symbol_name] if l['type'] == 'short'])
                    extra_info += f"üìä –õ–∏–∫–≤–∏–¥–∞—Ü–∏–∏: LONG {long_liq} | SHORT {short_liq}\n"

                if symbol_name in self.whale_activity:
                    whale_buy = len([w for w in self.whale_activity[symbol_name] if w['type'] == 'buy'])
                    whale_sell = len([w for w in self.whale_activity[symbol_name] if w['type'] == 'sell'])
                    extra_info += f"üêã –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∏—Ç–æ–≤: BUY {whale_buy} | SELL {whale_sell}\n"

                message += (
                    f"{signal_emoji} <b>{html.escape(symbol_name)}</b>\n"
                    f"<b>üìä –°–∏–≥–Ω–∞–ª:</b> <code>{html.escape(signal['signal'])}</code> <code>(–°–∏–ª–∞: {confidence_percent:.0f}%)</code>\n"
                    f"<b>üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> <code>{signal['price']:.5f}</code>\n"
                    f"<b>üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç:</b> <code>{signal['take_profit']:.5f}</code>\n"
                    f"<b>üõë –°—Ç–æ–ø-–ª–æ—Å—Å:</b> <code>{signal['stop_loss']:.5f}</code>\n"
                    f"<b>üìà –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å:</b> <code>{potential_profit:.2f}%</code>\n"
                    f"<b>‚öñÔ∏è –†–∞–∑–º–µ—Ä –ª–æ—Ç–∞:</b> <code>{self.config['lot_size']}</code>\n"
                    f"<b>üî¢ –°–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ 24—á:</b> <code>{signal_count}</code>\n"
                    f"{extra_info}\n"
                )

                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—ã —Å–∏–≥–Ω–∞–ª–∞
                if signal.get('detailed_reasons'):
                    message += f"<b>üîç –ü—Ä–∏—á–∏–Ω—ã:</b>\n"
                    for reason in signal['detailed_reasons'][:3]:
                        message += f"‚Ä¢ {html.escape(reason)}\n"
                    message += "\n"

            message += f"<b>‚è±Ô∏è –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞:</b> {html.escape(analysis_time_str)}\n"
            message += "<b>üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</b> –ú–æ—Å–∫–≤–∞ (UTC+3)\n"
            message += f"<b>‚ö° –°–ª–µ–¥—É—é—â–∏–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ {self.config['analysis_interval']} —Å–µ–∫—É–Ω–¥</b>"

            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ {len(self.signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ Telegram")
            await self.send_telegram_message(message)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")

    async def send_prediction_update(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞"""
        if not self.last_prediction:
            return

        try:
            prediction_text = self.format_prediction_message()
            await self.send_telegram_message(prediction_text)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")

    def get_symbol_info(self, symbol):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏–º–≤–æ–ª–µ"""
        if self.demo_mode:
            return type('obj', (object,), {
                'spread': 15
            })()

        try:
            symbol_info = mt5.symbol_info(symbol)
            if symbol_info is None:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ {symbol}")
                return None
            return symbol_info
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏–º–≤–æ–ª–µ {symbol}: {e}")
            return None

    def get_spread_pips(self, symbol):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø—Ä–µ–¥–∞ –≤ –ø–∏–ø—Å–∞—Ö"""
        try:
            symbol_info = self.get_symbol_info(symbol)
            if symbol_info is None:
                return 0

            # –î–ª—è –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä –ø–∏–ø—Å = 0.0001, –∫—Ä–æ–º–µ JPY –ø–∞—Ä –≥–¥–µ –ø–∏–ø—Å = 0.01
            pip_value = 0.0001 if not symbol.endswith('JPY') else 0.01
            spread = symbol_info.spread * pip_value
            return spread
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–ø—Ä–µ–¥–∞ –¥–ª—è {symbol}: {e}")
            return 0

    async def fetch_ohlcv_data(self, symbol: str, timeframe: str, limit: int = 200) -> pd.DataFrame:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ OHLCV –¥–∞–Ω–Ω—ã—Ö –∏–∑ MT5 –∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö"""
        if self.demo_mode:
            return self.generate_forex_demo_data(symbol, timeframe, limit)

        try:
            timeframe_map = {
                'M15': mt5.TIMEFRAME_M15,
                'M5': mt5.TIMEFRAME_M5,
                'M1': mt5.TIMEFRAME_M1
            }

            mt5_timeframe = timeframe_map.get(timeframe)
            if mt5_timeframe is None:
                logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º: {timeframe}")
                return None

            rates = mt5.copy_rates_from_pos(symbol, mt5_timeframe, 0, limit)
            if rates is None:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} –Ω–∞ {timeframe}")
                return None

            df = pd.DataFrame(rates)
            df['time'] = pd.to_datetime(df['time'], unit='s')
            df.set_index('time', inplace=True)

            df.rename(columns={
                'open': 'open',
                'high': 'high',
                'low': 'low',
                'close': 'close',
                'tick_volume': 'volume'
            }, inplace=True)

            if df.isnull().values.any():
                return None

            return df
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} –Ω–∞ {timeframe}: {e}")
            return None

    def generate_forex_demo_data(self, symbol: str, timeframe: str, limit: int = 200) -> pd.DataFrame:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö –¥–ª—è Forex"""
        try:
            # –ë–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä
            base_prices = {
                'EURUSD': 1.0850,
                'GBPUSD': 1.2650,
                'USDJPY': 147.50,
                'USDCHF': 0.8800,
                'USDCAD': 1.3500,
                'AUDUSD': 0.6550,
                'NZDUSD': 0.6100,
                'XAUUSD': 1980.0  # –î–æ–±–∞–≤–∏–ª–∏ –∑–æ–ª–æ—Ç–æ
            }

            base_price = base_prices.get(symbol, 1.1000)

            volatility_multiplier = {
                'M1': 0.3,
                'M5': 0.5,
                'M15': 0.8
            }.get(timeframe, 0.5)

            # –£–≤–µ–ª–∏—á–∏–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –∑–æ–ª–æ—Ç–∞
            if symbol == 'XAUUSD':
                volatility_multiplier *= 2.0

            now = datetime.now()
            timeframe_minutes = self.config['timeframes'][timeframe]
            timestamps = [now - timedelta(minutes=timeframe_minutes * i) for i in range(limit)]
            timestamps.reverse()

            np.random.seed(int(time.time()))

            opens = []
            highs = []
            lows = []
            closes = []
            volumes = []

            # –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —Å –Ω–µ–±–æ–ª—å—à–∏–º —Å–ª—É—á–∞–π–Ω—ã–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º
            current_price = base_price * np.random.uniform(0.999, 1.001)

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–¥–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
            trend_direction = np.random.choice([-1, 1])
            trend_strength = np.random.uniform(0.0001, 0.0003)

            for i in range(limit):
                # –ë–∞–∑–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å —Ç—Ä–µ–Ω–¥–æ–º
                trend_component = current_price * trend_strength * trend_direction

                # –°–ª—É—á–∞–π–Ω—ã–π —à—É–º
                random_component = np.random.normal(0, 0.0003 * volatility_multiplier) * current_price

                price_change = trend_component + random_component

                open_price = current_price
                close_price = current_price + price_change

                # –í—ã—Å–æ–∫–∏–π –∏ –Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Å —É—á–µ—Ç–æ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
                high_price = max(open_price, close_price) + abs(
                    np.random.normal(0, 0.0002 * volatility_multiplier)) * current_price
                low_price = min(open_price, close_price) - abs(
                    np.random.normal(0, 0.0002 * volatility_multiplier)) * current_price

                # –û–±—ä–µ–º –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
                volume = int(np.random.randint(500, 2000) * (1 + volatility_multiplier * 0.5))

                opens.append(open_price)
                highs.append(high_price)
                lows.append(low_price)
                closes.append(close_price)
                volumes.append(volume)

                current_price = close_price

            df = pd.DataFrame({
                'open': opens,
                'high': highs,
                'low': lows,
                'close': closes,
                'volume': volumes
            }, index=timestamps)

            return df

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
            return None

    def calculate_technical_indicators(self, df: pd.DataFrame) -> pd.DataFrame:
        if df is None or len(df) < 100:
            return df

        try:
            # RSI
            df['rsi'] = talib.RSI(df['close'], timeperiod=14)
            # MACD
            macd, macd_signal, macd_hist = talib.MACD(df['close'], fastperiod=12, slowperiod=26, signalperiod=9)
            df['macd'] = macd
            df['macd_signal'] = macd_signal
            df['macd_hist'] = macd_hist
            # Bollinger Bands
            bb_upper, bb_middle, bb_lower = talib.BBANDS(df['close'], timeperiod=20, nbdevup=2, nbdevdn=2)
            df['bb_upper'] = bb_upper
            df['bb_middle'] = bb_middle
            df['bb_lower'] = bb_lower
            df['bb_width'] = (bb_upper - bb_lower) / bb_middle
            df['bb_percent'] = (df['close'] - bb_lower) / (bb_upper - bb_lower)
            # EMA
            df['ema_8'] = talib.EMA(df['close'], timeperiod=8)
            df['ema_21'] = talib.EMA(df['close'], timeperiod=21)
            df['ema_50'] = talib.EMA(df['close'], timeperiod=50)
            df['ema_200'] = talib.EMA(df['close'], timeperiod=200)
            # ATR
            df['atr'] = talib.ATR(df['high'], df['low'], df['close'], timeperiod=14)
            # Stochastic
            slowk, slowd = talib.STOCH(df['high'], df['low'], df['close'],
                                       fastk_period=14, slowk_period=3, slowd_period=3)
            df['stoch_k'] = slowk
            df['stoch_d'] = slowd
            # ADX
            df['adx'] = talib.ADX(df['high'], df['low'], df['close'], timeperiod=14)
            # Momentum
            df['momentum'] = talib.MOM(df['close'], timeperiod=10)
            # OBV
            df['obv'] = talib.OBV(df['close'], df['volume'])
            # Price Rate of Change
            df['roc'] = talib.ROC(df['close'], timeperiod=10)
            # Commodity Channel Index
            df['cci'] = talib.CCI(df['high'], df['low'], df['close'], timeperiod=20)
            # Williams %R
            df['williams_r'] = talib.WILLR(df['high'], df['low'], df['close'], timeperiod=14)
            # TRIX
            df['trix'] = talib.TRIX(df['close'], timeperiod=14)
            # Parabolic SAR
            df['sar'] = talib.SAR(df['high'], df['low'], acceleration=0.02, maximum=0.2)
            # Rate of Change
            df['roc'] = talib.ROC(df['close'], timeperiod=10)
            # Average Directional Index
            df['adx'] = talib.ADX(df['high'], df['low'], df['close'], timeperiod=14)
            # Plus Directional Indicator
            df['plus_di'] = talib.PLUS_DI(df['high'], df['low'], df['close'], timeperiod=14)
            # Minus Directional Indicator
            df['minus_di'] = talib.MINUS_DI(df['high'], df['low'], df['close'], timeperiod=14)
            # Linear Regression Slope
            df['linreg_slope'] = talib.LINEARREG_SLOPE(df['close'], timeperiod=14)

            # Price trends
            df['price_trend'] = self.calculate_price_trend(df)

            # Pin Bar detection
            df['pin_bar'] = self.detect_pin_bars(df)

            # Volume indicators
            df['volume_ma'] = talib.SMA(df['volume'], timeperiod=20)
            df['volume_ratio'] = df['volume'] / df['volume_ma']

            # Liquidation detection (–¥–æ–±–∞–≤–∏–ª–∏ –∞–Ω–∞–ª–∏–∑ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π)
            df['liquidation_signal'] = self.detect_liquidations(df)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
        return df

    def detect_pin_bars(self, df: pd.DataFrame) -> pd.Series:
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–∏–Ω-–±–∞—Ä–æ–≤"""
        try:
            pin_bars = pd.Series(0, index=df.index)
            for i in range(2, len(df)):
                body_size = abs(df['close'].iloc[i] - df['open'].iloc[i])
                total_range = df['high'].iloc[i] - df['low'].iloc[i]

                if total_range == 0:
                    continue

                body_to_range_ratio = body_size / total_range

                # Bullish pin bar (hammer)
                if (body_to_range_ratio < self.config['pin_bar_threshold'] and
                        (df['close'].iloc[i] - df['low'].iloc[i]) / total_range > 0.6 and
                        df['close'].iloc[i] > df['open'].iloc[i] and
                        df['close'].iloc[i] > df['close'].iloc[i - 1]):
                    pin_bars.iloc[i] = 1

                # Bearish pin bar (shooting star)
                elif (body_to_range_ratio < self.config['pin_bar_threshold'] and
                      (df['high'].iloc[i] - df['close'].iloc[i]) / total_range > 0.6 and
                      df['close'].iloc[i] < df['open'].iloc[i] and
                      df['close'].iloc[i] < df['close'].iloc[i - 1]):
                    pin_bars.iloc[i] = -1

            return pin_bars
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–∏–Ω-–±–∞—Ä–æ–≤: {e}")
            return pd.Series(0, index=df.index)

    def detect_liquidations(self, df: pd.DataFrame) -> pd.Series:
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π"""
        try:
            liquidation_signals = pd.Series(0, index=df.index)

            for i in range(1, len(df)):
                # –†–µ–∑–∫–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã —Å –≤—ã—Å–æ–∫–∏–º –æ–±—ä–µ–º–æ–º –º–æ–≥—É—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏
                price_change = abs(df['close'].iloc[i] - df['close'].iloc[i - 1]) / df['close'].iloc[i - 1]
                volume_ratio = df['volume'].iloc[i] / df['volume_ma'].iloc[i] if i > 0 else 1

                if price_change > self.config['liquidation_threshold'] and volume_ratio > 2.0:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
                    if df['close'].iloc[i] > df['close'].iloc[i - 1]:
                        # –†–µ–∑–∫–∏–π —Ä–æ—Å—Ç - –≤–æ–∑–º–æ–∂–Ω—ã –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ —à–æ—Ä—Ç–∏—Å—Ç–æ–≤
                        liquidation_signals.iloc[i] = 1
                    else:
                        # –†–µ–∑–∫–æ–µ –ø–∞–¥–µ–Ω–∏–µ - –≤–æ–∑–º–æ–∂–Ω—ã –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ –ª–æ–Ω–≥–∏—Å—Ç–æ–≤
                        liquidation_signals.iloc[i] = -1

            return liquidation_signals
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π: {e}")
            return pd.Series(0, index=df.index)

    def calculate_price_trend(self, df, period=20):
        try:
            x = np.arange(len(df))
            y = df['close'].values
            if len(df) > period:
                x = x[-period:]
                y = y[-period:]
            slope, _, r_value, _, _ = stats.linregress(x, y)
            return slope * r_value ** 2
        except Exception:
            return 0

    def analyze_multiple_timeframes(self, dfs: dict) -> dict:
        timeframe_weights = {'M15': 0.40, 'M5': 0.35, 'M1': 0.25}
        analysis_results = {}

        for tf, df in dfs.items():
            if df is None or len(df) < 50:
                continue

            df = df.dropna()
            if len(df) < 20:
                continue

            last = df.iloc[-1]
            prev = df.iloc[-2]
            tf_analysis = {
                'trend': 'neutral', 'momentum': 'neutral', 'volume': 'normal',
                'volatility': 'normal', 'signals': [], 'strength': 0,
                'price_action': 'neutral', 'market_condition': 'neutral',
                'detailed_signals': []
            }

            # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ –ø–æ EMA
            ema_trend_score = 0
            if last['ema_21'] > last['ema_50']:
                ema_trend_score += 1
                tf_analysis['detailed_signals'].append(('EMA21 > EMA50', 0.3))
            if last['ema_50'] > last['ema_200']:
                ema_trend_score += 1
                tf_analysis['detailed_signals'].append(('EMA50 > EMA200', 0.3))
            if last['close'] > last['ema_200']:
                ema_trend_score += 1
                tf_analysis['detailed_signals'].append(('Price > EMA200', 0.4))

            if ema_trend_score >= 2:
                tf_analysis['trend'] = 'bullish'
                tf_analysis['strength'] += ema_trend_score * 0.2
                tf_analysis['detailed_signals'].append(('Bullish EMA Trend', 0.6))
            elif ema_trend_score <= 1:
                tf_analysis['trend'] = 'bearish'
                tf_analysis['strength'] += (3 - ema_trend_score) * 0.2
                tf_analysis['detailed_signals'].append(('Bearish EMA Trend', 0.6))

            # –ê–Ω–∞–ª–∏–∑ –∏–º–ø—É–ª—å—Å–∞
            momentum_score = 0
            if last['rsi'] > 50:
                momentum_score += 1
                tf_analysis['detailed_signals'].append(('RSI > 50', 0.2))
            if last['macd'] > last['macd_signal']:
                momentum_score += 1
                tf_analysis['detailed_signals'].append(('MACD Bullish', 0.3))
            if last['stoch_k'] > 50:
                momentum_score += 1
                tf_analysis['detailed_signals'].append(('Stochastic > 50', 0.2))
            if last['close'] > last['ema_21']:
                momentum_score += 1
                tf_analysis['detailed_signals'].append(('Price > EMA21', 0.2))
            if last['trix'] > 0:
                momentum_score += 1
                tf_analysis['detailed_signals'].append(('TRIX Positive', 0.3))
            if last['roc'] > 0:
                momentum_score += 1
                tf_analysis['detailed_signals'].append(('ROC Positive', 0.2))

            if momentum_score >= 4:
                tf_analysis['momentum'] = 'bullish'
                tf_analysis['strength'] += momentum_score * 0.15
                tf_analysis['detailed_signals'].append(('Bullish Momentum', 0.5))
            elif momentum_score <= 2:
                tf_analysis['momentum'] = 'bearish'
                tf_analysis['strength'] += (6 - momentum_score) * 0.15
                tf_analysis['detailed_signals'].append(('Bearish Momentum', 0.5))

            # –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–∞
            volume_ratio = last['volume_ratio'] if 'volume_ratio' in last else 1.0
            if volume_ratio > self.config['volume_spike_threshold']:
                tf_analysis['volume'] = 'high'
                tf_analysis['strength'] += 0.3
                tf_analysis['detailed_signals'].append(('High Volume', 0.4))
            elif volume_ratio < 0.5:
                tf_analysis['volume'] = 'low'
                tf_analysis['strength'] -= 0.15
                tf_analysis['detailed_signals'].append(('Low Volume', -0.3))

            # –ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            if 'bb_width' in last and last['bb_width'] > df['bb_width'].mean() * 1.5:
                tf_analysis['volatility'] = 'high'
                tf_analysis['detailed_signals'].append(('High Volatility', 0.2))
            elif 'bb_width' in last and last['bb_width'] < df['bb_width'].mean() * 0.5:
                tf_analysis['volatility'] = 'low'
                tf_analysis['detailed_signals'].append(('Low Volatility', -0.2))

            # –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω–æ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
            price_action_score = 0
            is_bullish_candle = last['close'] > last['open']
            is_bearish_candle = last['close'] < last['open']

            if last['pin_bar'] == 1:
                price_action_score += 2
                tf_analysis['signals'].append(('bullish_pin_bar', 0.8))
                tf_analysis['detailed_signals'].append(('Bullish Pin Bar', 0.8))
            elif last['pin_bar'] == -1:
                price_action_score -= 2
                tf_analysis['signals'].append(('bearish_pin_bar', 0.8))
                tf_analysis['detailed_signals'].append(('Bearish Pin Bar', 0.8))

            if is_bullish_candle and last['close'] > prev['high'] and last['open'] < prev['low']:
                price_action_score += 2
                tf_analysis['signals'].append(('bullish_engulfing', 0.8))
                tf_analysis['detailed_signals'].append(('Bullish Engulfing', 0.8))
            elif is_bearish_candle and last['close'] < prev['low'] and last['open'] > prev['high']:
                price_action_score -= 2
                tf_analysis['signals'].append(('bearish_engulfing', 0.8))
                tf_analysis['detailed_signals'].append(('Bearish Engulfing', 0.8))

            if is_bullish_candle and (last['close'] - last['open']) / (last['high'] - last['low']) > 0.7:
                price_action_score += 1
                tf_analysis['signals'].append(('hammer', 0.6))
                tf_analysis['detailed_signals'].append(('Hammer Pattern', 0.6))
            elif is_bearish_candle and (last['open'] - last['close']) / (last['high'] - last['low']) > 0.7:
                price_action_score -= 1
                tf_analysis['signals'].append(('shooting_star', 0.6))
                tf_analysis['detailed_signals'].append(('Shooting Star', 0.6))

            if price_action_score >= 1:
                tf_analysis['price_action'] = 'bullish'
            elif price_action_score <= -1:
                tf_analysis['price_action'] = 'bearish'

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            if last['rsi'] < 30:
                tf_analysis['signals'].append(('oversold', 0.6))
                tf_analysis['detailed_signals'].append(('RSI Oversold', 0.6))
            elif last['rsi'] > 70:
                tf_analysis['signals'].append(('overbought', 0.6))
                tf_analysis['detailed_signals'].append(('RSI Overbought', 0.6))

            if last['macd'] > last['macd_signal'] and prev['macd'] <= prev['macd_signal']:
                tf_analysis['signals'].append(('macd_bullish', 0.7))
                tf_analysis['detailed_signals'].append(('MACD Crossover Bullish', 0.7))
            elif last['macd'] < last['macd_signal'] and prev['macd'] >= prev['macd_signal']:
                tf_analysis['signals'].append(('macd_bearish', 0.7))
                tf_analysis['detailed_signals'].append(('MACD Crossover Bearish', 0.7))

            if last['stoch_k'] < 20:
                tf_analysis['signals'].append(('stoch_oversold', 0.5))
                tf_analysis['detailed_signals'].append(('Stochastic Oversold', 0.5))
            elif last['stoch_k'] > 80:
                tf_analysis['signals'].append(('stoch_overbought', 0.5))
                tf_analysis['detailed_signals'].append(('Stochastic Overbought', 0.5))

            if last['adx'] > 25:
                tf_analysis['signals'].append(('strong_trend', 0.5))
                tf_analysis['detailed_signals'].append(('Strong Trend (ADX > 25)', 0.5))

            # –ê–Ω–∞–ª–∏–∑ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π
            if 'liquidation_signal' in last and last['liquidation_signal'] != 0:
                if last['liquidation_signal'] == 1:
                    tf_analysis['signals'].append(('short_liquidation', 0.7))
                    tf_analysis['detailed_signals'].append(('Short Liquidation', 0.7))
                else:
                    tf_analysis['signals'].append(('long_liquidation', 0.7))
                    tf_analysis['detailed_signals'].append(('Long Liquidation', 0.7))

            analysis_results[tf] = tf_analysis

        return analysis_results

    def calculate_confidence_from_analysis(self, analysis_results: dict) -> float:
        total_confidence = 0
        total_weight = 0
        signals_count = 0
        trend_alignment = 0
        confirmed_timeframes = 0

        for tf, analysis in analysis_results.items():
            weight = {'M15': 0.40, 'M5': 0.35, 'M1': 0.25}.get(tf, 0.3)

            if analysis['trend'] != 'neutral':
                confirmed_timeframes += 1

            if analysis['trend'] == 'bullish':
                total_confidence += analysis['strength'] * weight
            elif analysis['trend'] == 'bearish':
                total_confidence -= analysis['strength'] * weight

            if analysis['volume'] == 'high':
                if analysis['trend'] == 'bullish':
                    total_confidence += 0.3 * weight
                elif analysis['trend'] == 'bearish':
                    total_confidence -= 0.3 * weight

            if analysis['price_action'] == 'bullish':
                total_confidence += 0.4 * weight
            elif analysis['price_action'] == 'bearish':
                total_confidence -= 0.4 * weight

            for signal_name, signal_strength in analysis['signals']:
                if 'bull' in signal_name or 'overbought' in signal_name:
                    total_confidence += signal_strength * weight
                elif 'bear' in signal_name or 'oversold' in signal_name:
                    total_confidence -= signal_strength * weight
                signals_count += 1

            if tf in ['M15', 'M5']:
                if analysis['trend'] == 'bullish':
                    trend_alignment += weight
                elif analysis['trend'] == 'bearish':
                    trend_alignment -= weight

            total_weight += weight

        if confirmed_timeframes < self.config['required_timeframes']:
            return 0

        if total_weight > 0:
            confidence = total_confidence / total_weight
        else:
            confidence = 0

        if signals_count >= self.config['required_indicators'] and abs(confidence) > 0.4:
            confidence *= 1.5

        if abs(trend_alignment) > 0.4:
            confidence *= 1.5

        return min(max(confidence, -1), 1)

    def calculate_price_prediction(self, df: pd.DataFrame, signal_type: str, price: float) -> float:
        """–†–∞—Å—á–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ —Ü–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–Ω–¥–∞ –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            atr = df['atr'].iloc[-1]

            if signal_type == 'BUY':
                # –ü—Ä–æ–≥–Ω–æ–∑ —Ä–æ—Å—Ç–∞ —Ü–µ–Ω—ã
                prediction = price + (atr * self.config['atr_multiplier_tp'] * 1.5)
            else:
                # –ü—Ä–æ–≥–Ω–æ–∑ –ø–∞–¥–µ–Ω–∏—è —Ü–µ–Ω—ã
                prediction = price - (atr * self.config['atr_multiplier_tp'] * 1.5)

            return prediction
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ —Ü–µ–Ω—ã: {e}")
            return price

    def calculate_stop_loss_take_profit(self, df: pd.DataFrame, signal_type: str, price: float) -> tuple:
        try:
            atr = df['atr'].iloc[-1]
            min_sl_percent = 0.001  # –£–º–µ–Ω—å—à–∏–ª–∏ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
            max_sl_percent = 0.005  # –£–º–µ–Ω—å—à–∏–ª–∏ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞

            if signal_type == 'BUY':
                base_sl = price - (atr * self.config['atr_multiplier_sl'])
                base_tp = price + (atr * self.config['atr_multiplier_tp'] * self.config['risk_reward_ratio'])

                support_levels = self.find_support_levels(df)
                if support_levels:
                    closest_support = max([level for level in support_levels if level < price], default=None)
                    if closest_support and closest_support > base_sl:
                        base_sl = closest_support * 0.995

                min_sl_price = price * (1 - max_sl_percent)
                max_sl_price = price * (1 - min_sl_percent)
                base_sl = max(base_sl, min_sl_price)
                base_sl = min(base_sl, max_sl_price)

                risk = price - base_sl
                if risk > 0:
                    min_tp = price + risk * self.config['risk_reward_ratio']
                    base_tp = max(base_tp, min_tp)

                    resistance_levels = self.find_resistance_levels(df)
                    if resistance_levels:
                        closest_resistance = min([level for level in resistance_levels if level > price], default=None)
                        if closest_resistance and closest_resistance < base_tp:
                            base_tp = closest_resistance * 0.995
            else:
                base_sl = price + (atr * self.config['atr_multiplier_sl'])
                base_tp = price - (atr * self.config['atr_multiplier_tp'] * self.config['risk_reward_ratio'])

                resistance_levels = self.find_resistance_levels(df)
                if resistance_levels:
                    closest_resistance = min([level for level in resistance_levels if level > price], default=None)
                    if closest_resistance and closest_resistance < base_sl:
                        base_sl = closest_resistance * 1.005

                min_sl_price = price * (1 + min_sl_percent)
                max_sl_price = price * (1 + max_sl_percent)
                base_sl = min(base_sl, max_sl_price)
                base_sl = max(base_sl, min_sl_price)

                risk = base_sl - price
                if risk > 0:
                    min_tp = price - risk * self.config['risk_reward_ratio']
                    base_tp = min(base_tp, min_tp)

                    support_levels = self.find_support_levels(df)
                    if support_levels:
                        closest_support = max([level for level in support_levels if level < price], default=None)
                        if closest_support and closest_support > base_tp:
                            base_tp = closest_support * 1.005

            return base_sl, base_tp, None

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞: {e}")
            return None, None, None

    def find_support_levels(self, df: pd.DataFrame, lookback_period: int = 100) -> list:
        try:
            support_levels = []

            for i in range(5, len(df) - 5):
                if (df['low'].iloc[i] < df['low'].iloc[i - 1] and
                        df['low'].iloc[i] < df['low'].iloc[i - 2] and
                        df['low'].iloc[i] < df['low'].iloc[i - 3] and
                        df['low'].iloc[i] < df['low'].iloc[i - 4] and
                        df['low'].iloc[i] < df['low'].iloc[i - 5] and
                        df['low'].iloc[i] < df['low'].iloc[i + 1] and
                        df['low'].iloc[i] < df['low'].iloc[i + 2] and
                        df['low'].iloc[i] < df['low'].iloc[i + 3] and
                        df['low'].iloc[i] < df['low'].iloc[i + 4] and
                        df['low'].iloc[i] < df['low'].iloc[i + 5]):
                    support_levels.append(df['low'].iloc[i])

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            support_levels.append(df['ema_21'].iloc[-1])
            support_levels.append(df['ema_50'].iloc[-1])
            support_levels.append(df['ema_200'].iloc[-1])
            support_levels.append(df['bb_lower'].iloc[-1])

            # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ä–æ–≤–Ω–∏
            valid_levels = [level for level in support_levels if level < df['close'].iloc[-1]]
            if not valid_levels:
                # –ï—Å–ª–∏ –Ω–µ—Ç —É—Ä–æ–≤–Ω–µ–π –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
                valid_levels = [df['low'].min()]

            return sorted(set(valid_levels), reverse=True)[:5]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {e}")
            return []

    def find_resistance_levels(self, df: pd.DataFrame, lookback_period: int = 100) -> list:
        try:
            resistance_levels = []

            for i in range(5, len(df) - 5):
                if (df['high'].iloc[i] > df['high'].iloc[i - 1] and
                        df['high'].iloc[i] > df['high'].iloc[i - 2] and
                        df['high'].iloc[i] > df['high'].iloc[i - 3] and
                        df['high'].iloc[i] > df['high'].iloc[i - 4] and
                        df['high'].iloc[i] > df['high'].iloc[i - 5] and
                        df['high'].iloc[i] > df['high'].iloc[i + 1] and
                        df['high'].iloc[i] > df['high'].iloc[i + 2] and
                        df['high'].iloc[i] > df['high'].iloc[i + 3] and
                        df['high'].iloc[i] > df['high'].iloc[i + 4] and
                        df['high'].iloc[i] > df['high'].iloc[i + 5]):
                    resistance_levels.append(df['high'].iloc[i])

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —É—Ä–æ–≤–Ω–∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
            resistance_levels.append(df['ema_21'].iloc[-1])
            resistance_levels.append(df['ema_50'].iloc[-1])
            resistance_levels.append(df['ema_200'].iloc[-1])
            resistance_levels.append(df['bb_upper'].iloc[-1])

            # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ä–æ–≤–Ω–∏
            valid_levels = [level for level in resistance_levels if level > df['close'].iloc[-1]]
            if not valid_levels:
                # –ï—Å–ª–∏ –Ω–µ—Ç —É—Ä–æ–≤–Ω–µ–π –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
                valid_levels = [df['high'].max()]

            return sorted(set(valid_levels))[:5]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —É—Ä–æ–≤–Ω–µ–π —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è: {e}")
            return []

    def generate_detailed_reasons(self, analysis_results: dict) -> list:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –ø—Ä–∏—á–∏–Ω –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞"""
        reasons = []

        for tf, analysis in analysis_results.items():
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            for signal_name, signal_strength in analysis.get('detailed_signals', []):
                if abs(signal_strength) > 0.3:  # –¢–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ —Å–∏–≥–Ω–∞–ª—ã
                    direction = "–±—ã—á–∏–π" if signal_strength > 0 else "–º–µ–¥–≤–µ–∂–∏–π"
                    reasons.append(f"{tf}: {signal_name} ({direction})")

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–¥–µ
            if analysis['trend'] != 'neutral':
                reasons.append(f"{tf}: {analysis['trend']} —Ç—Ä–µ–Ω–¥")

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–º–µ
            if analysis['volume'] != 'normal':
                reasons.append(f"{tf}: {analysis['volume']} –æ–±—ä–µ–º")

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏—á–∏–Ω
        return reasons[:10]

    def check_liquidity_and_volatility(self, df: pd.DataFrame) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            atr = df['atr'].iloc[-1]
            if atr < self.config['volatility_min'] or atr > self.config['volatility_max']:
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä–µ–º
            volume_ma = df['volume'].rolling(20).mean().iloc[-1]
            current_volume = df['volume'].iloc[-1]
            if current_volume < volume_ma * 0.7:  # –ù–∏–∑–∫–∏–π –æ–±—ä–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ä–µ–¥–Ω–µ–≥–æ
                return False

            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏: {e}")
            return False

    async def detect_whale_activity(self, symbol: str, df: pd.DataFrame):
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∏—Ç–æ–≤ (–±–æ–ª—å—à–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤)"""
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–º—ã –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 —Å–≤–µ—á–∞—Ö
            recent_volumes = df['volume'].tail(5).values
            volume_ma = df['volume'].rolling(20).mean().iloc[-1]

            whale_detected = False
            whale_type = None

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–Ω–æ–º–∞–ª—å–Ω–æ –≤—ã—Å–æ–∫–∏—Ö –æ–±—ä–µ–º–æ–≤
            for i, volume in enumerate(recent_volumes):
                if volume > volume_ma * self.config['whale_volume_threshold']:
                    whale_detected = True
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –¥–≤–∏–∂–µ–Ω–∏—é —Ü–µ–Ω—ã
                    price_change = df['close'].iloc[-5 + i] - df['open'].iloc[-5 + i]
                    whale_type = 'buy' if price_change > 0 else 'sell'
                    break

            if whale_detected and whale_type:
                self.whale_activity[symbol].append({
                    'time': self.get_moscow_time(),
                    'type': whale_type,
                    'volume_ratio': volume / volume_ma,
                    'price': df['close'].iloc[-1]
                })

                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∏—Ç–æ–≤
                if len(self.whale_activity[symbol]) > 20:
                    self.whale_activity[symbol] = self.whale_activity[symbol][-20:]

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∏—Ç–æ–≤ –¥–ª—è {symbol}: {e}")

    async def update_liquidation_levels(self, symbol: str, df: pd.DataFrame):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π"""
        try:
            # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –∏–º–∏—Ç–∏—Ä—É–µ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç –±—Ä–æ–∫–µ—Ä–∞ –∏–ª–∏ –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤

            # –ò–º–∏—Ç–∞—Ü–∏—è –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑–∫–∏—Ö –¥–≤–∏–∂–µ–Ω–∏–π —Ü–µ–Ω—ã
            price_change = abs(df['close'].iloc[-1] - df['open'].iloc[-1]) / df['open'].iloc[-1]

            if price_change > self.config['liquidation_threshold']:
                liquidation_type = 'long' if df['close'].iloc[-1] < df['open'].iloc[-1] else 'short'

                self.liquidation_levels[symbol].append({
                    'time': self.get_moscow_time(),
                    'type': liquidation_type,
                    'price': df['close'].iloc[-1],
                    'change_percent': price_change * 100
                })

                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π
                if len(self.liquidation_levels[symbol]) > 20:
                    self.liquidation_levels[symbol] = self.liquidation_levels[symbol][-20:]

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π –¥–ª—è {symbol}: {e}")

    async def update_long_short_ratio(self, symbol: str, df: pd.DataFrame):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è long/short"""
        try:
            # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –∏–º–∏—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å—á–µ—Ç —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è long/short
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç –±—Ä–æ–∫–µ—Ä–∞

            # –ü—Ä–æ—Å—Ç–∞—è –∏–º–∏—Ç–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            rsi = df['rsi'].iloc[-1]
            trend = self.calculate_price_trend(df.tail(20))

            # –ß–µ–º –≤—ã—à–µ RSI –∏ —Ç—Ä–µ–Ω–¥, —Ç–µ–º –±–æ–ª—å—à–µ long –ø–æ–∑–∏—Ü–∏–π
            long_ratio = min(1.0, max(0.0, (rsi - 30) / 40 + trend * 0.5))
            short_ratio = 1.0 - long_ratio

            self.long_short_ratio[symbol] = {
                'long': long_ratio,
                'short': short_ratio,
                'time': self.get_moscow_time()
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è long/short –¥–ª—è {symbol}: {e}")

    def generate_trading_signal(self, dfs: dict, symbol: str, analysis_start_time) -> dict:
        if not dfs:
            return None

        try:
            spread = self.get_spread_pips(symbol)
            if spread > self.config['max_spread_pips']:
                logger.info(f"–°–ø—Ä–µ–¥ –¥–ª—è {symbol} —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫: {spread:.2f} –ø–∏–ø—Å–æ–≤")
                return None

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
            main_df = dfs.get('M5', next(iter(dfs.values())))
            if not self.check_liquidity_and_volatility(main_df):
                logger.info(f"–ù–∏–∑–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å/–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –¥–ª—è {symbol}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return None

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–∫–≤–∏–¥–∞—Ü–∏—è—Ö, –∫–∏—Ç–∞—Ö –∏ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–∏ long/short
            asyncio.create_task(self.detect_whale_activity(symbol, main_df))
            asyncio.create_task(self.update_liquidation_levels(symbol, main_df))
            asyncio.create_task(self.update_long_short_ratio(symbol, main_df))

            analysis_results = self.analyze_multiple_timeframes(dfs)
            if not analysis_results:
                return None

            confidence = self.calculate_confidence_from_analysis(analysis_results)
            last = main_df.iloc[-1]

            signal = {
                'symbol': symbol,
                'timestamp': analysis_start_time,
                'price': last['close'],
                'signal': 'HOLD',
                'confidence': abs(confidence),
                'reasons': [],
                'detailed_reasons': [],
                'stop_loss': 0,
                'take_profit': 0,
                'signal_count_24h': self.get_signal_count_last_24h(symbol)
            }

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã
            detailed_reasons = self.generate_detailed_reasons(analysis_results)
            signal['detailed_reasons'] = detailed_reasons

            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã
            for tf, analysis in analysis_results.items():
                if analysis['signals']:
                    signal['reasons'].append(f"{tf}: {', '.join([s[0] for s in analysis['signals']])}")
                if analysis['trend'] != 'neutral':
                    signal['reasons'].append(f"{tf} trend: {analysis['trend']}")

            if abs(confidence) < self.config['min_confidence']:
                signal['signal'] = 'HOLD'
                return signal

            price_change = abs((last['close'] - last['open']) / last['open'])
            if price_change < self.config['min_price_change']:
                signal['signal'] = 'HOLD'
                return signal

            if confidence > 0:
                signal['signal'] = 'BUY'
            else:
                signal['signal'] = 'SELL'

            stop_loss, take_profit, _ = self.calculate_stop_loss_take_profit(
                main_df, signal['signal'], signal['price']
            )

            if stop_loss is None or take_profit is None:
                signal['signal'] = 'HOLD'
                return signal

            signal['stop_loss'] = stop_loss
            signal['take_profit'] = take_profit

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑
            target_price = self.calculate_price_prediction(main_df, signal['signal'], signal['price'])
            self.last_prediction = {
                'symbol': symbol,
                'direction': signal['signal'],
                'confidence': abs(confidence),
                'price': signal['price'],
                'target_price': target_price,
                'timeframe': 'M5',
                'timestamp': analysis_start_time
            }

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
            self.prediction_history.append(self.last_prediction)
            if len(self.prediction_history) > self.config['prediction_history_size']:
                self.prediction_history.pop(0)

            self.update_signal_history(symbol, signal['signal'], signal['confidence'])
            return signal

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {symbol}: {e}")
            return None

    async def analyze_symbol(self, symbol: str, analysis_start_time) -> dict:
        try:
            dfs = {}
            for timeframe in self.config['timeframes']:
                df = await self.fetch_ohlcv_data(symbol, timeframe, limit=200)
                if df is not None:
                    df = self.calculate_technical_indicators(df)
                    dfs[timeframe] = df
                await asyncio.sleep(0.02)

            if not dfs:
                return None

            signal = self.generate_trading_signal(dfs, symbol, analysis_start_time)
            return signal
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
            return None

    async def run_analysis(self):
        logger.info("–ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞...")
        start_time = time.time()
        analysis_start_time = self.get_moscow_time()
        self.last_analysis_start_time = analysis_start_time

        self.top_symbols = self.get_symbols_list()
        self.analysis_stats['total_analyzed'] = len(self.top_symbols)
        if not self.top_symbols:
            logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return []

        tasks = []
        for symbol in self.top_symbols:
            task = asyncio.create_task(self.analyze_symbol(symbol, analysis_start_time))
            tasks.append(task)

        all_signals = []

        try:
            results = await asyncio.gather(*tasks, return_exceptions=True)
            for result in results:
                if isinstance(result, Exception):
                    continue
                elif result is not None:
                    all_signals.append(result)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞: {e}")

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–∏–≥–Ω–∞–ª—ã BUY/SELL
        trading_signals = [s for s in all_signals if s['signal'] in ['BUY', 'SELL']]
        self.signals = sorted(trading_signals, key=lambda x: x['confidence'], reverse=True)
        self.analysis_stats['signals_found'] = len(self.signals)
        analysis_time = time.time() - start_time
        logger.info(f"–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {analysis_time:.1f} —Å–µ–∫. –ù–∞–π–¥–µ–Ω–æ {len(self.signals)} —Å–∏–≥–Ω–∞–ª–æ–≤")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –∏ –ø—Ä–æ–≥–Ω–æ–∑
        if self.signals:
            await self.send_automatic_signals()
        await self.send_prediction_update()

        return self.signals

    def print_signals(self, max_signals: int = 5):
        if not self.signals:
            print("üö´ –ù–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
            return

        mode = "–î–ï–ú–û-–†–ï–ñ–ò–ú" if self.demo_mode else "–†–ï–ñ–ò–ú –†–ï–ê–õ–¨–ù–û–ì–û –í–†–ï–ú–ï–ù–ò"
        print("\n" + "=" * 120)
        print(f"üéØ –°–ö–ê–õ–¨–ü–ò–ù–ì –°–ò–ì–ù–ê–õ–´ - {mode}")
        print(f"‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞: {self.format_moscow_time(self.last_analysis_start_time)}")
        print("=" * 120)
        print(
            f"{'–†–∞–Ω–≥':<4} {'–ü–∞—Ä–∞':<10} {'–°–∏–≥–Ω–∞–ª':<8} {'–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å':<10} {'–¶–µ–Ω–∞':<10} {'R/R':<6} {'–í—Ö.24—á':<6} {'–ü—Ä–∏—á–∏–Ω—ã'}")
        print("-" * 120)

        for i, signal in enumerate(self.signals[:max_signals]):
            rank = f"{i + 1}"
            symbol = signal['symbol'][:10]
            signal_type = signal['signal'][:8]
            confidence = f"{signal['confidence'] * 100:.0f}%"
            price = f"{signal['price']:.5f}"
            rr_ratio = f"{abs(signal['take_profit'] - signal['price']) / abs(signal['price'] - signal['stop_loss']):.1f}"
            signal_count = f"{signal['signal_count_24h']}"
            reasons = ', '.join(signal['reasons'][:2]) if signal['reasons'] else 'N/A'

            print(
                f"{rank:<4} {symbol:<10} {signal_type:<8} {confidence:<10} {price:<10} {rr_ratio:<6} {signal_count:<6} {reasons}")

        print("=" * 120)

        for i, signal in enumerate(self.signals[:3]):
            print(
                f"\nüî• –¢–û–ü-{i + 1}: {signal['symbol']}")
            print(f"üìä –°–∏–≥–Ω–∞–ª: {signal['signal']} ({signal['confidence'] * 100:.0f}% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏)")
            print(f"üí∞ –¶–µ–Ω–∞: {signal['price']:.5f}")
            print(f"üõë –°—Ç–æ–ø-–ª–æ—Å—Å: {signal['stop_loss']:.5f}")
            print(f"üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {signal['take_profit']:.5f}")
            print(
                f"üìà R/R —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: 1:{abs(signal['take_profit'] - signal['price']) / abs(signal['price'] - signal['stop_loss']):.1f}")
            print(f"üî¢ –°–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ 24—á: {signal['signal_count_24h']}")

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–∫–≤–∏–¥–∞—Ü–∏—è—Ö –∏ –∫–∏—Ç–∞—Ö
            if signal['symbol'] in self.liquidation_levels:
                long_liq = len([l for l in self.liquidation_levels[signal['symbol']] if l['type'] == 'long'])
                short_liq = len([l for l in self.liquidation_levels[signal['symbol']] if l['type'] == 'short'])
                print(f"üìä –õ–∏–∫–≤–∏–¥–∞—Ü–∏–∏: LONG {long_liq} | SHORT {short_liq}")

            if signal['symbol'] in self.whale_activity:
                whale_buy = len([w for w in self.whale_activity[signal['symbol']] if w['type'] == 'buy'])
                whale_sell = len([w for w in self.whale_activity[signal['symbol']] if w['type'] == 'sell'])
                print(f"üêã –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∏—Ç–æ–≤: BUY {whale_buy} | SELL {whale_sell}")

            if signal['symbol'] in self.long_short_ratio:
                ratio = self.long_short_ratio[signal['symbol']]
                print(f"‚öñÔ∏è –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ LONG/SHORT: {ratio.get('long', 0):.2f}/{ratio.get('short', 0):.2f}")

            if signal.get('detailed_reasons'):
                print(f"üîç –ü–æ–¥—Ä–æ–±–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                for reason in signal['detailed_reasons'][:5]:
                    print(f"   ‚Ä¢ {reason}")

    async def run_continuous(self):
        analysis_count = 0
        while True:
            try:
                analysis_count += 1
                current_time = self.format_moscow_time()
                mode = "–î–ï–ú–û-–†–ï–ñ–ò–ú" if self.demo_mode else "–†–ï–ñ–ò–ú –†–ï–ê–õ–¨–ù–û–ì–û –í–†–ï–ú–ï–ù–ò"
                print(f"\n{'=' * 80}")
                print(f"üìä –°–ö–ê–õ–¨–ü–ò–ù–ì –ê–ù–ê–õ–ò–ó #{analysis_count} - {current_time} (–ú–°–ö) - {mode}")
                print(f"{'=' * 80}")
                start_time = time.time()
                await self.run_analysis()
                self.last_signals = self.signals.copy()
                if self.signals:
                    self.print_signals()
                else:
                    print("üö´ –°–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                execution_time = time.time() - start_time
                print(f"\n‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞: {execution_time:.1f} —Å–µ–∫—É–Ω–¥")
                print(
                    f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {self.analysis_stats['total_analyzed']} –ø–∞—Ä, {self.analysis_stats['signals_found']} —Å–∏–≥–Ω–∞–ª–æ–≤")
                print(f"üîÑ –°–ª–µ–¥—É—é—â–∏–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ {self.config['analysis_interval']} —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(self.config['analysis_interval'])
            except KeyboardInterrupt:
                print("\n\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except Exception as e:
                print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                print("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(5)


async def main():
    bot = MT5TradingBot()
    try:
        current_time = bot.format_moscow_time()
        mode = "–î–ï–ú–û-–†–ï–ñ–ò–ú–ï (MT5 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)" if bot.demo_mode else "—Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"

        print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫–∞–ª—å–ø–∏–Ω–≥ –±–æ—Ç–∞ –¥–ª—è Forex!")
        print(f"üìä –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞ –≤ {mode}")
        print("‚ö° –ú—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º –∞–Ω–∞–ª–∏–∑ (M15, M5, M1)")
        print(
            "üìà –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: RSI, MACD, Bollinger Bands, EMA, ATR, Stochastic")
        print(
            f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏: –º–∏–Ω. —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {bot.config['min_confidence'] * 100}%, R/R=1:{bot.config['risk_reward_ratio']}")
        print(f"üí∞ –î–µ–ø–æ–∑–∏—Ç: ${bot.account_balance}")
        print(f"üìä –†–∞–∑–º–µ—Ä –ª–æ—Ç–∞: {bot.config['lot_size']}")
        print(f"üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: –ú–æ—Å–∫–≤–∞ (UTC+3)")
        print(f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}")

        if not bot.demo_mode:
            if not bot.initialize_mt5():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MT5. –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º.")
                bot.demo_mode = True
                bot.config['demo_mode'] = True

        print("‚è∏Ô∏è –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C\n")
        await bot.initialize_telegram()
        print("üìà –í—ã–ø–æ–ª–Ω—è—é –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑...")
        await bot.run_analysis()
        bot.last_signals = bot.signals.copy()
        if bot.signals:
            bot.print_signals()
        else:
            print("üìä –°–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        await bot.run_continuous()
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        if bot.telegram_app:
            await bot.telegram_app.updater.stop()
            await bot.telegram_app.stop()
            await bot.telegram_app.shutdown()
        if bot.telegram_worker_task:
            bot.telegram_worker_task.cancel()
        if MT5_AVAILABLE:
            mt5.shutdown()


if __name__ == "__main__":
    try:
        loop = asyncio.get_event_loop()
        if loop.is_running():
            loop.stop()
    except:
        pass

    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        print(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏: {e}")
        time.sleep(10)
