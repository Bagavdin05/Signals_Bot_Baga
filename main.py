import ccxt
import pandas as pd
import numpy as np
import time
from datetime import datetime
import logging
import asyncio
import talib
import warnings
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import html

warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger('FuturesBot')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram –±–æ—Ç–∞
TELEGRAM_BOT_TOKEN = "8328135138:AAE5mLIWG59kM8STODbfPoLkd19iykbOmcM"
TELEGRAM_CHAT_IDS = ["1167694150", "7916502470", "5381553894"]


class FuturesTradingBot:
    def __init__(self):
        self.exchanges = self.initialize_exchanges()
        self.telegram_app = None
        self.last_analysis_time = None
        self.last_signals = []
        self.is_analyzing = False
        self.analysis_lock = asyncio.Lock()
        self.telegram_queue = asyncio.Queue()
        self.telegram_worker_task = None

        self.config = {
            'timeframes': ['15m', '5m', '1h'],
            'min_volume_24h': 1000000,
            'max_symbols_per_exchange': 30,
            'analysis_interval': 60,
            'risk_per_trade': 0.02,
            'virtual_balance': 1000,
            'timeout': 10000,
            'min_confidence': 0.80,
            'risk_reward_ratio': 2.0,
            'atr_multiplier_sl': 1.3,
            'atr_multiplier_tp': 1,
            'blacklist': ['USDC/USDT', 'USDC/USD', 'USDCE/USDT', 'USDCB/USDT', 'BUSD/USDT'],
            'signal_validity_seconds': 300,
            'priority_exchanges': ['bybit', 'mexc', 'okx', 'gateio', 'bitget', 'kucoin', 'htx', 'bingx', 'phemex'],
            'required_indicators': 3
        }

        self.top_symbols = []
        self.signals = []
        self.analysis_stats = {'total_analyzed': 0, 'signals_found': 0}

        logger.info("–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def initialize_telegram(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞"""
        try:
            self.telegram_app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
            self.telegram_app.add_handler(CommandHandler("start", self.telegram_start))

            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
            await self.telegram_app.initialize()
            await self.telegram_app.start()
            await self.telegram_app.updater.start_polling()

            # –ó–∞–ø—É—Å–∫–∞–µ–º worker –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            self.telegram_worker_task = asyncio.create_task(self.telegram_worker())

            logger.info("Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞: {e}")

    async def telegram_worker(self):
        """–†–∞–±–æ—Ç–Ω–∏–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
        while True:
            try:
                chat_id, message = await self.telegram_queue.get()

                if chat_id and message:
                    await self.telegram_app.bot.send_message(
                        chat_id=chat_id,
                        text=message,
                        parse_mode='HTML',
                        disable_web_page_preview=True
                    )

                self.telegram_queue.task_done()
                await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ telegram_worker: {e}")
                await asyncio.sleep(1)

    async def send_telegram_message(self, message: str, chat_ids: list = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        if chat_ids is None:
            chat_ids = TELEGRAM_CHAT_IDS

        for chat_id in chat_ids:
            await self.telegram_queue.put((chat_id, message))

    async def telegram_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = (
            "üöÄ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤\n\n"
            "üìä –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –±–∏—Ä–∂–∏: Bybit, MEXC, OKX, Gate.io, Bitget, KuCoin, HTX, BingX, Phemex\n\n"
            "‚ö° –ú—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º –∞–Ω–∞–ª–∏–∑ (1h, 15m, 5m)\n"
            "üìà –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: RSI, MACD, Bollinger Bands, EMA, Volume\n\n"
            "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –ø—Ä–∏ –∏—Ö –ø–æ—è–≤–ª–µ–Ω–∏–∏!\n\n"
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            f"‚Ä¢ –ú–∏–Ω. —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {self.config['min_confidence'] * 100}%\n"
            f"‚Ä¢ –†–∏—Å–∫/–≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ: 1:{self.config['risk_reward_ratio']}\n"
            f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–Ω–∞–ª–∏–∑–∞: {self.config['analysis_interval']} —Å–µ–∫\n\n"
            "üìä –°–∏–≥–Ω–∞–ª—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"
        )

        await self.send_telegram_message(welcome_text, [update.effective_chat.id])

    async def send_automatic_signals(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞"""
        if not self.signals:
            # –ï—Å–ª–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º
            no_signals_message = (
                "üìä <b>–ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù</b>\n\n"
                "‚ùå –¢–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n"
                f"‚è±Ô∏è –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {html.escape(self.last_analysis_time.strftime('%Y-%m-%d %H:%M:%S'))}\n"
                "üîÑ –°–ª–µ–¥—É—é—â–∏–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥"
            )
            await self.send_telegram_message(no_signals_message)
            return

        try:
            message = "üöÄ <b>–ù–û–í–´–ï –¢–û–†–ì–û–í–´–ï –°–ò–ì–ù–ê–õ–´</b>\n\n"
            message += "<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –±–∏—Ä–∂—É, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ.</i>\n\n"

            for i, signal in enumerate(self.signals[:5]):  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-5 —Å–∏–≥–Ω–∞–ª–æ–≤
                symbol_name = signal['symbol'].replace('/USDT', '')
                exchange_url = self.get_exchange_url(signal['exchange'], signal['symbol'])
                confidence_percent = signal['confidence'] * 100
                signal_emoji = "üü¢" if signal['signal'] == 'LONG' else "üî¥"
                formatted_exchange = self.format_exchange_name(signal['exchange'])

                message += (
                    f"{signal_emoji} <b>#{i + 1}: <a href='{exchange_url}'>{html.escape(formatted_exchange)}</a></b>\n"
                    f"<b>ü™ô –ú–æ–Ω–µ—Ç–∞:</b> <code>{html.escape(symbol_name)}</code>\n"
                    f"<b>üìä –°–∏–≥–Ω–∞–ª:</b> <code>{html.escape(signal['signal'])}</code> <code>(–°–∏–ª–∞: {confidence_percent:.0f}%)</code>\n"
                    f"<b>üí∞ –¶–µ–Ω–∞:</b> <code>{signal['price']:.6f}</code>\n"
                    f"<b>üõë –°—Ç–æ–ø-–ª–æ—Å—Å:</b> <code>{signal['stop_loss']:.6f}</code>\n"
                    f"<b>üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç:</b> <code>{signal['take_profit']:.6f}</code>\n"
                    f"<b>‚öñÔ∏è –†–∞–∑–º–µ—Ä:</b> <code>{signal['recommended_size']:.4f}</code>\n\n"
                )

            message += f"<b>‚è±Ô∏è –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞:</b> {html.escape(self.last_analysis_time.strftime('%Y-%m-%d %H:%M:%S'))}\n"
            message += "<b>‚ö° –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ</b>"

            await self.send_telegram_message(message)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")

    def get_exchange_url(self, exchange_name: str, symbol: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç URL –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã –Ω–∞ –±–∏—Ä–∂–µ"""
        base_symbol = symbol.replace('/USDT', '').replace(':', '').replace('-', '')

        urls = {
            'bybit': f'https://www.bybit.com/trade-uspt/{base_symbol}USDT',
            'okx': f'https://www.okx.com/trade-swap/{base_symbol}-USDT-SWAP',
            'mexc': f'https://futures.mexc.com/exchange/{base_symbol}_USDT',
            'gateio': f'https://www.gate.io/futures_trade/{base_symbol}_USDT',
            'bitget': f'https://www.bitget.com/futures/{base_symbol}USDT',
            'kucoin': f'https://futures.kucoin.com/trade/{base_symbol}USDT',
            'htx': f'https://www.htx.com/futures/{base_symbol}_USDT',
            'bingx': f'https://bingx.com/swap/{base_symbol}-USDT',
            'phemex': f'https://phemex.com/contracts/{base_symbol}USDT'
        }

        return urls.get(exchange_name, f'https://www.{exchange_name}.com')

    def format_exchange_name(self, exchange_name: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∏—Ä–∂–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä"""
        exchange_names = {
            'bybit': 'Bybit',
            'mexc': 'MEXC',
            'okx': 'OKX',
            'gateio': 'Gate.io',
            'bitget': 'Bitget',
            'kucoin': 'KuCoin',
            'htx': 'HTX',
            'bingx': 'BingX',
            'phemex': 'Phemex'
        }
        return exchange_names.get(exchange_name, exchange_name.upper())

    def initialize_exchanges(self) -> dict:
        exchanges = {}

        exchange_configs = {
            'bybit': {'options': {'defaultType': 'swap'}, 'timeout': 10000},
            'mexc': {'options': {'defaultType': 'swap'}, 'timeout': 10000},
            'okx': {'options': {'defaultType': 'swap'}, 'timeout': 10000},
            'gateio': {'options': {'defaultType': 'swap'}, 'timeout': 10000},
            'bitget': {'options': {'defaultType': 'swap'}, 'timeout': 10000},
            'kucoin': {'options': {'defaultType': 'swap'}, 'timeout': 10000},
            'htx': {'options': {'defaultType': 'swap'}, 'timeout': 10000},
            'bingx': {'options': {'defaultType': 'swap'}, 'timeout': 10000},
            'phemex': {'options': {'defaultType': 'swap'}, 'timeout': 10000}
        }

        for exchange_name, config in exchange_configs.items():
            try:
                exchange_class = getattr(ccxt, exchange_name)
                exchange_instance = exchange_class({
                    'timeout': config['timeout'],
                    'enableRateLimit': True,
                    'options': config['options']
                })

                exchange_instance.load_markets()
                exchanges[exchange_name] = exchange_instance
                logger.info(f"–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {exchange_name}")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {exchange_name}: {e}")
                exchanges[exchange_name] = None

        return exchanges

    def is_blacklisted(self, symbol: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Å–∏–º–≤–æ–ª –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ"""
        symbol_upper = symbol.upper()
        for blacklisted_symbol in self.config['blacklist']:
            if blacklisted_symbol.upper() in symbol_upper:
                return True
        return False

    def get_futures_symbols(self, exchange, exchange_name: str) -> list:
        futures_symbols = []

        try:
            markets = exchange.load_markets()

            for symbol, market in markets.items():
                try:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—ã –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
                    if self.is_blacklisted(symbol):
                        continue

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ñ—å—é—á–µ—Ä—Å–Ω—ã–π —Ä—ã–Ω–æ–∫ —Å USDT
                    if (market.get('swap', False) or market.get('future', False) or
                            'swap' in symbol.lower() or 'future' in symbol.lower() or
                            '/USDT:' in symbol or symbol.endswith('/USDT') or
                            'USDT' in symbol and ('PERP' in symbol or 'SWAP' in symbol)):

                        if 'USDT' in symbol and market.get('active', False):
                            futures_symbols.append(symbol)

                except Exception:
                    continue

            logger.info(f"–° {exchange_name} –Ω–∞–π–¥–µ–Ω–æ {len(futures_symbols)} —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –ø–∞—Ä")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä —Å {exchange_name}: {e}")

        return futures_symbols[:self.config['max_symbols_per_exchange']]

    async def fetch_exchange_volume_data(self, exchange, exchange_name: str, symbols: list) -> dict:
        volume_map = {}

        try:
            tickers = exchange.fetch_tickers(symbols)

            for symbol, ticker in tickers.items():
                try:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—ã –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
                    if self.is_blacklisted(symbol):
                        continue

                    volume = ticker.get('quoteVolume', 0)
                    if volume and volume > self.config['min_volume_24h']:
                        normalized_symbol = symbol.replace(':', '/').replace('-', '/')
                        volume_map[normalized_symbol] = volume

                except Exception:
                    continue

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–º–∞ —Å {exchange_name}: {e}")

        return volume_map

    async def fetch_top_symbols(self) -> list:
        all_volume_map = {}
        exchange_weights = {'bybit': 1.2, 'okx': 1.1, 'mexc': 0.9, 'gateio': 0.9, 'phemex': 0.8}

        for exchange_name in self.config['priority_exchanges']:
            exchange = self.exchanges.get(exchange_name)
            if exchange is None:
                continue

            try:
                futures_symbols = self.get_futures_symbols(exchange, exchange_name)

                if not futures_symbols:
                    continue

                volume_map = await self.fetch_exchange_volume_data(exchange, exchange_name, futures_symbols)

                # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–µ—Å –±–∏—Ä–∂–∏ –∫ –æ–±—ä–µ–º–∞–º
                weight = exchange_weights.get(exchange_name, 1.0)
                for symbol, volume in volume_map.items():
                    weighted_volume = volume * weight
                    if symbol in all_volume_map:
                        all_volume_map[symbol] += weighted_volume
                    else:
                        all_volume_map[symbol] = weighted_volume

                logger.info(f"–° {exchange_name} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(volume_map)} –ø–∞—Ä —Å –æ–±—ä–µ–º–æ–º")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å {exchange_name}: {e}")
                continue

        sorted_symbols = sorted(all_volume_map.items(), key=lambda x: x[1], reverse=True)
        top_symbols = [symbol for symbol, volume in sorted_symbols[:50]]

        logger.info(f"–û—Ç–æ–±—Ä–∞–Ω–æ —Ç–æ–ø {len(top_symbols)} –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return top_symbols

    async def fetch_ohlcv_data(self, exchange_name: str, symbol: str, timeframe: str, limit: int = 100) -> pd.DataFrame:
        exchange = self.exchanges.get(exchange_name)
        if exchange is None:
            return None

        try:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—ã –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
            if self.is_blacklisted(symbol):
                return None

            normalized_symbol = self.normalize_symbol_for_exchange(symbol, exchange_name)
            if not normalized_symbol:
                return None

            await asyncio.sleep(np.random.uniform(0.01, 0.05))

            ohlcv = exchange.fetch_ohlcv(normalized_symbol, timeframe, limit=limit)

            if not ohlcv or len(ohlcv) < 50:
                return None

            df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            df.set_index('timestamp', inplace=True)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ NaN –∑–Ω–∞—á–µ–Ω–∏–π
            if df.isnull().values.any():
                return None

            return df

        except Exception:
            return None

    def normalize_symbol_for_exchange(self, symbol: str, exchange_name: str) -> str:
        exchange = self.exchanges.get(exchange_name)
        if not exchange:
            return None

        try:
            if symbol in exchange.symbols:
                return symbol

            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∞
            variations = [
                symbol,
                symbol.replace('/', ''),
                symbol.replace('/', ':'),
                symbol.replace('/', '-'),
                symbol.replace('/USDT', 'USDT'),
                symbol.replace('/USDT', '-USDT'),
                symbol.replace('/USDT', ':USDT'),
            ]

            for variation in variations:
                if variation in exchange.symbols:
                    return variation

            return None

        except Exception:
            return None

    def calculate_technical_indicators(self, df: pd.DataFrame) -> pd.DataFrame:
        if df is None or len(df) < 50:
            return df

        try:
            # RSI
            df['rsi'] = talib.RSI(df['close'], timeperiod=14)

            # MACD
            macd, macd_signal, macd_hist = talib.MACD(df['close'], fastperiod=12, slowperiod=26, signalperiod=9)
            df['macd'] = macd
            df['macd_signal'] = macd_signal
            df['macd_hist'] = macd_hist

            # Bollinger Bands
            bb_upper, bb_middle, bb_lower = talib.BBANDS(df['close'], timeperiod=20, nbdevup=2, nbdevdn=2)
            df['bb_upper'] = bb_upper
            df['bb_middle'] = bb_middle
            df['bb_lower'] = bb_lower
            df['bb_width'] = (bb_upper - bb_lower) / bb_middle

            # EMA
            df['ema_8'] = talib.EMA(df['close'], timeperiod=8)
            df['ema_21'] = talib.EMA(df['close'], timeperiod=21)
            df['ema_50'] = talib.EMA(df['close'], timeperiod=50)
            df['ema_200'] = talib.EMA(df['close'], timeperiod=200)

            # Volume
            df['volume_ma'] = talib.SMA(df['volume'], timeperiod=20)
            df['volume_ratio'] = df['volume'] / df['volume_ma'].replace(0, 1)

            # ATR
            df['atr'] = talib.ATR(df['high'], df['low'], df['close'], timeperiod=14)

            # Stochastic
            slowk, slowd = talib.STOCH(df['high'], df['low'], df['close'],
                                       fastk_period=14, slowk_period=3, slowd_period=3)
            df['stoch_k'] = slowk
            df['stoch_d'] = slowd

            # ADX
            df['adx'] = talib.ADX(df['high'], df['low'], df['close'], timeperiod=14)

            # Momentum
            df['momentum'] = talib.MOM(df['close'], timeperiod=10)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
            return df

        return df

    def analyze_multiple_timeframes(self, dfs: dict) -> dict:
        """–ê–Ω–∞–ª–∏–∑ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö"""
        timeframe_weights = {'1h': 0.4, '15m': 0.35, '5m': 0.25}
        analysis_results = {}

        for tf, df in dfs.items():
            if df is None or len(df) < 20:
                continue

            last = df.iloc[-1]
            prev = df.iloc[-2]

            tf_analysis = {
                'trend': 'neutral',
                'momentum': 'neutral',
                'volume': 'normal',
                'signals': []
            }

            # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
            if last['ema_21'] > last['ema_50'] > last['ema_200']:
                tf_analysis['trend'] = 'bullish'
            elif last['ema_21'] < last['ema_50'] < last['ema_200']:
                tf_analysis['trend'] = 'bearish'

            # –ê–Ω–∞–ª–∏–∑ –∏–º–ø—É–ª—å—Å–∞
            if last['rsi'] > 60 and last['macd'] > last['macd_signal']:
                tf_analysis['momentum'] = 'bullish'
            elif last['rsi'] < 40 and last['macd'] < last['macd_signal']:
                tf_analysis['momentum'] = 'bearish'

            # –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–∞
            if last['volume_ratio'] > 1.8:
                tf_analysis['volume'] = 'high'
            elif last['volume_ratio'] < 0.5:
                tf_analysis['volume'] = 'low'

            # –°–∏–≥–Ω–∞–ª—ã
            if last['rsi'] < 35 and last['close'] < last['bb_lower']:
                tf_analysis['signals'].append(('oversold', 0.3))
            elif last['rsi'] > 65 and last['close'] > last['bb_upper']:
                tf_analysis['signals'].append(('overbought', 0.3))

            if last['macd'] > last['macd_signal'] and prev['macd'] <= prev['macd_signal']:
                tf_analysis['signals'].append(('macd_bullish', 0.4))
            elif last['macd'] < last['macd_signal'] and prev['macd'] >= prev['macd_signal']:
                tf_analysis['signals'].append(('macd_bearish', 0.4))

            if last['stoch_k'] < 20 and last['stoch_d'] < 20:
                tf_analysis['signals'].append(('stoch_oversold', 0.2))
            elif last['stoch_k'] > 80 and last['stoch_d'] > 80:
                tf_analysis['signals'].append(('stoch_overbought', 0.2))

            analysis_results[tf] = tf_analysis

        return analysis_results

    def calculate_confidence_from_analysis(self, analysis_results: dict) -> float:
        """–†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤"""
        total_confidence = 0
        total_weight = 0
        signals_count = 0

        for tf, analysis in analysis_results.items():
            weight = {'1h': 0.4, '15m': 0.35, '5m': 0.25}.get(tf, 0.3)

            # –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –æ—Ç —Ç—Ä–µ–Ω–¥–∞
            if analysis['trend'] == 'bullish':
                total_confidence += 0.2 * weight
            elif analysis['trend'] == 'bearish':
                total_confidence -= 0.2 * weight

            # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –æ—Ç –∏–º–ø—É–ª—å—Å–∞
            if analysis['momentum'] == 'bullish':
                total_confidence += 0.3 * weight
            elif analysis['momentum'] == 'bearish':
                total_confidence -= 0.3 * weight

            # –°–∏–≥–Ω–∞–ª—ã
            for signal_name, signal_strength in analysis['signals']:
                if 'bull' in signal_name or 'overbought' in signal_name:
                    total_confidence += signal_strength * weight
                elif 'bear' in signal_name or 'oversold' in signal_name:
                    total_confidence -= signal_strength * weight
                signals_count += 1

            total_weight += weight

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        if total_weight > 0:
            confidence = total_confidence / total_weight
        else:
            confidence = 0

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–∞—Ö
        if signals_count >= 3 and abs(confidence) > 0.3:
            confidence *= 1.2

        return min(max(confidence, -1), 1)

    def calculate_stop_loss_take_profit(self, df: pd.DataFrame, signal_type: str, price: float) -> tuple:
        """–†–∞—Å—á–µ—Ç —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ ATR –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ATR –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            atr = df['atr'].iloc[-1]

            # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
            min_sl_percent = 0.005  # 0.5%
            max_sl_percent = 0.03  # 3%

            # –ë–∞–∑–æ–≤—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ ATR
            if signal_type == 'LONG':
                # –î–ª—è –ª–æ–Ω–≥–∞: —Å—Ç–æ–ø-–ª–æ—Å—Å –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
                base_sl = price - (atr * self.config['atr_multiplier_sl'])
                base_tp = price + (atr * self.config['atr_multiplier_tp'] * self.config['risk_reward_ratio'])

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –¥–ª—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
                support_levels = self.find_support_levels(df)
                if support_levels:
                    # –ë–µ—Ä–µ–º –±–ª–∏–∂–∞–π—à–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
                    closest_support = max([level for level in support_levels if level < price], default=None)
                    if closest_support and closest_support > base_sl:
                        base_sl = closest_support * 0.995  # –ù–µ–º–Ω–æ–≥–æ –Ω–∏–∂–µ —É—Ä–æ–≤–Ω—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏

                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å
                min_sl_price = price * (1 - max_sl_percent)
                max_sl_price = price * (1 - min_sl_percent)
                base_sl = max(base_sl, min_sl_price)
                base_sl = min(base_sl, max_sl_price)

            else:  # SHORT
                # –î–ª—è —à–æ—Ä—Ç–∞: —Å—Ç–æ–ø-–ª–æ—Å—Å –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
                base_sl = price + (atr * self.config['atr_multiplier_sl'])
                base_tp = price - (atr * self.config['atr_multiplier_tp'] * self.config['risk_reward_ratio'])

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –¥–ª—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
                resistance_levels = self.find_resistance_levels(df)
                if resistance_levels:
                    # –ë–µ—Ä–µ–º –±–ª–∏–∂–∞–π—à–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
                    closest_resistance = min([level for level in resistance_levels if level > price], default=None)
                    if closest_resistance and closest_resistance < base_sl:
                        base_sl = closest_resistance * 1.005  # –ù–µ–º–Ω–æ–≥–æ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è

                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å
                min_sl_price = price * (1 + min_sl_percent)
                max_sl_price = price * (1 + max_sl_percent)
                base_sl = min(base_sl, max_sl_price)
                base_sl = max(base_sl, min_sl_price)

            return base_sl, base_tp

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞: {e}")
            # –†–µ–∑–µ—Ä–≤–Ω—ã–π —Ä–∞—Å—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
            if signal_type == 'LONG':
                return price * 0.98, price * 1.04  # -2%, +4%
            else:
                return price * 1.02, price * 0.96  # +2%, -4%

    def find_support_levels(self, df: pd.DataFrame, lookback_period: int = 20) -> list:
        """–ù–∞—Ö–æ–¥–∏—Ç —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º—É–º—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–µ—Ä–∏–æ–¥—ã
            min_price = df['low'].rolling(window=lookback_period).min().iloc[-1]

            # –ò—â–µ–º –∫–ª–∞—Å—Ç–µ—Ä—ã —Ü–µ–Ω –≤–±–ª–∏–∑–∏ –º–∏–Ω–∏–º—É–º–æ–≤
            support_levels = []
            for i in range(2, len(df) - 2):
                if (df['low'].iloc[i] < df['low'].iloc[i - 1] and
                        df['low'].iloc[i] < df['low'].iloc[i - 2] and
                        df['low'].iloc[i] < df['low'].iloc[i + 1] and
                        df['low'].iloc[i] < df['low'].iloc[i + 2]):
                    support_levels.append(df['low'].iloc[i])

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —É–±—ã–≤–∞–Ω–∏—é
            return sorted(set(support_levels), reverse=True)[:3]  # –¢–æ–ø-3 —É—Ä–æ–≤–Ω—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏

        except Exception:
            return []

    def find_resistance_levels(self, df: pd.DataFrame, lookback_period: int = 20) -> list:
        """–ù–∞—Ö–æ–¥–∏—Ç —É—Ä–æ–≤–Ω–∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º—É–º—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–µ—Ä–∏–æ–¥—ã
            max_price = df['high'].rolling(window=lookback_period).max().iloc[-1]

            # –ò—â–µ–º –∫–ª–∞—Å—Ç–µ—Ä—ã —Ü–µ–Ω –≤–±–ª–∏–∑–∏ –º–∞–∫—Å–∏–º—É–º–æ–≤
            resistance_levels = []
            for i in range(2, len(df) - 2):
                if (df['high'].iloc[i] > df['high'].iloc[i - 1] and
                        df['high'].iloc[i] > df['high'].iloc[i - 2] and
                        df['high'].iloc[i] > df['high'].iloc[i + 1] and
                        df['high'].iloc[i] > df['high'].iloc[i + 2]):
                    resistance_levels.append(df['high'].iloc[i])

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
            return sorted(set(resistance_levels))[:3]  # –¢–æ–ø-3 —É—Ä–æ–≤–Ω—è —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è

        except Exception:
            return []

    def generate_trading_signal(self, dfs: dict, symbol: str, exchange_name: str) -> dict:
        if not dfs:
            return None

        try:
            # –ê–Ω–∞–ª–∏–∑ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö
            analysis_results = self.analyze_multiple_timeframes(dfs)
            if not analysis_results:
                return None

            confidence = self.calculate_confidence_from_analysis(analysis_results)

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ (15m)
            main_df = dfs.get('15m', next(iter(dfs.values())))
            last = main_df.iloc[-1]

            signal = {
                'symbol': symbol,
                'exchange': exchange_name,
                'timestamp': datetime.now(),
                'price': last['close'],
                'signal': 'HOLD',
                'confidence': abs(confidence),
                'reasons': [],
                'recommended_size': 0,
                'stop_loss': 0,
                'take_profit': 0,
                'timeframe_analysis': analysis_results
            }

            # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–∏—á–∏–Ω—ã
            reasons = []
            for tf, analysis in analysis_results.items():
                if analysis['signals']:
                    reasons.append(f"{tf}: {', '.join([s[0] for s in analysis['signals']])}")
                if analysis['trend'] != 'neutral':
                    reasons.append(f"{tf} trend: {analysis['trend']}")

            signal['reasons'] = reasons

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            if abs(confidence) < self.config['min_confidence']:
                return None

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
            if confidence > 0:
                signal['signal'] = 'LONG'
            else:
                signal['signal'] = 'SHORT'

            # –†–∞—Å—á–µ—Ç —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
            stop_loss, take_profit = self.calculate_stop_loss_take_profit(
                main_df, signal['signal'], signal['price']
            )

            signal['stop_loss'] = stop_loss
            signal['take_profit'] = take_profit

            # –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
            risk_per_unit = abs(signal['price'] - signal['stop_loss'])
            if risk_per_unit > 0:
                risk_amount = self.config['virtual_balance'] * self.config['risk_per_trade']
                signal['recommended_size'] = round(risk_amount / risk_per_unit, 6)

            return signal

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {symbol}: {e}")
            return None

    async def analyze_symbol(self, symbol: str) -> dict:
        best_signal = None
        best_confidence = 0

        for exchange_name, exchange in self.exchanges.items():
            if exchange is None:
                continue

            try:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—ã –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
                if self.is_blacklisted(symbol):
                    continue

                normalized_symbol = self.normalize_symbol_for_exchange(symbol, exchange_name)
                if not normalized_symbol:
                    continue

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
                dfs = {}
                for timeframe in self.config['timeframes']:
                    df = await self.fetch_ohlcv_data(exchange_name, symbol, timeframe, limit=100)
                    if df is not None:
                        df = self.calculate_technical_indicators(df)
                        dfs[timeframe] = df
                    await asyncio.sleep(0.02)

                if not dfs:
                    continue

                signal = self.generate_trading_signal(dfs, symbol, exchange_name)

                if signal and signal['confidence'] > best_confidence:
                    best_signal = signal
                    best_confidence = signal['confidence']

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol} –Ω–∞ {exchange_name}: {e}")
                continue

        return best_signal

    async def run_analysis(self):
        logger.info("–ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä...")
        start_time = time.time()

        self.top_symbols = await self.fetch_top_symbols()
        self.analysis_stats['total_analyzed'] = len(self.top_symbols)

        if not self.top_symbols:
            logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return []

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        symbols_to_analyze = self.top_symbols[:40]

        tasks = []
        for symbol in symbols_to_analyze:
            task = asyncio.create_task(self.analyze_symbol(symbol))
            tasks.append(task)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á–∞–º–∏ –ø–æ 8 —Å–∏–º–≤–æ–ª–æ–≤
        batch_size = 8
        all_signals = []

        for i in range(0, len(tasks), batch_size):
            batch = tasks[i:i + batch_size]
            try:
                results = await asyncio.gather(*batch, return_exceptions=True)

                for result in results:
                    if isinstance(result, Exception):
                        continue
                    elif result is not None:
                        all_signals.append(result)

                processed = min(i + batch_size, len(tasks))
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed}/{len(tasks)} —Å–∏–º–≤–æ–ª–æ–≤")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞: {e}")
                continue

            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
            await asyncio.sleep(1)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        self.signals = sorted(all_signals, key=lambda x: x['confidence'], reverse=True)
        self.analysis_stats['signals_found'] = len(self.signals)

        analysis_time = time.time() - start_time
        logger.info(f"–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {analysis_time:.1f} —Å–µ–∫. –ù–∞–π–¥–µ–Ω–æ {len(self.signals)} —Å–∏–≥–Ω–∞–ª–æ–≤")

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        await self.send_automatic_signals()

        return self.signals

    def print_signals(self, max_signals: int = 15):
        if not self.signals:
            print("üö´ –ù–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
            return

        print("\n" + "=" * 140)
        print("üéØ –¢–û–†–ì–û–í–´–ï –°–ò–ì–ù–ê–õ–´ –ù–ê –§–¨–Æ–ß–ï–†–°–´")
        print("=" * 140)
        print(
            f"{'–†–∞–Ω–≥':<4} {'–ë–∏—Ä–∂–∞':<8} {'–ü–∞—Ä–∞':<12} {'–°–∏–≥–Ω–∞–ª':<8} {'–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å':<10} {'–¶–µ–Ω–∞':<12} {'R/R':<6} {'–ü—Ä–∏—á–∏–Ω—ã'}")
        print("-" * 140)

        for i, signal in enumerate(self.signals[:max_signals]):
            rank = f"{i + 1}"
            exchange = self.format_exchange_name(signal['exchange'])[:8]
            symbol = signal['symbol'].replace('/USDT', '')[:12]
            signal_type = signal['signal'][:8]
            confidence = f"{signal['confidence'] * 100:.0f}%"
            price = f"{signal['price']:.6f}"
            rr_ratio = f"{abs(signal['take_profit'] - signal['price']) / abs(signal['price'] - signal['stop_loss']):.1f}"

            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 2 –ø—Ä–∏—á–∏–Ω—ã
            reasons = ', '.join(signal['reasons'][:2]) if signal['reasons'] else 'N/A'

            print(
                f"{rank:<4} {exchange:<8} {symbol:<12} {signal_type:<8} {confidence:<10} {price:<12} {rr_ratio:<6} {reasons}")

        print("=" * 140)

        # –î–µ—Ç–∞–ª–∏ –¥–ª—è —Ç–æ–ø-3 —Å–∏–≥–Ω–∞–ª–æ–≤
        for i, signal in enumerate(self.signals[:3]):
            print(
                f"\nüî• –¢–û–ü-{i + 1}: {signal['symbol'].replace('/USDT', '')} –Ω–∞ {self.format_exchange_name(signal['exchange'])}")
            print(f"üìä –°–∏–≥–Ω–∞–ª: {signal['signal']} ({signal['confidence'] * 100:.0f}% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏)")
            print(f"üí∞ –¶–µ–Ω–∞: {signal['price']:.8f}")
            print(f"üõë –°—Ç–æ–ø-–ª–æ—Å—Å: {signal['stop_loss']:.8f}")
            print(f"üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {signal['take_profit']:.8f}")
            print(f"‚öñÔ∏è –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {signal['recommended_size']:.6f}")
            print(
                f"üìà R/R —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: 1:{abs(signal['take_profit'] - signal['price']) / abs(signal['price'] - signal['stop_loss']):.1f}")
            if signal['reasons']:
                print(f"üîç –ü—Ä–∏—á–∏–Ω—ã: {', '.join(signal['reasons'][:3])}")

    async def run_continuous(self):
        """–ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞"""
        analysis_count = 0

        while True:
            try:
                analysis_count += 1
                print(f"\n{'=' * 80}")
                print(f"üìä –ê–ù–ê–õ–ò–ó #{analysis_count} - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
                print(f"{'=' * 80}")

                start_time = time.time()
                await self.run_analysis()
                self.last_analysis_time = datetime.now()
                self.last_signals = self.signals.copy()

                if self.signals:
                    self.print_signals()
                else:
                    print("üö´ –°–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

                execution_time = time.time() - start_time
                print(f"\n‚è±Ô∏è –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {execution_time:.1f} —Å–µ–∫—É–Ω–¥")
                print(
                    f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {self.analysis_stats['total_analyzed']} –ø–∞—Ä, {self.analysis_stats['signals_found']} —Å–∏–≥–Ω–∞–ª–æ–≤")

                # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                wait_time = max(self.config['analysis_interval'] - execution_time, 30)
                next_analysis_time = datetime.now().timestamp() + wait_time
                next_time_str = datetime.fromtimestamp(next_analysis_time).strftime("%H:%M:%S")

                print(f"‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∏–π –∞–Ω–∞–ª–∏–∑ –≤ {next_time_str} (—á–µ—Ä–µ–∑ {wait_time:.0f} —Å–µ–∫—É–Ω–¥)")
                print("üìä –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞..." + " " * 40, end='\r')

                # –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
                for sec in range(int(wait_time)):
                    try:
                        progress = (sec + 1) / wait_time * 50
                        bar = "‚ñà" * int(progress) + "‚ñë" * (50 - int(progress))
                        remaining = wait_time - sec - 1
                        print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ: [{bar}] {remaining}—Å–µ–∫ –æ—Å—Ç–∞–ª–æ—Å—å", end='\r')
                        await asyncio.sleep(1)
                    except KeyboardInterrupt:
                        raise
                    except Exception:
                        await asyncio.sleep(1)

                print(" " * 80, end='\r')  # –û—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏

            except KeyboardInterrupt:
                print("\n\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except Exception as e:
                print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                print("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(60)


async def main():
    bot = FuturesTradingBot()

    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π 9 –±–∏—Ä–∂!")
        print("üìä –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –±–∏—Ä–∂–∏: Bybit, MEXC, OKX, Gate.io, Bitget, KuCoin, HTX, BingX, Phemex")
        print("‚ö° –ú—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º –∞–Ω–∞–ª–∏–∑ (1h, 15m, 5m)")
        print("üìà –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: RSI, MACD, Bollinger Bands, EMA, Volume, Stochastic, ADX")
        print(
            f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏: –º–∏–Ω. —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {bot.config['min_confidence'] * 100}%, R/R=1:{bot.config['risk_reward_ratio']}")
        print("‚è∏Ô∏è –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C\n")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –±–æ—Ç–∞
        await bot.initialize_telegram()

        # –°—Ä–∞–∑—É –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        print("üìà –í—ã–ø–æ–ª–Ω—è—é –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑...")
        await bot.run_analysis()
        bot.last_analysis_time = datetime.now()
        bot.last_signals = bot.signals.copy()

        if bot.signals:
            bot.print_signals()
        else:
            print("üìä –°–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞
        await bot.run_continuous()

    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram –±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        if bot.telegram_app:
            await bot.telegram_app.updater.stop()
            await bot.telegram_app.stop()
            await bot.telegram_app.shutdown()
        if bot.telegram_worker_task:
            bot.telegram_worker_task.cancel()


if __name__ == "__main__":
    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    while True:
        try:
            asyncio.run(main())
        except KeyboardInterrupt:
            print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            break
        except Exception as e:
            print(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏: {e}")
            time.sleep(10)
